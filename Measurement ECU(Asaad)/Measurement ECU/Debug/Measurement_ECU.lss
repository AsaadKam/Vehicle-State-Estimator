
Measurement_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000187e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000187e  00001912  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008a  00800076  00800076  00001928  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000193c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00001978  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f45  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0b  00000000  00000000  00003c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b42  00000000  00000000  00004b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005bc  00000000  00000000  0000865c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bf1  00000000  00000000  00008c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ad8  00000000  00000000  00009809  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000b2e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_1>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__vector_4>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__vector_7>
      20:	0c 94 b9 05 	jmp	0xb72	; 0xb72 <__vector_8>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__vector_10>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 90 03 	jmp	0x720	; 0x720 <__vector_13>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 ca 03 	jmp	0x794	; 0x794 <__vector_15>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ee e7       	ldi	r30, 0x7E	; 126
      ea:	f8 e1       	ldi	r31, 0x18	; 24
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a6 37       	cpi	r26, 0x76	; 118
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	a6 e7       	ldi	r26, 0x76	; 118
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a0 30       	cpi	r26, 0x00	; 0
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <main>
     10c:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <TIMR0_CTC_CALLBACK_FUNC_ISR>:
	UART_SendByte(ENTER_CHARACHTER);
}
	
/***The function that will execute in CTC Timer ISR***/
static void TIMR0_CTC_CALLBACK_FUNC_ISR(void)
{
     114:	cf 92       	push	r12
     116:	df 92       	push	r13
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	00 d0       	rcall	.+0      	; 0x122 <TIMR0_CTC_CALLBACK_FUNC_ISR+0xe>
     122:	00 d0       	rcall	.+0      	; 0x124 <TIMR0_CTC_CALLBACK_FUNC_ISR+0x10>
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
    /***Incrementing miliseconds***/
	f64_Miliseconds++;
     128:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <f64_Miliseconds>
     12c:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <f64_Miliseconds+0x1>
     130:	a0 91 81 00 	lds	r26, 0x0081	; 0x800081 <f64_Miliseconds+0x2>
     134:	b0 91 82 00 	lds	r27, 0x0082	; 0x800082 <f64_Miliseconds+0x3>
     138:	89 83       	std	Y+1, r24	; 0x01
     13a:	9a 83       	std	Y+2, r25	; 0x02
     13c:	ab 83       	std	Y+3, r26	; 0x03
     13e:	bc 83       	std	Y+4, r27	; 0x04
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	40 e8       	ldi	r20, 0x80	; 128
     146:	5f e3       	ldi	r21, 0x3F	; 63
     148:	bc 01       	movw	r22, r24
     14a:	cd 01       	movw	r24, r26
     14c:	0e 94 81 07 	call	0xf02	; 0xf02 <__addsf3>
     150:	46 2f       	mov	r20, r22
     152:	57 2f       	mov	r21, r23
     154:	68 2f       	mov	r22, r24
     156:	79 2f       	mov	r23, r25
     158:	40 93 7f 00 	sts	0x007F, r20	; 0x80007f <f64_Miliseconds>
     15c:	50 93 80 00 	sts	0x0080, r21	; 0x800080 <f64_Miliseconds+0x1>
     160:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <f64_Miliseconds+0x2>
     164:	70 93 82 00 	sts	0x0082, r23	; 0x800082 <f64_Miliseconds+0x3>
	/**Here we made the calculation of the distance in m**/
	f64_Distances_In_M+=(f64_Velocity_In_M_PER_S/1000.0);
     168:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     16c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     170:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__data_start+0x2>
     174:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__data_start+0x3>
     178:	89 83       	std	Y+1, r24	; 0x01
     17a:	9a 83       	std	Y+2, r25	; 0x02
     17c:	ab 83       	std	Y+3, r26	; 0x03
     17e:	bc 83       	std	Y+4, r27	; 0x04
     180:	c0 90 77 00 	lds	r12, 0x0077	; 0x800077 <f64_Distances_In_M>
     184:	d0 90 78 00 	lds	r13, 0x0078	; 0x800078 <f64_Distances_In_M+0x1>
     188:	e0 90 79 00 	lds	r14, 0x0079	; 0x800079 <f64_Distances_In_M+0x2>
     18c:	f0 90 7a 00 	lds	r15, 0x007A	; 0x80007a <f64_Distances_In_M+0x3>
     190:	20 e0       	ldi	r18, 0x00	; 0
     192:	30 e0       	ldi	r19, 0x00	; 0
     194:	4a e7       	ldi	r20, 0x7A	; 122
     196:	54 e4       	ldi	r21, 0x44	; 68
     198:	bc 01       	movw	r22, r24
     19a:	cd 01       	movw	r24, r26
     19c:	0e 94 ed 07 	call	0xfda	; 0xfda <__divsf3>
     1a0:	a7 01       	movw	r20, r14
     1a2:	96 01       	movw	r18, r12
     1a4:	69 83       	std	Y+1, r22	; 0x01
     1a6:	7a 83       	std	Y+2, r23	; 0x02
     1a8:	8b 83       	std	Y+3, r24	; 0x03
     1aa:	9c 83       	std	Y+4, r25	; 0x04
     1ac:	69 81       	ldd	r22, Y+1	; 0x01
     1ae:	7a 81       	ldd	r23, Y+2	; 0x02
     1b0:	8b 81       	ldd	r24, Y+3	; 0x03
     1b2:	9c 81       	ldd	r25, Y+4	; 0x04
     1b4:	0e 94 81 07 	call	0xf02	; 0xf02 <__addsf3>
     1b8:	46 2f       	mov	r20, r22
     1ba:	57 2f       	mov	r21, r23
     1bc:	68 2f       	mov	r22, r24
     1be:	79 2f       	mov	r23, r25
     1c0:	40 93 77 00 	sts	0x0077, r20	; 0x800077 <f64_Distances_In_M>
     1c4:	50 93 78 00 	sts	0x0078, r21	; 0x800078 <f64_Distances_In_M+0x1>
     1c8:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <f64_Distances_In_M+0x2>
     1cc:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <f64_Distances_In_M+0x3>
	/**Measurment of time in seconds***/
	f64_Time_In_Seconds=f64_Miliseconds/1000.0;	
     1d0:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <f64_Miliseconds>
     1d4:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <f64_Miliseconds+0x1>
     1d8:	a0 91 81 00 	lds	r26, 0x0081	; 0x800081 <f64_Miliseconds+0x2>
     1dc:	b0 91 82 00 	lds	r27, 0x0082	; 0x800082 <f64_Miliseconds+0x3>
     1e0:	89 83       	std	Y+1, r24	; 0x01
     1e2:	9a 83       	std	Y+2, r25	; 0x02
     1e4:	ab 83       	std	Y+3, r26	; 0x03
     1e6:	bc 83       	std	Y+4, r27	; 0x04
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	4a e7       	ldi	r20, 0x7A	; 122
     1ee:	54 e4       	ldi	r21, 0x44	; 68
     1f0:	bc 01       	movw	r22, r24
     1f2:	cd 01       	movw	r24, r26
     1f4:	0e 94 ed 07 	call	0xfda	; 0xfda <__divsf3>
     1f8:	46 2f       	mov	r20, r22
     1fa:	57 2f       	mov	r21, r23
     1fc:	68 2f       	mov	r22, r24
     1fe:	79 2f       	mov	r23, r25
     200:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <f64_Time_In_Seconds>
     204:	50 93 7c 00 	sts	0x007C, r21	; 0x80007c <f64_Time_In_Seconds+0x1>
     208:	60 93 7d 00 	sts	0x007D, r22	; 0x80007d <f64_Time_In_Seconds+0x2>
     20c:	70 93 7e 00 	sts	0x007E, r23	; 0x80007e <f64_Time_In_Seconds+0x3>
}
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	0f 90       	pop	r0
     216:	0f 90       	pop	r0
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	df 90       	pop	r13
     222:	cf 90       	pop	r12
     224:	08 95       	ret

00000226 <UART_TRANSFER_INT_DATA>:
{
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
     22e:	2c 97       	sbiw	r28, 0x0c	; 12
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	f8 94       	cli
     234:	de bf       	out	0x3e, r29	; 62
     236:	0f be       	out	0x3f, r0	; 63
     238:	cd bf       	out	0x3d, r28	; 61
	char *pu8_INT_STRING=TransformIntToString(u64_Copy_INT_DATA);
     23a:	9b 01       	movw	r18, r22
     23c:	ac 01       	movw	r20, r24
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	cb 01       	movw	r24, r22
     244:	2d 83       	std	Y+5, r18	; 0x05
     246:	3e 83       	std	Y+6, r19	; 0x06
     248:	4f 83       	std	Y+7, r20	; 0x07
     24a:	58 87       	std	Y+8, r21	; 0x08
     24c:	69 87       	std	Y+9, r22	; 0x09
     24e:	7a 87       	std	Y+10, r23	; 0x0a
     250:	8b 87       	std	Y+11, r24	; 0x0b
     252:	9c 87       	std	Y+12, r25	; 0x0c
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 b8 06 	call	0xd70	; 0xd70 <TransformIntToString>
     260:	89 83       	std	Y+1, r24	; 0x01
     262:	9a 83       	std	Y+2, r25	; 0x02
	while(*pu8_INT_STRING)
     264:	a9 81       	ldd	r26, Y+1	; 0x01
     266:	ba 81       	ldd	r27, Y+2	; 0x02
     268:	8c 91       	ld	r24, X
     26a:	88 23       	and	r24, r24
     26c:	61 f0       	breq	.+24     	; 0x286 <UART_TRANSFER_INT_DATA+0x60>
     26e:	11 96       	adiw	r26, 0x01	; 1
     270:	ba 83       	std	Y+2, r27	; 0x02
     272:	a9 83       	std	Y+1, r26	; 0x01
		UART_SendByte(*pu8_INT_STRING);
     274:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>
	while(*pu8_INT_STRING)
     278:	e9 81       	ldd	r30, Y+1	; 0x01
     27a:	fa 81       	ldd	r31, Y+2	; 0x02
     27c:	81 91       	ld	r24, Z+
     27e:	fa 83       	std	Y+2, r31	; 0x02
     280:	e9 83       	std	Y+1, r30	; 0x01
     282:	81 11       	cpse	r24, r1
     284:	f7 cf       	rjmp	.-18     	; 0x274 <UART_TRANSFER_INT_DATA+0x4e>
}
     286:	2c 96       	adiw	r28, 0x0c	; 12
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <__vector_1>:
/***The function that will execute in External Interrupt ISR****/

void EXTERNAL_INTERRUPT_0_FUNC_ISR(void)
{
     298:	1f 92       	push	r1
     29a:	0f 92       	push	r0
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	0f 92       	push	r0
     2a0:	11 24       	eor	r1, r1
     2a2:	2f 93       	push	r18
     2a4:	3f 93       	push	r19
     2a6:	4f 93       	push	r20
     2a8:	5f 93       	push	r21
     2aa:	6f 93       	push	r22
     2ac:	7f 93       	push	r23
     2ae:	8f 93       	push	r24
     2b0:	9f 93       	push	r25
     2b2:	af 93       	push	r26
     2b4:	bf 93       	push	r27
     2b6:	ef 93       	push	r30
     2b8:	ff 93       	push	r31
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	00 d0       	rcall	.+0      	; 0x2c0 <__vector_1+0x28>
     2c0:	00 d0       	rcall	.+0      	; 0x2c2 <__vector_1+0x2a>
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
	UART_SendByte('V');	
     2c6:	86 e5       	ldi	r24, 0x56	; 86
     2c8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>
	UART_SendByte('=');	
     2cc:	8d e3       	ldi	r24, 0x3D	; 61
     2ce:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>
	UART_TRANSFER_INT_DATA(f64_Velocity_In_M_PER_S);
     2d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     2d6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     2da:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__data_start+0x2>
     2de:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__data_start+0x3>
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	9a 83       	std	Y+2, r25	; 0x02
     2e6:	ab 83       	std	Y+3, r26	; 0x03
     2e8:	bc 83       	std	Y+4, r27	; 0x04
     2ea:	bc 01       	movw	r22, r24
     2ec:	cd 01       	movw	r24, r26
     2ee:	0e 94 9b 08 	call	0x1136	; 0x1136 <__fixunssfsi>
     2f2:	0e 94 13 01 	call	0x226	; 0x226 <UART_TRANSFER_INT_DATA>
	UART_SendByte(SPACE_CHARACHTER);
     2f6:	80 e2       	ldi	r24, 0x20	; 32
     2f8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>
	UART_SendByte(',');	
     2fc:	8c e2       	ldi	r24, 0x2C	; 44
     2fe:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>
	UART_SendByte('D');
     302:	84 e4       	ldi	r24, 0x44	; 68
     304:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>
	UART_SendByte('=');	
     308:	8d e3       	ldi	r24, 0x3D	; 61
     30a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>
	UART_TRANSFER_INT_DATA(f64_Distances_In_M);
     30e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <f64_Distances_In_M>
     312:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <f64_Distances_In_M+0x1>
     316:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <f64_Distances_In_M+0x2>
     31a:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <f64_Distances_In_M+0x3>
     31e:	89 83       	std	Y+1, r24	; 0x01
     320:	9a 83       	std	Y+2, r25	; 0x02
     322:	ab 83       	std	Y+3, r26	; 0x03
     324:	bc 83       	std	Y+4, r27	; 0x04
     326:	bc 01       	movw	r22, r24
     328:	cd 01       	movw	r24, r26
     32a:	0e 94 9b 08 	call	0x1136	; 0x1136 <__fixunssfsi>
     32e:	0e 94 13 01 	call	0x226	; 0x226 <UART_TRANSFER_INT_DATA>
	UART_SendByte(SPACE_CHARACHTER);
     332:	80 e2       	ldi	r24, 0x20	; 32
     334:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>
	UART_SendByte(',');	
     338:	8c e2       	ldi	r24, 0x2C	; 44
     33a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>
	UART_SendByte('T');
     33e:	84 e5       	ldi	r24, 0x54	; 84
     340:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>
	UART_SendByte('=');	
     344:	8d e3       	ldi	r24, 0x3D	; 61
     346:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>
	UART_TRANSFER_INT_DATA(f64_Time_In_Seconds);
     34a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <f64_Time_In_Seconds>
     34e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <f64_Time_In_Seconds+0x1>
     352:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <f64_Time_In_Seconds+0x2>
     356:	b0 91 7e 00 	lds	r27, 0x007E	; 0x80007e <f64_Time_In_Seconds+0x3>
     35a:	89 83       	std	Y+1, r24	; 0x01
     35c:	9a 83       	std	Y+2, r25	; 0x02
     35e:	ab 83       	std	Y+3, r26	; 0x03
     360:	bc 83       	std	Y+4, r27	; 0x04
     362:	bc 01       	movw	r22, r24
     364:	cd 01       	movw	r24, r26
     366:	0e 94 9b 08 	call	0x1136	; 0x1136 <__fixunssfsi>
     36a:	0e 94 13 01 	call	0x226	; 0x226 <UART_TRANSFER_INT_DATA>
	UART_SendByte('.');
     36e:	8e e2       	ldi	r24, 0x2E	; 46
     370:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>
	UART_SendByte(ENTER_CHARACHTER);
     374:	8d e0       	ldi	r24, 0x0D	; 13
     376:	0e 94 70 04 	call	0x8e0	; 0x8e0 <UART_SendByte>

	/***Uart print measurment of data***/
	UART_PRINT_MEASURING_DATA();
	/***Then it let the values of Distance and time equal zero**/
	f64_Distances_In_M=0U;
     37a:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <f64_Distances_In_M>
     37e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <f64_Distances_In_M+0x1>
     382:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <f64_Distances_In_M+0x2>
     386:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <f64_Distances_In_M+0x3>
	/* Time_In_Seconds=0U; */
	f64_Miliseconds=0U; 
     38a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <f64_Miliseconds>
     38e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <f64_Miliseconds+0x1>
     392:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <f64_Miliseconds+0x2>
     396:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <f64_Miliseconds+0x3>
}
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	ff 91       	pop	r31
     3a8:	ef 91       	pop	r30
     3aa:	bf 91       	pop	r27
     3ac:	af 91       	pop	r26
     3ae:	9f 91       	pop	r25
     3b0:	8f 91       	pop	r24
     3b2:	7f 91       	pop	r23
     3b4:	6f 91       	pop	r22
     3b6:	5f 91       	pop	r21
     3b8:	4f 91       	pop	r20
     3ba:	3f 91       	pop	r19
     3bc:	2f 91       	pop	r18
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <main>:
	
}


int main()
{
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <main+0x2>
     3ca:	00 d0       	rcall	.+0      	; 0x3cc <main+0x4>
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
	/**Initailize SPI by Spi Configuration**/
	SPI_Init(&spi);
     3d0:	80 e7       	ldi	r24, 0x70	; 112
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 07 06 	call	0xc0e	; 0xc0e <SPI_Init>
	/**Initalize setcall back for spi ISR**/
	 /*SPI_SETCALL_BACK(SPI_SLAVE_FUNCTION_ISR);*/
	/**Initalization fo Timer**/
    Timer_Init(&Measurement_ECU_TIMER_Init_Config);
     3d8:	8c e6       	ldi	r24, 0x6C	; 108
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 90 04 	call	0x920	; 0x920 <Timer_Init>
	/***Start the timer to count until it reaches 1 mili to measure at each mili the velocity and the new distance***/
	Timer_Start(TIMER0,Nothing_passed,TIMR0_CTC_CALLBACK_FUNC_ISR);
     3e0:	4a e8       	ldi	r20, 0x8A	; 138
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 de 04 	call	0x9bc	; 0x9bc <Timer_Start>
	/**Initalize UART by configuration structure***/
	UART_Init(&Measurement_ECU_TX_UART_CONFIG);
     3ee:	85 e6       	ldi	r24, 0x65	; 101
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 01 04 	call	0x802	; 0x802 <UART_Init>
	/**Initalize GPIO pin as input for INT0**/
    DIO_INIT_Pin(INT0_PIN,INPUT);
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	8a e1       	ldi	r24, 0x1A	; 26
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_INIT_Pin>
	/**Initailize INT0 as external interrupt falling edge**/
	ENABLE_EXTERNAL_INTERRUPT_0(FAILING);
     402:	85 b7       	in	r24, 0x35	; 53
     404:	82 60       	ori	r24, 0x02	; 2
     406:	85 bf       	out	0x35, r24	; 53
     408:	8b b7       	in	r24, 0x3b	; 59
     40a:	80 64       	ori	r24, 0x40	; 64
     40c:	8b bf       	out	0x3b, r24	; 59

 
	while(1)
	{
		SPI_RecieveByte(&sgc_updated_speed);
     40e:	86 e7       	ldi	r24, 0x76	; 118
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 98 06 	call	0xd30	; 0xd30 <SPI_RecieveByte>
	    f64_Velocity_In_M_PER_S=sgc_updated_speed;
     416:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end>
     41a:	28 2f       	mov	r18, r24
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	29 83       	std	Y+1, r18	; 0x01
     424:	3a 83       	std	Y+2, r19	; 0x02
     426:	4b 83       	std	Y+3, r20	; 0x03
     428:	5c 83       	std	Y+4, r21	; 0x04
     42a:	ca 01       	movw	r24, r20
     42c:	b9 01       	movw	r22, r18
     42e:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatunsisf>
     432:	46 2f       	mov	r20, r22
     434:	57 2f       	mov	r21, r23
     436:	68 2f       	mov	r22, r24
     438:	79 2f       	mov	r23, r25
     43a:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__data_start>
     43e:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__data_start+0x1>
     442:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_start+0x2>
     446:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__data_start+0x3>
	while(1)
     44a:	e1 cf       	rjmp	.-62     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

0000044c <DIO_INIT_Pin>:
}
uint8_t DIO_INIT_Pin(uint8_t pin, uint8_t direction)
{
	uint8_t por;

	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     44c:	80 32       	cpi	r24, 0x20	; 32
     44e:	08 f0       	brcs	.+2      	; 0x452 <DIO_INIT_Pin+0x6>
     450:	8b c0       	rjmp	.+278    	; 0x568 <DIO_INIT_Pin+0x11c>
    else
	{
	por='A'+pin/PortSize;
     452:	28 2f       	mov	r18, r24
     454:	26 95       	lsr	r18
     456:	26 95       	lsr	r18
     458:	26 95       	lsr	r18
     45a:	91 e4       	ldi	r25, 0x41	; 65
     45c:	92 0f       	add	r25, r18
	pin=pin%PortSize;
     45e:	87 70       	andi	r24, 0x07	; 7
	}
	
    switch(por)
     460:	22 30       	cpi	r18, 0x02	; 2
     462:	09 f4       	brne	.+2      	; 0x466 <DIO_INIT_Pin+0x1a>
     464:	45 c0       	rjmp	.+138    	; 0x4f0 <DIO_INIT_Pin+0xa4>
     466:	94 34       	cpi	r25, 0x44	; 68
     468:	08 f0       	brcs	.+2      	; 0x46c <DIO_INIT_Pin+0x20>
     46a:	60 c0       	rjmp	.+192    	; 0x52c <DIO_INIT_Pin+0xe0>
     46c:	91 34       	cpi	r25, 0x41	; 65
     46e:	a9 f0       	breq	.+42     	; 0x49a <DIO_INIT_Pin+0x4e>
     470:	92 34       	cpi	r25, 0x42	; 66
     472:	89 f4       	brne	.+34     	; 0x496 <DIO_INIT_Pin+0x4a>
    {
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
              break;

    case 'B': if(direction==0){CLR_BIT(DirectionRegisterB,pin);}else{SET_BIT(DirectionRegisterB,pin);}
     474:	61 11       	cpse	r22, r1
     476:	2f c0       	rjmp	.+94     	; 0x4d6 <DIO_INIT_Pin+0x8a>
     478:	47 b3       	in	r20, 0x17	; 23
     47a:	21 e0       	ldi	r18, 0x01	; 1
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	f9 01       	movw	r30, r18
     480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_INIT_Pin+0x3a>
     482:	ee 0f       	add	r30, r30
     484:	ff 1f       	adc	r31, r31
     486:	8a 95       	dec	r24
     488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_INIT_Pin+0x36>
     48a:	cf 01       	movw	r24, r30
     48c:	80 95       	com	r24
     48e:	84 23       	and	r24, r20
     490:	87 bb       	out	0x17, r24	; 23
#endif
	default :
	return DIO_ERROR_NOK;
	break;
	}
return DIO_ERROR_OK;
     492:	86 2f       	mov	r24, r22
     494:	08 95       	ret
    switch(por)
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	08 95       	ret
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
     49a:	61 11       	cpse	r22, r1
     49c:	0f c0       	rjmp	.+30     	; 0x4bc <DIO_INIT_Pin+0x70>
     49e:	4a b3       	in	r20, 0x1a	; 26
     4a0:	21 e0       	ldi	r18, 0x01	; 1
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	f9 01       	movw	r30, r18
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_INIT_Pin+0x60>
     4a8:	ee 0f       	add	r30, r30
     4aa:	ff 1f       	adc	r31, r31
     4ac:	8a 95       	dec	r24
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_INIT_Pin+0x5c>
     4b0:	cf 01       	movw	r24, r30
     4b2:	80 95       	com	r24
     4b4:	84 23       	and	r24, r20
     4b6:	8a bb       	out	0x1a, r24	; 26
return DIO_ERROR_OK;
     4b8:	86 2f       	mov	r24, r22
     4ba:	08 95       	ret
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
     4bc:	9a b3       	in	r25, 0x1a	; 26
     4be:	21 e0       	ldi	r18, 0x01	; 1
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_INIT_Pin+0x7c>
     4c4:	22 0f       	add	r18, r18
     4c6:	33 1f       	adc	r19, r19
     4c8:	8a 95       	dec	r24
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_INIT_Pin+0x78>
     4cc:	89 2f       	mov	r24, r25
     4ce:	82 2b       	or	r24, r18
     4d0:	8a bb       	out	0x1a, r24	; 26
return DIO_ERROR_OK;
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	08 95       	ret
    case 'B': if(direction==0){CLR_BIT(DirectionRegisterB,pin);}else{SET_BIT(DirectionRegisterB,pin);}
     4d6:	97 b3       	in	r25, 0x17	; 23
     4d8:	21 e0       	ldi	r18, 0x01	; 1
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_INIT_Pin+0x96>
     4de:	22 0f       	add	r18, r18
     4e0:	33 1f       	adc	r19, r19
     4e2:	8a 95       	dec	r24
     4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_INIT_Pin+0x92>
     4e6:	89 2f       	mov	r24, r25
     4e8:	82 2b       	or	r24, r18
     4ea:	87 bb       	out	0x17, r24	; 23
return DIO_ERROR_OK;
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	08 95       	ret
    case 'C': if(direction==0){CLR_BIT(DirectionRegisterC,pin);}else{SET_BIT(DirectionRegisterC,pin);}
     4f0:	61 11       	cpse	r22, r1
     4f2:	0f c0       	rjmp	.+30     	; 0x512 <DIO_INIT_Pin+0xc6>
     4f4:	44 b3       	in	r20, 0x14	; 20
     4f6:	21 e0       	ldi	r18, 0x01	; 1
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	f9 01       	movw	r30, r18
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_INIT_Pin+0xb6>
     4fe:	ee 0f       	add	r30, r30
     500:	ff 1f       	adc	r31, r31
     502:	8a 95       	dec	r24
     504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_INIT_Pin+0xb2>
     506:	cf 01       	movw	r24, r30
     508:	80 95       	com	r24
     50a:	84 23       	and	r24, r20
     50c:	84 bb       	out	0x14, r24	; 20
return DIO_ERROR_OK;
     50e:	86 2f       	mov	r24, r22
     510:	08 95       	ret
    case 'C': if(direction==0){CLR_BIT(DirectionRegisterC,pin);}else{SET_BIT(DirectionRegisterC,pin);}
     512:	94 b3       	in	r25, 0x14	; 20
     514:	21 e0       	ldi	r18, 0x01	; 1
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_INIT_Pin+0xd2>
     51a:	22 0f       	add	r18, r18
     51c:	33 1f       	adc	r19, r19
     51e:	8a 95       	dec	r24
     520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_INIT_Pin+0xce>
     522:	89 2f       	mov	r24, r25
     524:	82 2b       	or	r24, r18
     526:	84 bb       	out	0x14, r24	; 20
return DIO_ERROR_OK;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	08 95       	ret
    case 'D': if(direction==0){CLR_BIT(DirectionRegisterD,pin);}else{SET_BIT(DirectionRegisterD,pin);}
     52c:	61 11       	cpse	r22, r1
     52e:	0f c0       	rjmp	.+30     	; 0x54e <DIO_INIT_Pin+0x102>
     530:	41 b3       	in	r20, 0x11	; 17
     532:	21 e0       	ldi	r18, 0x01	; 1
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	b9 01       	movw	r22, r18
     538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_INIT_Pin+0xf2>
     53a:	66 0f       	add	r22, r22
     53c:	77 1f       	adc	r23, r23
     53e:	8a 95       	dec	r24
     540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_INIT_Pin+0xee>
     542:	cb 01       	movw	r24, r22
     544:	80 95       	com	r24
     546:	84 23       	and	r24, r20
     548:	81 bb       	out	0x11, r24	; 17
	return DIO_ERROR_NOK;
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	08 95       	ret
    case 'D': if(direction==0){CLR_BIT(DirectionRegisterD,pin);}else{SET_BIT(DirectionRegisterD,pin);}
     54e:	91 b3       	in	r25, 0x11	; 17
     550:	21 e0       	ldi	r18, 0x01	; 1
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_INIT_Pin+0x10e>
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	8a 95       	dec	r24
     55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_INIT_Pin+0x10a>
     55e:	89 2f       	mov	r24, r25
     560:	82 2b       	or	r24, r18
     562:	81 bb       	out	0x11, r24	; 17
	return DIO_ERROR_NOK;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	08 95       	ret
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     568:	81 e0       	ldi	r24, 0x01	; 1
}
     56a:	08 95       	ret

0000056c <DIO_Write_Pin>:
return DIO_ERROR_OK;
}
uint8_t DIO_Write_Pin(uint8_t pin,uint8_t BitValue)
{
	uint8_t por;
 	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     56c:	80 32       	cpi	r24, 0x20	; 32
     56e:	08 f0       	brcs	.+2      	; 0x572 <DIO_Write_Pin+0x6>
     570:	8b c0       	rjmp	.+278    	; 0x688 <DIO_Write_Pin+0x11c>
 	else
 	{
	 	por='A'+pin/PortSize;
     572:	28 2f       	mov	r18, r24
     574:	26 95       	lsr	r18
     576:	26 95       	lsr	r18
     578:	26 95       	lsr	r18
     57a:	91 e4       	ldi	r25, 0x41	; 65
     57c:	92 0f       	add	r25, r18
	 	pin=pin%PortSize;
     57e:	87 70       	andi	r24, 0x07	; 7
 	}
	 
    switch(por)
     580:	22 30       	cpi	r18, 0x02	; 2
     582:	09 f4       	brne	.+2      	; 0x586 <DIO_Write_Pin+0x1a>
     584:	45 c0       	rjmp	.+138    	; 0x610 <DIO_Write_Pin+0xa4>
     586:	94 34       	cpi	r25, 0x44	; 68
     588:	08 f0       	brcs	.+2      	; 0x58c <DIO_Write_Pin+0x20>
     58a:	60 c0       	rjmp	.+192    	; 0x64c <DIO_Write_Pin+0xe0>
     58c:	91 34       	cpi	r25, 0x41	; 65
     58e:	a9 f0       	breq	.+42     	; 0x5ba <DIO_Write_Pin+0x4e>
     590:	92 34       	cpi	r25, 0x42	; 66
     592:	89 f4       	brne	.+34     	; 0x5b6 <DIO_Write_Pin+0x4a>
    {
   case 'A': if(BitValue==0){CLR_BIT(WriteRegisterA,pin);}else{SET_BIT(WriteRegisterA,pin);}
              break;

    case 'B': if(BitValue==0){CLR_BIT(WriteRegisterB,pin);}else{SET_BIT(WriteRegisterB,pin);}
     594:	61 11       	cpse	r22, r1
     596:	2f c0       	rjmp	.+94     	; 0x5f6 <DIO_Write_Pin+0x8a>
     598:	48 b3       	in	r20, 0x18	; 24
     59a:	21 e0       	ldi	r18, 0x01	; 1
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_Write_Pin+0x3a>
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	8a 95       	dec	r24
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_Write_Pin+0x36>
     5aa:	cf 01       	movw	r24, r30
     5ac:	80 95       	com	r24
     5ae:	84 23       	and	r24, r20
     5b0:	88 bb       	out	0x18, r24	; 24
	#endif
	default :
	return DIO_ERROR_NOK;
	break;
	}
	return DIO_ERROR_OK;
     5b2:	86 2f       	mov	r24, r22
     5b4:	08 95       	ret
    switch(por)
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	08 95       	ret
   case 'A': if(BitValue==0){CLR_BIT(WriteRegisterA,pin);}else{SET_BIT(WriteRegisterA,pin);}
     5ba:	61 11       	cpse	r22, r1
     5bc:	0f c0       	rjmp	.+30     	; 0x5dc <DIO_Write_Pin+0x70>
     5be:	4b b3       	in	r20, 0x1b	; 27
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	f9 01       	movw	r30, r18
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_Write_Pin+0x60>
     5c8:	ee 0f       	add	r30, r30
     5ca:	ff 1f       	adc	r31, r31
     5cc:	8a 95       	dec	r24
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_Write_Pin+0x5c>
     5d0:	cf 01       	movw	r24, r30
     5d2:	80 95       	com	r24
     5d4:	84 23       	and	r24, r20
     5d6:	8b bb       	out	0x1b, r24	; 27
	return DIO_ERROR_OK;
     5d8:	86 2f       	mov	r24, r22
     5da:	08 95       	ret
   case 'A': if(BitValue==0){CLR_BIT(WriteRegisterA,pin);}else{SET_BIT(WriteRegisterA,pin);}
     5dc:	9b b3       	in	r25, 0x1b	; 27
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_Write_Pin+0x7c>
     5e4:	22 0f       	add	r18, r18
     5e6:	33 1f       	adc	r19, r19
     5e8:	8a 95       	dec	r24
     5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_Write_Pin+0x78>
     5ec:	89 2f       	mov	r24, r25
     5ee:	82 2b       	or	r24, r18
     5f0:	8b bb       	out	0x1b, r24	; 27
	return DIO_ERROR_OK;
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	08 95       	ret
    case 'B': if(BitValue==0){CLR_BIT(WriteRegisterB,pin);}else{SET_BIT(WriteRegisterB,pin);}
     5f6:	98 b3       	in	r25, 0x18	; 24
     5f8:	21 e0       	ldi	r18, 0x01	; 1
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_Write_Pin+0x96>
     5fe:	22 0f       	add	r18, r18
     600:	33 1f       	adc	r19, r19
     602:	8a 95       	dec	r24
     604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_Write_Pin+0x92>
     606:	89 2f       	mov	r24, r25
     608:	82 2b       	or	r24, r18
     60a:	88 bb       	out	0x18, r24	; 24
	return DIO_ERROR_OK;
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	08 95       	ret
    case 'C': if(BitValue==0){CLR_BIT(WriteRegisterC,pin);}else{SET_BIT(WriteRegisterC,pin);}
     610:	61 11       	cpse	r22, r1
     612:	0f c0       	rjmp	.+30     	; 0x632 <DIO_Write_Pin+0xc6>
     614:	45 b3       	in	r20, 0x15	; 21
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	f9 01       	movw	r30, r18
     61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_Write_Pin+0xb6>
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	8a 95       	dec	r24
     624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_Write_Pin+0xb2>
     626:	cf 01       	movw	r24, r30
     628:	80 95       	com	r24
     62a:	84 23       	and	r24, r20
     62c:	85 bb       	out	0x15, r24	; 21
	return DIO_ERROR_OK;
     62e:	86 2f       	mov	r24, r22
     630:	08 95       	ret
    case 'C': if(BitValue==0){CLR_BIT(WriteRegisterC,pin);}else{SET_BIT(WriteRegisterC,pin);}
     632:	95 b3       	in	r25, 0x15	; 21
     634:	21 e0       	ldi	r18, 0x01	; 1
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_Write_Pin+0xd2>
     63a:	22 0f       	add	r18, r18
     63c:	33 1f       	adc	r19, r19
     63e:	8a 95       	dec	r24
     640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_Write_Pin+0xce>
     642:	89 2f       	mov	r24, r25
     644:	82 2b       	or	r24, r18
     646:	85 bb       	out	0x15, r24	; 21
	return DIO_ERROR_OK;
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	08 95       	ret
    case 'D': if(BitValue==0){CLR_BIT(WriteRegisterD,pin);}else{SET_BIT(WriteRegisterD,pin);}
     64c:	61 11       	cpse	r22, r1
     64e:	0f c0       	rjmp	.+30     	; 0x66e <DIO_Write_Pin+0x102>
     650:	42 b3       	in	r20, 0x12	; 18
     652:	21 e0       	ldi	r18, 0x01	; 1
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	f9 01       	movw	r30, r18
     658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_Write_Pin+0xf2>
     65a:	ee 0f       	add	r30, r30
     65c:	ff 1f       	adc	r31, r31
     65e:	8a 95       	dec	r24
     660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_Write_Pin+0xee>
     662:	cf 01       	movw	r24, r30
     664:	80 95       	com	r24
     666:	84 23       	and	r24, r20
     668:	82 bb       	out	0x12, r24	; 18
	return DIO_ERROR_OK;
     66a:	86 2f       	mov	r24, r22
     66c:	08 95       	ret
    case 'D': if(BitValue==0){CLR_BIT(WriteRegisterD,pin);}else{SET_BIT(WriteRegisterD,pin);}
     66e:	92 b3       	in	r25, 0x12	; 18
     670:	21 e0       	ldi	r18, 0x01	; 1
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_Write_Pin+0x10e>
     676:	22 0f       	add	r18, r18
     678:	33 1f       	adc	r19, r19
     67a:	8a 95       	dec	r24
     67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_Write_Pin+0x10a>
     67e:	89 2f       	mov	r24, r25
     680:	82 2b       	or	r24, r18
     682:	82 bb       	out	0x12, r24	; 18
	return DIO_ERROR_OK;
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	08 95       	ret
 	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     688:	81 e0       	ldi	r24, 0x01	; 1
}
     68a:	08 95       	ret

0000068c <DIO_toggle_Pin>:
return DIO_ERROR_OK;
}
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     68c:	80 32       	cpi	r24, 0x20	; 32
     68e:	08 f0       	brcs	.+2      	; 0x692 <DIO_toggle_Pin+0x6>
     690:	45 c0       	rjmp	.+138    	; 0x71c <DIO_toggle_Pin+0x90>
	else
	{
		por='A'+pin/PortSize;
     692:	28 2f       	mov	r18, r24
     694:	26 95       	lsr	r18
     696:	26 95       	lsr	r18
     698:	26 95       	lsr	r18
     69a:	91 e4       	ldi	r25, 0x41	; 65
     69c:	92 0f       	add	r25, r18
		pin=pin%PortSize;
     69e:	87 70       	andi	r24, 0x07	; 7
	}
	
	switch(por)
     6a0:	22 30       	cpi	r18, 0x02	; 2
     6a2:	11 f1       	breq	.+68     	; 0x6e8 <DIO_toggle_Pin+0x5c>
     6a4:	94 34       	cpi	r25, 0x44	; 68
     6a6:	68 f5       	brcc	.+90     	; 0x702 <DIO_toggle_Pin+0x76>
     6a8:	91 34       	cpi	r25, 0x41	; 65
     6aa:	89 f0       	breq	.+34     	; 0x6ce <DIO_toggle_Pin+0x42>
     6ac:	92 34       	cpi	r25, 0x42	; 66
     6ae:	69 f4       	brne	.+26     	; 0x6ca <DIO_toggle_Pin+0x3e>
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
     6b0:	98 b3       	in	r25, 0x18	; 24
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_toggle_Pin+0x30>
     6b8:	22 0f       	add	r18, r18
     6ba:	33 1f       	adc	r19, r19
     6bc:	8a 95       	dec	r24
     6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_toggle_Pin+0x2c>
     6c0:	89 2f       	mov	r24, r25
     6c2:	82 27       	eor	r24, r18
     6c4:	88 bb       	out	0x18, r24	; 24
		default :
		return DIO_ERROR_NOK;
		break;
		
	}
	return DIO_ERROR_OK;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
			 break;
     6c8:	08 95       	ret
	switch(por)
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	08 95       	ret
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
     6ce:	9b b3       	in	r25, 0x1b	; 27
     6d0:	21 e0       	ldi	r18, 0x01	; 1
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_toggle_Pin+0x4e>
     6d6:	22 0f       	add	r18, r18
     6d8:	33 1f       	adc	r19, r19
     6da:	8a 95       	dec	r24
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_toggle_Pin+0x4a>
     6de:	89 2f       	mov	r24, r25
     6e0:	82 27       	eor	r24, r18
     6e2:	8b bb       	out	0x1b, r24	; 27
	return DIO_ERROR_OK;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
			 break;
     6e6:	08 95       	ret
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
     6e8:	95 b3       	in	r25, 0x15	; 21
     6ea:	21 e0       	ldi	r18, 0x01	; 1
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <DIO_toggle_Pin+0x68>
     6f0:	22 0f       	add	r18, r18
     6f2:	33 1f       	adc	r19, r19
     6f4:	8a 95       	dec	r24
     6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <DIO_toggle_Pin+0x64>
     6f8:	89 2f       	mov	r24, r25
     6fa:	82 27       	eor	r24, r18
     6fc:	85 bb       	out	0x15, r24	; 21
	return DIO_ERROR_OK;
     6fe:	80 e0       	ldi	r24, 0x00	; 0
			 break;
     700:	08 95       	ret
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
     702:	92 b3       	in	r25, 0x12	; 18
     704:	21 e0       	ldi	r18, 0x01	; 1
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_toggle_Pin+0x82>
     70a:	22 0f       	add	r18, r18
     70c:	33 1f       	adc	r19, r19
     70e:	8a 95       	dec	r24
     710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_toggle_Pin+0x7e>
     712:	89 2f       	mov	r24, r25
     714:	82 27       	eor	r24, r18
     716:	82 bb       	out	0x12, r24	; 18
	return DIO_ERROR_OK;
     718:	80 e0       	ldi	r24, 0x00	; 0
			 break;
     71a:	08 95       	ret
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     71c:	81 e0       	ldi	r24, 0x01	; 1
}
     71e:	08 95       	ret

00000720 <__vector_13>:
#endif

/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/

void __vector_13(void)
{
     720:	1f 92       	push	r1
     722:	0f 92       	push	r0
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	0f 92       	push	r0
     728:	11 24       	eor	r1, r1
     72a:	2f 93       	push	r18
     72c:	3f 93       	push	r19
     72e:	4f 93       	push	r20
     730:	5f 93       	push	r21
     732:	6f 93       	push	r22
     734:	7f 93       	push	r23
     736:	8f 93       	push	r24
     738:	9f 93       	push	r25
     73a:	af 93       	push	r26
     73c:	bf 93       	push	r27
     73e:	ef 93       	push	r30
     740:	ff 93       	push	r31

	gu8_Uart_rec_char_counter++;
    sgu8_UART_REC_BYTE=UART_DATA_REGISTER;
	#elif UART_ISR_WITH_FLAG==CALLBACK

	if(gPntrToFunc_UART_RX_ISR==NullPointer)
     742:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <gPntrToFunc_UART_RX_ISR>
     746:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <gPntrToFunc_UART_RX_ISR+0x1>
     74a:	89 2b       	or	r24, r25
     74c:	b1 f0       	breq	.+44     	; 0x77a <__vector_13+0x5a>
	    DIO_INIT_Pin(8,1);
		DIO_Write_Pin(8,1);  
	}
    else
	{
		gPntrToFunc_UART_RX_ISR();
     74e:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <gPntrToFunc_UART_RX_ISR>
     752:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <gPntrToFunc_UART_RX_ISR+0x1>
     756:	09 95       	icall
	}
	#endif
	
    /*DIO_toggle_Pin(0);*/
}
     758:	ff 91       	pop	r31
     75a:	ef 91       	pop	r30
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	7f 91       	pop	r23
     766:	6f 91       	pop	r22
     768:	5f 91       	pop	r21
     76a:	4f 91       	pop	r20
     76c:	3f 91       	pop	r19
     76e:	2f 91       	pop	r18
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti
	    DIO_INIT_Pin(8,1);
     77a:	61 e0       	ldi	r22, 0x01	; 1
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	88 e0       	ldi	r24, 0x08	; 8
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_INIT_Pin>
		DIO_Write_Pin(8,1);  
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	88 e0       	ldi	r24, 0x08	; 8
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_Write_Pin>
     792:	e2 cf       	rjmp	.-60     	; 0x758 <__vector_13+0x38>

00000794 <__vector_15>:

void __vector_15(void)
{
     794:	1f 92       	push	r1
     796:	0f 92       	push	r0
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	0f 92       	push	r0
     79c:	11 24       	eor	r1, r1
     79e:	2f 93       	push	r18
     7a0:	3f 93       	push	r19
     7a2:	4f 93       	push	r20
     7a4:	5f 93       	push	r21
     7a6:	6f 93       	push	r22
     7a8:	7f 93       	push	r23
     7aa:	8f 93       	push	r24
     7ac:	9f 93       	push	r25
     7ae:	af 93       	push	r26
     7b0:	bf 93       	push	r27
     7b2:	ef 93       	push	r30
     7b4:	ff 93       	push	r31

	gu8_Uart_send_char_counter++;

	#elif (UART_ISR_WITH_FLAG==CALLBACK)
		
	if(gPntrToFunc_UART_TX_ISR==NullPointer){} 
     7b6:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <gPntrToFunc_UART_TX_ISR>
     7ba:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <gPntrToFunc_UART_TX_ISR+0x1>
     7be:	89 2b       	or	r24, r25
     7c0:	79 f0       	breq	.+30     	; 0x7e0 <__vector_15+0x4c>
    else
	{
        DIO_INIT_Pin(9,1);
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	89 e0       	ldi	r24, 0x09	; 9
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_INIT_Pin>
        DIO_toggle_Pin(9);
     7ce:	89 e0       	ldi	r24, 0x09	; 9
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 46 03 	call	0x68c	; 0x68c <DIO_toggle_Pin>
		gPntrToFunc_UART_TX_ISR();
     7d6:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <gPntrToFunc_UART_TX_ISR>
     7da:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <gPntrToFunc_UART_TX_ISR+0x1>
     7de:	09 95       	icall
	}

	#endif

	/*DIO_toggle_Pin(1);*/
}
     7e0:	ff 91       	pop	r31
     7e2:	ef 91       	pop	r30
     7e4:	bf 91       	pop	r27
     7e6:	af 91       	pop	r26
     7e8:	9f 91       	pop	r25
     7ea:	8f 91       	pop	r24
     7ec:	7f 91       	pop	r23
     7ee:	6f 91       	pop	r22
     7f0:	5f 91       	pop	r21
     7f2:	4f 91       	pop	r20
     7f4:	3f 91       	pop	r19
     7f6:	2f 91       	pop	r18
     7f8:	0f 90       	pop	r0
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	0f 90       	pop	r0
     7fe:	1f 90       	pop	r1
     800:	18 95       	reti

00000802 <UART_Init>:
 * Input     : (char_t* pchar_index)It takes pointer to char
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/

UART_Error_t UART_Init(const UART_Confg_Stuct_t* pstr_Config_UART)
{
     802:	e8 2f       	mov	r30, r24
     804:	f9 2f       	mov	r31, r25

    if(pstr_Config_UART!=NullPointer)
     806:	30 97       	sbiw	r30, 0x00	; 0
     808:	09 f4       	brne	.+2      	; 0x80c <UART_Init+0xa>
     80a:	68 c0       	rjmp	.+208    	; 0x8dc <__stack+0x7d>
	{
		/**Set baud rate**/
		UART_BAUD_RATE_REG_HIGH = (uint8_t)((pstr_Config_UART->BaudRate)>>8);
     80c:	10 bc       	out	0x20, r1	; 32
		UART_BAUD_RATE_REG_LOW =  (uint8_t) (pstr_Config_UART->BaudRate);
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	89 b9       	out	0x09, r24	; 9
		/**Enable receiver and transmitter**/

		if(pstr_Config_UART->Trasmit==UART_trasmit_Enable)
     812:	80 81       	ld	r24, Z
     814:	8d 30       	cpi	r24, 0x0D	; 13
     816:	11 f1       	breq	.+68     	; 0x85c <UART_Init+0x5a>
			SET_BIT(UART_CNTRL_STATUS_REG_B,UART_transimter_EN_BIT);
			
		}
		else
		{
		    sgu8_UART_Transimter_enable=UART_trasmit_Disable;
     818:	8f e0       	ldi	r24, 0x0F	; 15
     81a:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgu8_UART_Transimter_enable>
		}
		if(pstr_Config_UART->Reciever==UART_Receive_Enable)
     81e:	81 81       	ldd	r24, Z+1	; 0x01
     820:	8e 30       	cpi	r24, 0x0E	; 14
     822:	01 f1       	breq	.+64     	; 0x864 <__stack+0x5>
			SET_BIT(UART_CNTRL_STATUS_REG_B,UART_Reciever_EN_BIT);
			
		}	
		else
		{
			sgu8_UART_Receiver_enable=UART_Receive_Disable;
     824:	80 e1       	ldi	r24, 0x10	; 16
     826:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <sgu8_UART_Receiver_enable>
		}		
		/*** Check for parity ***/
		if(pstr_Config_UART->Parity==UART_Parity_Disabled)
     82a:	83 81       	ldd	r24, Z+3	; 0x03
     82c:	81 11       	cpse	r24, r1
     82e:	1e c0       	rjmp	.+60     	; 0x86c <__stack+0xd>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Parity_Bit_1)|(0<<UART_Parity_Bit_0);
     830:	80 b5       	in	r24, 0x20	; 32
     832:	80 bd       	out	0x20, r24	; 32
		}
		else
		{
		}
		/*** Set frame format: Stop bit***/
		if(pstr_Config_UART->Parity==UART_two_Stop_bit)
     834:	83 81       	ldd	r24, Z+3	; 0x03
     836:	84 30       	cpi	r24, 0x04	; 4
     838:	29 f1       	breq	.+74     	; 0x884 <__stack+0x25>
		{
			UART_CNTRL_STATUS_REG_C|=(1<<UART_STOP_setting_Bit);				
		}
		else if(pstr_Config_UART->Parity==UART_One_Stop_bit)
     83a:	83 30       	cpi	r24, 0x03	; 3
     83c:	39 f1       	breq	.+78     	; 0x88c <__stack+0x2d>
		}
		else
		{
		}
		/* Set frame format:Data_size */
		if(pstr_Config_UART->Data_size==UART_Frame_5_bit_)
     83e:	85 81       	ldd	r24, Z+5	; 0x05
     840:	85 30       	cpi	r24, 0x05	; 5
     842:	39 f1       	breq	.+78     	; 0x892 <__stack+0x33>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(0<<UART_Bit_Data_Size_bit_1)|(0<<UART_Bit_Data_Size_bit_0);
		}
		else if(pstr_Config_UART->Data_size==UART_Frame_6_bit_)
     844:	86 30       	cpi	r24, 0x06	; 6
     846:	71 f1       	breq	.+92     	; 0x8a4 <__stack+0x45>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(0<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);
		}
		else if(pstr_Config_UART->Data_size==UART_Frame_7_bit_)
     848:	87 30       	cpi	r24, 0x07	; 7
     84a:	81 f1       	breq	.+96     	; 0x8ac <__stack+0x4d>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(0<<UART_Bit_Data_Size_bit_0);
		}			
		else if(pstr_Config_UART->Data_size==UART_Frame_8_bit_)
     84c:	88 30       	cpi	r24, 0x08	; 8
     84e:	91 f1       	breq	.+100    	; 0x8b4 <__stack+0x55>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);			
		}	
		else if(pstr_Config_UART->Data_size==UART_Frame_9_bit_)
     850:	89 30       	cpi	r24, 0x09	; 9
     852:	09 f5       	brne	.+66     	; 0x896 <__stack+0x37>
		{
			UART_CNTRL_STATUS_REG_C|=(1<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);					
     854:	80 b5       	in	r24, 0x20	; 32
     856:	86 60       	ori	r24, 0x06	; 6
     858:	80 bd       	out	0x20, r24	; 32
     85a:	1d c0       	rjmp	.+58     	; 0x896 <__stack+0x37>
		    sgu8_UART_Transimter_enable=UART_trasmit_Enable;
     85c:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgu8_UART_Transimter_enable>
			SET_BIT(UART_CNTRL_STATUS_REG_B,UART_transimter_EN_BIT);
     860:	53 9a       	sbi	0x0a, 3	; 10
     862:	dd cf       	rjmp	.-70     	; 0x81e <UART_Init+0x1c>
			sgu8_UART_Receiver_enable=UART_Receive_Enable;
     864:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <sgu8_UART_Receiver_enable>
			SET_BIT(UART_CNTRL_STATUS_REG_B,UART_Reciever_EN_BIT);
     868:	54 9a       	sbi	0x0a, 4	; 10
     86a:	df cf       	rjmp	.-66     	; 0x82a <UART_Init+0x28>
		else if(pstr_Config_UART->Parity==UART_Parity_Even)
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	31 f0       	breq	.+12     	; 0x87c <__stack+0x1d>
		else if(pstr_Config_UART->Parity==UART_Parity_Odd)
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	01 f7       	brne	.-64     	; 0x834 <UART_Init+0x32>
			UART_CNTRL_STATUS_REG_C|=(1<<UART_Parity_Bit_1)|(1<<UART_Parity_Bit_0);				
     874:	80 b5       	in	r24, 0x20	; 32
     876:	80 63       	ori	r24, 0x30	; 48
     878:	80 bd       	out	0x20, r24	; 32
     87a:	dc cf       	rjmp	.-72     	; 0x834 <UART_Init+0x32>
			UART_CNTRL_STATUS_REG_C|=(1<<UART_Parity_Bit_1)|(0<<UART_Parity_Bit_0);			
     87c:	80 b5       	in	r24, 0x20	; 32
     87e:	80 62       	ori	r24, 0x20	; 32
     880:	80 bd       	out	0x20, r24	; 32
     882:	d8 cf       	rjmp	.-80     	; 0x834 <UART_Init+0x32>
			UART_CNTRL_STATUS_REG_C|=(1<<UART_STOP_setting_Bit);				
     884:	80 b5       	in	r24, 0x20	; 32
     886:	88 60       	ori	r24, 0x08	; 8
     888:	80 bd       	out	0x20, r24	; 32
     88a:	d9 cf       	rjmp	.-78     	; 0x83e <UART_Init+0x3c>
			UART_CNTRL_STATUS_REG_C|=(0<<UART_STOP_setting_Bit);
     88c:	80 b5       	in	r24, 0x20	; 32
     88e:	80 bd       	out	0x20, r24	; 32
     890:	d6 cf       	rjmp	.-84     	; 0x83e <UART_Init+0x3c>
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(0<<UART_Bit_Data_Size_bit_1)|(0<<UART_Bit_Data_Size_bit_0);
     892:	80 b5       	in	r24, 0x20	; 32
     894:	80 bd       	out	0x20, r24	; 32
		}	
	    else
		{
		}
		/**Check whether it is interrupt or polling mode**/
		if(pstr_Config_UART->InterruptMode==UART_Interrupt_mode_enable)
     896:	86 81       	ldd	r24, Z+6	; 0x06
     898:	8a 30       	cpi	r24, 0x0A	; 10
     89a:	81 f0       	breq	.+32     	; 0x8bc <__stack+0x5d>
			{
			}
		}
		else
		{
			sgu8_UART_Execution_Mode=UART_Polling_mode_enable;			
     89c:	8b e0       	ldi	r24, 0x0B	; 11
     89e:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <sgu8_UART_Execution_Mode>
     8a2:	08 95       	ret
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(0<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);
     8a4:	80 b5       	in	r24, 0x20	; 32
     8a6:	82 60       	ori	r24, 0x02	; 2
     8a8:	80 bd       	out	0x20, r24	; 32
     8aa:	f5 cf       	rjmp	.-22     	; 0x896 <__stack+0x37>
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(0<<UART_Bit_Data_Size_bit_0);
     8ac:	80 b5       	in	r24, 0x20	; 32
     8ae:	84 60       	ori	r24, 0x04	; 4
     8b0:	80 bd       	out	0x20, r24	; 32
     8b2:	f1 cf       	rjmp	.-30     	; 0x896 <__stack+0x37>
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);			
     8b4:	80 b5       	in	r24, 0x20	; 32
     8b6:	86 60       	ori	r24, 0x06	; 6
     8b8:	80 bd       	out	0x20, r24	; 32
     8ba:	ed cf       	rjmp	.-38     	; 0x896 <__stack+0x37>
			sgu8_UART_Execution_Mode=UART_Interrupt_mode_enable;
     8bc:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <sgu8_UART_Execution_Mode>
			EnableGeneralInterrupt();
     8c0:	8f b7       	in	r24, 0x3f	; 63
     8c2:	80 68       	ori	r24, 0x80	; 128
     8c4:	8f bf       	out	0x3f, r24	; 63
		    if(pstr_Config_UART->Reciever==UART_Receive_Enable)
     8c6:	81 81       	ldd	r24, Z+1	; 0x01
     8c8:	8e 30       	cpi	r24, 0x0E	; 14
     8ca:	21 f0       	breq	.+8      	; 0x8d4 <__stack+0x75>
		    if(pstr_Config_UART->Trasmit==UART_trasmit_Enable)
     8cc:	80 81       	ld	r24, Z
     8ce:	8d 30       	cpi	r24, 0x0D	; 13
     8d0:	19 f0       	breq	.+6      	; 0x8d8 <__stack+0x79>
	else 
	{
		return UART_ERROR_NULL_POINTER;
	}

}
     8d2:	08 95       	ret
		    	UART_RXC_Enable_INT();
     8d4:	57 9a       	sbi	0x0a, 7	; 10
     8d6:	fa cf       	rjmp	.-12     	; 0x8cc <__stack+0x6d>
				UART_TXC_Enable_INT();
     8d8:	56 9a       	sbi	0x0a, 6	; 10
     8da:	08 95       	ret
		return UART_ERROR_NULL_POINTER;
     8dc:	8c e0       	ldi	r24, 0x0C	; 12
     8de:	08 95       	ret

000008e0 <UART_SendByte>:
/*Description: It transmites character through UART
 * Input     : (char_t pchar_index)It takes  char
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
UART_Error_t UART_SendByte(uint8_t u8_Byte_UART)
{
     8e0:	cf 93       	push	r28
     8e2:	c8 2f       	mov	r28, r24
    if(sgu8_UART_Transimter_enable==UART_trasmit_Enable)
     8e4:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <sgu8_UART_Transimter_enable>
     8e8:	8d 30       	cpi	r24, 0x0D	; 13
     8ea:	11 f0       	breq	.+4      	; 0x8f0 <UART_SendByte+0x10>
	}
	else
	{
	}
	
}
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret
		DIO_INIT_Pin(3,1);
     8f0:	61 e0       	ldi	r22, 0x01	; 1
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_INIT_Pin>
		DIO_Write_Pin(3,1);
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	83 e0       	ldi	r24, 0x03	; 3
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_Write_Pin>
		if(sgu8_UART_Execution_Mode==UART_Polling_mode_enable)
     908:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <sgu8_UART_Execution_Mode>
     90c:	8b 30       	cpi	r24, 0x0B	; 11
     90e:	21 f0       	breq	.+8      	; 0x918 <UART_SendByte+0x38>
		else if(sgu8_UART_Execution_Mode==UART_Interrupt_mode_enable)
     910:	8a 30       	cpi	r24, 0x0A	; 10
     912:	61 f7       	brne	.-40     	; 0x8ec <UART_SendByte+0xc>
            UART_DATA_REGISTER=u8_Byte_UART;
     914:	cc b9       	out	0x0c, r28	; 12
     916:	ea cf       	rjmp	.-44     	; 0x8ec <UART_SendByte+0xc>
			while ( !( UART_CNTRL_STATUS_REG_A & (1<<UART_DATA_REGISTER_EMPETY_FLAG)) );
     918:	5d 9b       	sbis	0x0b, 5	; 11
     91a:	fe cf       	rjmp	.-4      	; 0x918 <UART_SendByte+0x38>
            UART_DATA_REGISTER=u8_Byte_UART;
     91c:	cc b9       	out	0x0c, r28	; 12
     91e:	e6 cf       	rjmp	.-52     	; 0x8ec <UART_SendByte+0xc>

00000920 <Timer_Init>:


/*- APIs IMPLEMENTATION -----------------------------------*/
	
uint8_t Timer_Init(StrTimerConfiguration_t* ps_Copy_Measurement_ECU_TIMER_Init_Config)
{
     920:	e8 2f       	mov	r30, r24
     922:	f9 2f       	mov	r31, r25
	
	if(NullPointer!=ps_Copy_Measurement_ECU_TIMER_Init_Config)
     924:	30 97       	sbiw	r30, 0x00	; 0
     926:	09 f4       	brne	.+2      	; 0x92a <Timer_Init+0xa>
     928:	3f c0       	rjmp	.+126    	; 0x9a8 <Timer_Init+0x88>
	{
		
		/*To Check whether the structure values that have been passed is in the scope of configuration nor not*/
		if(sgau8_TIMERChannel[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]==Enable)            return TIMER_ERROR_NOK;	
     92a:	90 81       	ld	r25, Z
     92c:	29 2f       	mov	r18, r25
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	d9 01       	movw	r26, r18
     932:	ae 56       	subi	r26, 0x6E	; 110
     934:	bf 4f       	sbci	r27, 0xFF	; 255
     936:	8c 91       	ld	r24, X
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	f1 f0       	breq	.+60     	; 0x978 <Timer_Init+0x58>
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel >TIMER2  )                              return TIMER_ERROR_NOK;	
     93c:	93 30       	cpi	r25, 0x03	; 3
     93e:	b0 f5       	brcc	.+108    	; 0x9ac <Timer_Init+0x8c>
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Mode>TIMER_MODE_MILIE )                         return TIMER_ERROR_NOK;
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	83 30       	cpi	r24, 0x03	; 3
     944:	a8 f5       	brcc	.+106    	; 0x9b0 <Timer_Init+0x90>
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Interrupt_Mode>INTERRUPT)                             return TIMER_ERROR_NOK;
     946:	43 81       	ldd	r20, Z+3	; 0x03
     948:	42 30       	cpi	r20, 0x02	; 2
     94a:	a0 f5       	brcc	.+104    	; 0x9b4 <Timer_Init+0x94>
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc >  Max_Prescaler_possiblities   )           return TIMER_ERROR_NOK;
     94c:	51 81       	ldd	r21, Z+1	; 0x01
     94e:	58 30       	cpi	r21, 0x08	; 8
     950:	98 f5       	brcc	.+102    	; 0x9b8 <Timer_Init+0x98>
	
		/*Adjust the configurations*/
		
		sgau8_TIMERChannel[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]=Enable;		
     952:	d9 01       	movw	r26, r18
     954:	ae 56       	subi	r26, 0x6E	; 110
     956:	bf 4f       	sbci	r27, 0xFF	; 255
     958:	61 e0       	ldi	r22, 0x01	; 1
     95a:	6c 93       	st	X, r22
		sgau8_TIMERMode[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Mode;
     95c:	d9 01       	movw	r26, r18
     95e:	ab 56       	subi	r26, 0x6B	; 107
     960:	bf 4f       	sbci	r27, 0xFF	; 255
     962:	8c 93       	st	X, r24
		sgau8_Interrupt_Mode[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]=ps_Copy_Measurement_ECU_TIMER_Init_Config->Interrupt_Mode;
     964:	28 56       	subi	r18, 0x68	; 104
     966:	3f 4f       	sbci	r19, 0xFF	; 255
     968:	d9 01       	movw	r26, r18
     96a:	4c 93       	st	X, r20
		sgau8_TIMERPrescaler[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc;
		
    
		
		/*In the mode of counter mode the prescaler is entered by the user */
		if((ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Mode)==COUNTER_MODE)
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	29 f0       	breq	.+10     	; 0x97a <Timer_Init+0x5a>
			 * the delay is in micro or milie
			 *************************************************************************/
		}

		/*Check IF mode of Interrupt is enabled*/
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Interrupt_Mode==INTERRUPT)
     970:	83 81       	ldd	r24, Z+3	; 0x03
     972:	81 30       	cpi	r24, 0x01	; 1
     974:	a1 f0       	breq	.+40     	; 0x99e <Timer_Init+0x7e>
	}
	else
	{
		
	}
	return TIMER_ERROR_OK;
     976:	80 e0       	ldi	r24, 0x00	; 0
}
     978:	08 95       	ret
			switch(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel)
     97a:	91 30       	cpi	r25, 0x01	; 1
     97c:	41 f0       	breq	.+16     	; 0x98e <Timer_Init+0x6e>
     97e:	92 30       	cpi	r25, 0x02	; 2
     980:	51 f0       	breq	.+20     	; 0x996 <Timer_Init+0x76>
     982:	91 11       	cpse	r25, r1
     984:	f9 cf       	rjmp	.-14     	; 0x978 <Timer_Init+0x58>
					TIMER0_CNTRL_REG  |=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc;
     986:	83 b7       	in	r24, 0x33	; 51
     988:	58 2b       	or	r21, r24
     98a:	53 bf       	out	0x33, r21	; 51
				break;
     98c:	f1 cf       	rjmp	.-30     	; 0x970 <Timer_Init+0x50>
					TIMER1_CNTRL_REG_B|=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc;
     98e:	8e b5       	in	r24, 0x2e	; 46
     990:	58 2b       	or	r21, r24
     992:	5e bd       	out	0x2e, r21	; 46
				break;
     994:	ed cf       	rjmp	.-38     	; 0x970 <Timer_Init+0x50>
				     TIMER2_CNTRL_REG|=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc;
     996:	85 b5       	in	r24, 0x25	; 37
     998:	58 2b       	or	r21, r24
     99a:	55 bd       	out	0x25, r21	; 37
				break;
     99c:	e9 cf       	rjmp	.-46     	; 0x970 <Timer_Init+0x50>
				  EnableGeneralInterrupt();
     99e:	8f b7       	in	r24, 0x3f	; 63
     9a0:	80 68       	ori	r24, 0x80	; 128
     9a2:	8f bf       	out	0x3f, r24	; 63
	return TIMER_ERROR_OK;
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	08 95       	ret
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	08 95       	ret
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel >TIMER2  )                              return TIMER_ERROR_NOK;	
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	08 95       	ret
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Mode>TIMER_MODE_MILIE )                         return TIMER_ERROR_NOK;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	08 95       	ret
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Interrupt_Mode>INTERRUPT)                             return TIMER_ERROR_NOK;
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	08 95       	ret
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc >  Max_Prescaler_possiblities   )           return TIMER_ERROR_NOK;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	08 95       	ret

000009bc <Timer_Start>:

uint8_t Timer_Start(uint8_t u8_Copy_TIMER_Start_TIMERChannel,uint32_t u32_Copy_TIMER_Start_tickCounts,PntrToFunc_t PntrToFunc_t_Copy_TIMER_Start_ISR)//with sgau8_Prescaler
{
     9bc:	98 2f       	mov	r25, r24
     9be:	26 2f       	mov	r18, r22
     9c0:	37 2f       	mov	r19, r23
     9c2:	64 2f       	mov	r22, r20
     9c4:	75 2f       	mov	r23, r21
	
	uint16_t u16_Count_TIMER_Start=0;
	
	switch(u8_Copy_TIMER_Start_TIMERChannel)
     9c6:	81 11       	cpse	r24, r1
     9c8:	84 c0       	rjmp	.+264    	; 0xad2 <Timer_Start+0x116>
	{
		case TIMER0:
		{
			TIMER0_CNTRL_REG|=TIMER0_CNTRL_REG_CTC_MODE_VALUE;
     9ca:	83 b7       	in	r24, 0x33	; 51
     9cc:	88 60       	ori	r24, 0x08	; 8
     9ce:	83 bf       	out	0x33, r24	; 51
			/*Check whether it is counter or timer*/
			if(sgau8_TIMERMode[TIMER0]!=COUNTER_MODE)
     9d0:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <sgau8_TIMERMode>
     9d4:	41 30       	cpi	r20, 0x01	; 1
     9d6:	09 f4       	brne	.+2      	; 0x9da <Timer_Start+0x1e>
     9d8:	5f c0       	rjmp	.+190    	; 0xa98 <Timer_Start+0xdc>
			{
				/* Check whether it is time delay in mili or in micro */
				if(sgau8_TIMERMode[TIMER0]==TIMER_MODE_MICRO)
     9da:	41 11       	cpse	r20, r1
     9dc:	2d c0       	rjmp	.+90     	; 0xa38 <Timer_Start+0x7c>
				{ 
						/************************************************************
						 * The prescale divide by 8 and  make count =1 and  the 
						 * counter =255-1 to get overflow every micro
						 ************************************************************/
						TIMER0_CNTRL_REG|=F_CPU_CLOCK_8_TIMER_0;	
     9de:	83 b7       	in	r24, 0x33	; 51
     9e0:	82 60       	ori	r24, 0x02	; 2
     9e2:	83 bf       	out	0x33, r24	; 51
						/*Check whether it is polled or not*/
						if(sgau8_Interrupt_Mode[TIMER0]==POLLING)
     9e4:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <sgau8_Interrupt_Mode>
     9e8:	81 11       	cpse	r24, r1
     9ea:	14 c0       	rjmp	.+40     	; 0xa14 <Timer_Start+0x58>
						{                            
							/*Loop  until it get the time of delay in micro*/
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
     9ec:	21 15       	cp	r18, r1
     9ee:	31 05       	cpc	r19, r1
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <Timer_Start+0x38>
     9f2:	61 c0       	rjmp	.+194    	; 0xab6 <Timer_Start+0xfa>
	uint16_t u16_Count_TIMER_Start=0;
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	40 e0       	ldi	r20, 0x00	; 0
								/************************************************************
								 * The prescale divide by 8 and  make countER =1 to get 
								 * 1 microsecond
								 ************************************************************/
								SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
								TIMER0_COMPARE_Register=1U;
     9f8:	61 e0       	ldi	r22, 0x01	; 1
								SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
     9fa:	98 b7       	in	r25, 0x38	; 56
     9fc:	92 60       	ori	r25, 0x02	; 2
     9fe:	98 bf       	out	0x38, r25	; 56
								TIMER0_COMPARE_Register=1U;
     a00:	6c bf       	out	0x3c, r22	; 60
								/*Loop  until overflow happens*/
								while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT) );
     a02:	08 b6       	in	r0, 0x38	; 56
     a04:	01 fe       	sbrs	r0, 1
     a06:	fd cf       	rjmp	.-6      	; 0xa02 <Timer_Start+0x46>
								u16_Count_TIMER_Start++;
     a08:	4f 5f       	subi	r20, 0xFF	; 255
     a0a:	5f 4f       	sbci	r21, 0xFF	; 255
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
     a0c:	24 17       	cp	r18, r20
     a0e:	35 07       	cpc	r19, r21
     a10:	a1 f7       	brne	.-24     	; 0x9fa <Timer_Start+0x3e>
     a12:	08 95       	ret
							}
							
						}
			
						else if(sgau8_Interrupt_Mode[TIMER0]==INTERRUPT)
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	11 f0       	breq	.+4      	; 0xa1c <Timer_Start+0x60>
		{
			return TIMER_ERROR_NOK;
		}
		break;			
	}
	return TIMER_ERROR_OK;
     a18:	84 2f       	mov	r24, r20
     a1a:	08 95       	ret
						     SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
     a1c:	88 b7       	in	r24, 0x38	; 56
     a1e:	82 60       	ori	r24, 0x02	; 2
     a20:	88 bf       	out	0x38, r24	; 56
							 TIMER0_COMPARE_Register=1U;
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	8c bf       	out	0x3c, r24	; 60
				             Timer_0_OCF_INT_EN();			  
     a26:	89 b7       	in	r24, 0x39	; 57
     a28:	82 60       	ori	r24, 0x02	; 2
     a2a:	89 bf       	out	0x39, r24	; 57
							 sgpfun_TIMER0_CMP_ISR_Function=PntrToFunc_t_Copy_TIMER_Start_ISR;													
     a2c:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     a30:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <sgpfun_TIMER0_CMP_ISR_Function>
	return TIMER_ERROR_OK;
     a34:	84 2f       	mov	r24, r20
     a36:	08 95       	ret
				else if(sgau8_TIMERMode[TIMER0]==TIMER_MODE_MILIE)
     a38:	42 30       	cpi	r20, 0x02	; 2
     a3a:	11 f0       	breq	.+4      	; 0xa40 <Timer_Start+0x84>
	return TIMER_ERROR_OK;
     a3c:	89 2f       	mov	r24, r25
     a3e:	08 95       	ret
						TIMER0_CNTRL_REG|=F_CPU_CLOCK_64_TIMER_0;	
     a40:	83 b7       	in	r24, 0x33	; 51
     a42:	83 60       	ori	r24, 0x03	; 3
     a44:	83 bf       	out	0x33, r24	; 51
						if(sgau8_Interrupt_Mode[TIMER0]==POLLING)
     a46:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <sgau8_Interrupt_Mode>
     a4a:	81 11       	cpse	r24, r1
     a4c:	13 c0       	rjmp	.+38     	; 0xa74 <Timer_Start+0xb8>
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
     a4e:	21 15       	cp	r18, r1
     a50:	31 05       	cpc	r19, r1
     a52:	89 f1       	breq	.+98     	; 0xab6 <Timer_Start+0xfa>
	uint16_t u16_Count_TIMER_Start=0;
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	40 e0       	ldi	r20, 0x00	; 0
								TIMER0_COMPARE_Register=125U;
     a58:	6d e7       	ldi	r22, 0x7D	; 125
								SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
     a5a:	98 b7       	in	r25, 0x38	; 56
     a5c:	92 60       	ori	r25, 0x02	; 2
     a5e:	98 bf       	out	0x38, r25	; 56
								TIMER0_COMPARE_Register=125U;
     a60:	6c bf       	out	0x3c, r22	; 60
								while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT) );
     a62:	08 b6       	in	r0, 0x38	; 56
     a64:	01 fe       	sbrs	r0, 1
     a66:	fd cf       	rjmp	.-6      	; 0xa62 <Timer_Start+0xa6>
								u16_Count_TIMER_Start++;
     a68:	4f 5f       	subi	r20, 0xFF	; 255
     a6a:	5f 4f       	sbci	r21, 0xFF	; 255
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
     a6c:	24 17       	cp	r18, r20
     a6e:	35 07       	cpc	r19, r21
     a70:	a1 f7       	brne	.-24     	; 0xa5a <Timer_Start+0x9e>
     a72:	08 95       	ret
						else if(sgau8_Interrupt_Mode[TIMER0]==INTERRUPT)
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	11 f0       	breq	.+4      	; 0xa7c <Timer_Start+0xc0>
	return TIMER_ERROR_OK;
     a78:	89 2f       	mov	r24, r25
     a7a:	08 95       	ret
						     SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
     a7c:	88 b7       	in	r24, 0x38	; 56
     a7e:	82 60       	ori	r24, 0x02	; 2
     a80:	88 bf       	out	0x38, r24	; 56
							 TIMER0_COMPARE_Register=125U;
     a82:	8d e7       	ldi	r24, 0x7D	; 125
     a84:	8c bf       	out	0x3c, r24	; 60
				             Timer_0_OCF_INT_EN();			  
     a86:	89 b7       	in	r24, 0x39	; 57
     a88:	82 60       	ori	r24, 0x02	; 2
     a8a:	89 bf       	out	0x39, r24	; 57
							 sgpfun_TIMER0_CMP_ISR_Function=PntrToFunc_t_Copy_TIMER_Start_ISR;												
     a8c:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     a90:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <sgpfun_TIMER0_CMP_ISR_Function>
	return TIMER_ERROR_OK;
     a94:	89 2f       	mov	r24, r25
     a96:	08 95       	ret
				if(sgau8_Interrupt_Mode[TIMER0]==POLLING)
     a98:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <sgau8_Interrupt_Mode>
     a9c:	81 11       	cpse	r24, r1
     a9e:	08 c0       	rjmp	.+16     	; 0xab0 <Timer_Start+0xf4>
                    SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);
     aa0:	98 b7       	in	r25, 0x38	; 56
     aa2:	92 60       	ori	r25, 0x02	; 2
     aa4:	98 bf       	out	0x38, r25	; 56
				    TIMER0_COMPARE_Register=u32_Copy_TIMER_Start_tickCounts;
     aa6:	2c bf       	out	0x3c, r18	; 60
					while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT) );
     aa8:	08 b6       	in	r0, 0x38	; 56
     aaa:	01 fe       	sbrs	r0, 1
     aac:	fd cf       	rjmp	.-6      	; 0xaa8 <Timer_Start+0xec>
     aae:	08 95       	ret
				else if(sgau8_Interrupt_Mode[TIMER0]==INTERRUPT)
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	11 f0       	breq	.+4      	; 0xab8 <Timer_Start+0xfc>
	return TIMER_ERROR_OK;
     ab4:	89 2f       	mov	r24, r25
}
     ab6:	08 95       	ret
					 SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
     ab8:	88 b7       	in	r24, 0x38	; 56
     aba:	82 60       	ori	r24, 0x02	; 2
     abc:	88 bf       	out	0x38, r24	; 56
					 TIMER0_COMPARE_Register=u32_Copy_TIMER_Start_tickCounts;
     abe:	2c bf       	out	0x3c, r18	; 60
					 Timer_0_OCF_INT_EN();			  
     ac0:	89 b7       	in	r24, 0x39	; 57
     ac2:	82 60       	ori	r24, 0x02	; 2
     ac4:	89 bf       	out	0x39, r24	; 57
					 sgpfun_TIMER0_CMP_ISR_Function=PntrToFunc_t_Copy_TIMER_Start_ISR;						
     ac6:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     aca:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <sgpfun_TIMER0_CMP_ISR_Function>
	return TIMER_ERROR_OK;
     ace:	89 2f       	mov	r24, r25
     ad0:	08 95       	ret
			return TIMER_ERROR_NOK;
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	08 95       	ret

00000ad6 <__vector_10>:
	
	return TIMER_ERROR_OK;
}

Timer_ISR(TIMER0_COMP_VECTOR)
{
     ad6:	1f 92       	push	r1
     ad8:	0f 92       	push	r0
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	0f 92       	push	r0
     ade:	11 24       	eor	r1, r1
     ae0:	2f 93       	push	r18
     ae2:	3f 93       	push	r19
     ae4:	4f 93       	push	r20
     ae6:	5f 93       	push	r21
     ae8:	6f 93       	push	r22
     aea:	7f 93       	push	r23
     aec:	8f 93       	push	r24
     aee:	9f 93       	push	r25
     af0:	af 93       	push	r26
     af2:	bf 93       	push	r27
     af4:	ef 93       	push	r30
     af6:	ff 93       	push	r31
    sgpfun_TIMER0_CMP_ISR_Function();
     af8:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <sgpfun_TIMER0_CMP_ISR_Function>
     afc:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     b00:	09 95       	icall
}
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	bf 91       	pop	r27
     b08:	af 91       	pop	r26
     b0a:	9f 91       	pop	r25
     b0c:	8f 91       	pop	r24
     b0e:	7f 91       	pop	r23
     b10:	6f 91       	pop	r22
     b12:	5f 91       	pop	r21
     b14:	4f 91       	pop	r20
     b16:	3f 91       	pop	r19
     b18:	2f 91       	pop	r18
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <__vector_7>:
Timer_ISR(TIMER1_COMPA_VECTOR)
{
     b24:	1f 92       	push	r1
     b26:	0f 92       	push	r0
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	2f 93       	push	r18
     b30:	3f 93       	push	r19
     b32:	4f 93       	push	r20
     b34:	5f 93       	push	r21
     b36:	6f 93       	push	r22
     b38:	7f 93       	push	r23
     b3a:	8f 93       	push	r24
     b3c:	9f 93       	push	r25
     b3e:	af 93       	push	r26
     b40:	bf 93       	push	r27
     b42:	ef 93       	push	r30
     b44:	ff 93       	push	r31

	sgpfun_TIMER0_CMPA_ISR_Function();
     b46:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <sgpfun_TIMER0_CMPA_ISR_Function>
     b4a:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <sgpfun_TIMER0_CMPA_ISR_Function+0x1>
     b4e:	09 95       	icall
}
     b50:	ff 91       	pop	r31
     b52:	ef 91       	pop	r30
     b54:	bf 91       	pop	r27
     b56:	af 91       	pop	r26
     b58:	9f 91       	pop	r25
     b5a:	8f 91       	pop	r24
     b5c:	7f 91       	pop	r23
     b5e:	6f 91       	pop	r22
     b60:	5f 91       	pop	r21
     b62:	4f 91       	pop	r20
     b64:	3f 91       	pop	r19
     b66:	2f 91       	pop	r18
     b68:	0f 90       	pop	r0
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	0f 90       	pop	r0
     b6e:	1f 90       	pop	r1
     b70:	18 95       	reti

00000b72 <__vector_8>:

Timer_ISR(TIMER1_COMPB_VECTOR)
{
     b72:	1f 92       	push	r1
     b74:	0f 92       	push	r0
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	0f 92       	push	r0
     b7a:	11 24       	eor	r1, r1
     b7c:	2f 93       	push	r18
     b7e:	3f 93       	push	r19
     b80:	4f 93       	push	r20
     b82:	5f 93       	push	r21
     b84:	6f 93       	push	r22
     b86:	7f 93       	push	r23
     b88:	8f 93       	push	r24
     b8a:	9f 93       	push	r25
     b8c:	af 93       	push	r26
     b8e:	bf 93       	push	r27
     b90:	ef 93       	push	r30
     b92:	ff 93       	push	r31
	sgpfun_TIMER0_CMPB_ISR_Function();
     b94:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <sgpfun_TIMER0_CMPB_ISR_Function>
     b98:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <sgpfun_TIMER0_CMPB_ISR_Function+0x1>
     b9c:	09 95       	icall
}
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	bf 91       	pop	r27
     ba4:	af 91       	pop	r26
     ba6:	9f 91       	pop	r25
     ba8:	8f 91       	pop	r24
     baa:	7f 91       	pop	r23
     bac:	6f 91       	pop	r22
     bae:	5f 91       	pop	r21
     bb0:	4f 91       	pop	r20
     bb2:	3f 91       	pop	r19
     bb4:	2f 91       	pop	r18
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	0f 90       	pop	r0
     bbc:	1f 90       	pop	r1
     bbe:	18 95       	reti

00000bc0 <__vector_4>:
Timer_ISR(TIMER2_COMP_VECTOR)
{
     bc0:	1f 92       	push	r1
     bc2:	0f 92       	push	r0
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	0f 92       	push	r0
     bc8:	11 24       	eor	r1, r1
     bca:	2f 93       	push	r18
     bcc:	3f 93       	push	r19
     bce:	4f 93       	push	r20
     bd0:	5f 93       	push	r21
     bd2:	6f 93       	push	r22
     bd4:	7f 93       	push	r23
     bd6:	8f 93       	push	r24
     bd8:	9f 93       	push	r25
     bda:	af 93       	push	r26
     bdc:	bf 93       	push	r27
     bde:	ef 93       	push	r30
     be0:	ff 93       	push	r31
	sgpfun_TIMER2_CMP_ISR_Function();
     be2:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <sgpfun_TIMER2_CMP_ISR_Function>
     be6:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <sgpfun_TIMER2_CMP_ISR_Function+0x1>
     bea:	09 95       	icall
     bec:	ff 91       	pop	r31
     bee:	ef 91       	pop	r30
     bf0:	bf 91       	pop	r27
     bf2:	af 91       	pop	r26
     bf4:	9f 91       	pop	r25
     bf6:	8f 91       	pop	r24
     bf8:	7f 91       	pop	r23
     bfa:	6f 91       	pop	r22
     bfc:	5f 91       	pop	r21
     bfe:	4f 91       	pop	r20
     c00:	3f 91       	pop	r19
     c02:	2f 91       	pop	r18
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <SPI_Init>:
Error_Type_t SPI_SETCALL_BACK(PntrToFunc_t Copy_pfunc_callbackfunc_ISR)
{
	PFUNC_SPI_FUNC_ISR=Copy_pfunc_callbackfunc_ISR;
}
Error_Type_t SPI_Init (str_Configuration_SPI_t * str_Confg)
{
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	c8 2f       	mov	r28, r24
     c14:	d9 2f       	mov	r29, r25
	Error_Type_t au8_error= 0;
	DIO_INIT_Pin(B4,OUTPUT);
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	8c e0       	ldi	r24, 0x0C	; 12
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_INIT_Pin>
	DIO_INIT_Pin(B5, OUTPUT);
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	8d e0       	ldi	r24, 0x0D	; 13
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_INIT_Pin>
	DIO_INIT_Pin(B6, INPUT);
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_INIT_Pin>
	DIO_INIT_Pin(B7, OUTPUT);
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	8f e0       	ldi	r24, 0x0F	; 15
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_INIT_Pin>
	if(str_Confg->au8_SPI_Mode==SPI_MODE_MASTER) /*Check If structure Configuration is passing Master_Mood*/
     c46:	98 81       	ld	r25, Y
     c48:	99 23       	and	r25, r25
     c4a:	31 f0       	breq	.+12     	; 0xc58 <SPI_Init+0x4a>
		}

	}
	else
	{
		au8_error=ERROR_INIT_MASTER_MODE_NOT_DEFINED;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
	else if(str_Confg->au8_SPI_Mode==SPI_MODE_SLAVE)
     c4e:	91 30       	cpi	r25, 0x01	; 1
     c50:	69 f1       	breq	.+90     	; 0xcac <SPI_Init+0x9e>
	}
	return au8_error;
}
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret
		SET_BIT(SPCR,SPCR_MSTR);
     c58:	6c 9a       	sbi	0x0d, 4	; 13
		if(str_Confg->au8_prescaler==((SPI_PRESCALER_SPEED_4)||(SPI_PRESCALER_SPEED_16)||(SPI_PRESCALER_SPEED_64) || (SPI_PRESCALER_SPEED_128)))
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	71 f0       	breq	.+28     	; 0xc7c <SPI_Init+0x6e>
		if(str_Confg->au8_SPI_Data_Order==(DATA_ORDER_MSB_FIRST))
     c60:	8c 81       	ldd	r24, Y+4	; 0x04
     c62:	81 11       	cpse	r24, r1
     c64:	15 c0       	rjmp	.+42     	; 0xc90 <SPI_Init+0x82>
			CLR_BIT(SPCR,SPCR_DORD);
     c66:	6d 98       	cbi	0x0d, 5	; 13
		if(str_Confg->au8_Speed_Mode==SPI_SPEED_DOUBLE_MODE)
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	a9 f0       	breq	.+42     	; 0xc98 <SPI_Init+0x8a>
		if(str_Confg->au8_Interrupt_Mode==SPI_INTERRUPT_MODE)
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	81 11       	cpse	r24, r1
     c72:	14 c0       	rjmp	.+40     	; 0xc9c <SPI_Init+0x8e>
			gu8_Interrupt_Mode= SPI_INTERRUPT_MODE;
     c74:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <gu8_Interrupt_Mode>
		SET_BIT(SPCR,SPCR_SPE);
     c78:	6e 9a       	sbi	0x0d, 6	; 13
		return au8_error;
     c7a:	eb cf       	rjmp	.-42     	; 0xc52 <SPI_Init+0x44>
			SPCR &= NORMAL_PRESCALER_MASK;
     c7c:	8d b1       	in	r24, 0x0d	; 13
     c7e:	83 7f       	andi	r24, 0xF3	; 243
     c80:	8d b9       	out	0x0d, r24	; 13
			SPCR |= str_Confg->au8_prescaler;
     c82:	8d b1       	in	r24, 0x0d	; 13
     c84:	29 81       	ldd	r18, Y+1	; 0x01
     c86:	82 2b       	or	r24, r18
     c88:	8d b9       	out	0x0d, r24	; 13
			CLR_BIT(SPCR,SPCR_CPHA);
     c8a:	6a 98       	cbi	0x0d, 2	; 13
			CLR_BIT(SPCR,SPCR_CPOL);
     c8c:	6b 98       	cbi	0x0d, 3	; 13
			au8_error=ERROR_INIT_MASTER_OK;
     c8e:	e8 cf       	rjmp	.-48     	; 0xc60 <SPI_Init+0x52>
		else if(str_Confg->au8_SPI_Data_Order==(DATA_ORDER_LSB_FIRST))
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	51 f7       	brne	.-44     	; 0xc68 <SPI_Init+0x5a>
			SET_BIT(SPCR,SPCR_DORD);
     c94:	6d 9a       	sbi	0x0d, 5	; 13
			au8_error=ERROR_INIT_MASTER_OK;
     c96:	e8 cf       	rjmp	.-48     	; 0xc68 <SPI_Init+0x5a>
			SET_BIT(SPSR,SPSR_SPI2X);
     c98:	70 9a       	sbi	0x0e, 0	; 14
			au8_error=ERROR_INIT_MASTER_OK;
     c9a:	e9 cf       	rjmp	.-46     	; 0xc6e <SPI_Init+0x60>
		else if(str_Confg->au8_Interrupt_Mode==SPI_POLLING_MODE)
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	11 f0       	breq	.+4      	; 0xca4 <SPI_Init+0x96>
			au8_error=ERROR_INIT_INTEERUPT_MODE_NOT_DEFINED;
     ca0:	84 e0       	ldi	r24, 0x04	; 4
     ca2:	ea cf       	rjmp	.-44     	; 0xc78 <SPI_Init+0x6a>
			gu8_Interrupt_Mode= SPI_POLLING_MODE;
     ca4:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <gu8_Interrupt_Mode>
			au8_error=ERROR_INIT_MASTER_OK;
     ca8:	89 2f       	mov	r24, r25
     caa:	e6 cf       	rjmp	.-52     	; 0xc78 <SPI_Init+0x6a>
		DIO_INIT_Pin(B4, INPUT);
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	8c e0       	ldi	r24, 0x0C	; 12
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_INIT_Pin>
		DIO_INIT_Pin(B5, INPUT);
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	8d e0       	ldi	r24, 0x0D	; 13
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_INIT_Pin>
		DIO_INIT_Pin(B6, OUTPUT);
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	8e e0       	ldi	r24, 0x0E	; 14
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_INIT_Pin>
		DIO_INIT_Pin(B7, INPUT);
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	8f e0       	ldi	r24, 0x0F	; 15
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 26 02 	call	0x44c	; 0x44c <DIO_INIT_Pin>
		CLR_BIT(SPCR,SPCR_MSTR); /*ACTIVATE SLAVE MOODE*/
     cdc:	6c 98       	cbi	0x0d, 4	; 13
		if(str_Confg->au8_SPI_Data_Order==DATA_ORDER_MSB_FIRST)
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
     ce0:	81 11       	cpse	r24, r1
     ce2:	11 c0       	rjmp	.+34     	; 0xd06 <SPI_Init+0xf8>
			CLR_BIT(SPCR,SPCR_DORD);
     ce4:	6d 98       	cbi	0x0d, 5	; 13
			SET_BIT(SPCR,SPCR_SPE); /*ENABLE SPI*/
     ce6:	6e 9a       	sbi	0x0d, 6	; 13
			if(str_Confg->au8_Interrupt_Mode==SPI_INTERRUPT_MODE)
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	88 23       	and	r24, r24
     cec:	21 f0       	breq	.+8      	; 0xcf6 <SPI_Init+0xe8>
			else if(str_Confg->au8_Interrupt_Mode==SPI_POLLING_MODE)
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	31 f0       	breq	.+12     	; 0xcfe <SPI_Init+0xf0>
				au8_error=ERROR_INIT_INTEERUPT_MODE_NOT_DEFINED;
     cf2:	84 e0       	ldi	r24, 0x04	; 4
     cf4:	ae cf       	rjmp	.-164    	; 0xc52 <SPI_Init+0x44>
				gu8_Interrupt_Mode=SPI_INTERRUPT_MODE;
     cf6:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <gu8_Interrupt_Mode>
				au8_error=ERROR_INIT_SLAVE_OK;
     cfa:	86 e0       	ldi	r24, 0x06	; 6
     cfc:	aa cf       	rjmp	.-172    	; 0xc52 <SPI_Init+0x44>
				gu8_Interrupt_Mode=SPI_POLLING_MODE;
     cfe:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <gu8_Interrupt_Mode>
				au8_error=ERROR_INIT_SLAVE_OK;
     d02:	86 e0       	ldi	r24, 0x06	; 6
     d04:	a6 cf       	rjmp	.-180    	; 0xc52 <SPI_Init+0x44>
		else if(str_Confg->au8_SPI_Data_Order==DATA_ORDER_LSB_FIRST)
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	11 f0       	breq	.+4      	; 0xd0e <SPI_Init+0x100>
			au8_error=ERROR_INIT_DATA_ORDER_NOT_DEFINED;
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	a2 cf       	rjmp	.-188    	; 0xc52 <SPI_Init+0x44>
			SET_BIT(SPCR,SPCR_DORD);
     d0e:	6d 9a       	sbi	0x0d, 5	; 13
			SET_BIT(SPCR,SPCR_SPE); /*ENABLE SPI*/
     d10:	6e 9a       	sbi	0x0d, 6	; 13
			if(str_Confg->au8_Interrupt_Mode==SPI_INTERRUPT_MODE)
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	88 23       	and	r24, r24
     d16:	21 f0       	breq	.+8      	; 0xd20 <SPI_Init+0x112>
			else if(str_Confg->au8_Interrupt_Mode==SPI_POLLING_MODE)
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	31 f0       	breq	.+12     	; 0xd28 <SPI_Init+0x11a>
				au8_error=ERROR_INIT_INTEERUPT_MODE_NOT_DEFINED;
     d1c:	84 e0       	ldi	r24, 0x04	; 4
     d1e:	99 cf       	rjmp	.-206    	; 0xc52 <SPI_Init+0x44>
				gu8_Interrupt_Mode=SPI_INTERRUPT_MODE;
     d20:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <gu8_Interrupt_Mode>
				au8_error=ERROR_INIT_SLAVE_OK;
     d24:	86 e0       	ldi	r24, 0x06	; 6
     d26:	95 cf       	rjmp	.-214    	; 0xc52 <SPI_Init+0x44>
				gu8_Interrupt_Mode=SPI_POLLING_MODE;
     d28:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <gu8_Interrupt_Mode>
				au8_error=ERROR_INIT_SLAVE_OK;
     d2c:	86 e0       	ldi	r24, 0x06	; 6
     d2e:	91 cf       	rjmp	.-222    	; 0xc52 <SPI_Init+0x44>

00000d30 <SPI_RecieveByte>:
	}
	return au8_error;
}

Error_Type_t SPI_RecieveByte (uint8_t * au8_PtrData)
{
     d30:	e8 2f       	mov	r30, r24
     d32:	f9 2f       	mov	r31, r25
	uint8_t au8_error=0;
	if(gu8_Interrupt_Mode==SPI_INTERRUPT_MODE)
     d34:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <gu8_Interrupt_Mode>
     d38:	81 11       	cpse	r24, r1
     d3a:	0e c0       	rjmp	.+28     	; 0xd58 <SPI_RecieveByte+0x28>
	{

     	if(gu8_Interrupt_Flag==1)
     d3c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <gu8_Interrupt_Flag>
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	11 f0       	breq	.+4      	; 0xd48 <SPI_RecieveByte+0x18>
		while(BIT_IS_CLR(SPSR,SPSR_SPIF)){}
		au8_error=ERROR_RECIEVE_OK;
	}
	else
	{
		au8_error=ERROR_RECIEVE_NOK;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	08 95       	ret
			SET_BIT(SREG,7);
     d48:	8f b7       	in	r24, 0x3f	; 63
     d4a:	80 68       	ori	r24, 0x80	; 128
     d4c:	8f bf       	out	0x3f, r24	; 63
		    SET_BIT(SPCR,SPCR_SPIE);
     d4e:	6f 9a       	sbi	0x0d, 7	; 13
			*au8_PtrData=SPDR;
     d50:	8f b1       	in	r24, 0x0f	; 15
     d52:	80 83       	st	Z, r24
			gu8_Interrupt_Flag=0;
     d54:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <gu8_Interrupt_Flag>
	if(gu8_Interrupt_Mode==SPI_POLLING_MODE)
     d58:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <gu8_Interrupt_Mode>
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	31 f4       	brne	.+12     	; 0xd6c <SPI_RecieveByte+0x3c>
		*au8_PtrData=SPDR;
     d60:	8f b1       	in	r24, 0x0f	; 15
     d62:	80 83       	st	Z, r24
		while(BIT_IS_CLR(SPSR,SPSR_SPIF)){}
     d64:	77 9b       	sbis	0x0e, 7	; 14
     d66:	fe cf       	rjmp	.-4      	; 0xd64 <SPI_RecieveByte+0x34>
		au8_error=ERROR_RECIEVE_OK;
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	08 95       	ret
		au8_error=ERROR_RECIEVE_NOK;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return au8_error;
}
     d6e:	08 95       	ret

00000d70 <TransformIntToString>:
/*- GLOBAL EXTERN VARIABLES -------------------------------*/
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/

/*- APIs IMPLEMENTATION -----------------------------------*/
char_t* TransformIntToString(long long int Number)
{
     d70:	2f 92       	push	r2
     d72:	3f 92       	push	r3
     d74:	4f 92       	push	r4
     d76:	5f 92       	push	r5
     d78:	6f 92       	push	r6
     d7a:	7f 92       	push	r7
     d7c:	8f 92       	push	r8
     d7e:	9f 92       	push	r9
     d80:	af 92       	push	r10
     d82:	bf 92       	push	r11
     d84:	cf 92       	push	r12
     d86:	df 92       	push	r13
     d88:	ef 92       	push	r14
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	28 97       	sbiw	r28, 0x08	; 8
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	2d 83       	std	Y+5, r18	; 0x05
     da6:	38 87       	std	Y+8, r19	; 0x08
     da8:	4e 83       	std	Y+6, r20	; 0x06
     daa:	5f 83       	std	Y+7, r21	; 0x07
     dac:	56 2e       	mov	r5, r22
     dae:	47 2e       	mov	r4, r23
     db0:	38 2e       	mov	r3, r24
     db2:	29 2e       	mov	r2, r25
	static char_t Int_String[100]={0};
    uint8_t digits=0;
     db4:	61 2c       	mov	r6, r1
    while(Number/(long long int)pow(10,digits++));
     db6:	86 2c       	mov	r8, r6
     db8:	63 94       	inc	r6
     dba:	88 2d       	mov	r24, r8
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	a0 e0       	ldi	r26, 0x00	; 0
     dc2:	89 83       	std	Y+1, r24	; 0x01
     dc4:	9a 83       	std	Y+2, r25	; 0x02
     dc6:	ab 83       	std	Y+3, r26	; 0x03
     dc8:	bc 83       	std	Y+4, r27	; 0x04
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 ca 08 	call	0x1194	; 0x1194 <__floatunsisf>
     dd2:	26 2f       	mov	r18, r22
     dd4:	37 2f       	mov	r19, r23
     dd6:	48 2f       	mov	r20, r24
     dd8:	59 2f       	mov	r21, r25
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	80 e2       	ldi	r24, 0x20	; 32
     de0:	91 e4       	ldi	r25, 0x41	; 65
     de2:	0e 94 68 09 	call	0x12d0	; 0x12d0 <pow>
     de6:	69 83       	std	Y+1, r22	; 0x01
     de8:	7a 83       	std	Y+2, r23	; 0x02
     dea:	8b 83       	std	Y+3, r24	; 0x03
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	69 81       	ldd	r22, Y+1	; 0x01
     df0:	7a 81       	ldd	r23, Y+2	; 0x02
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	0e 94 5f 08 	call	0x10be	; 0x10be <__fixsfdi>
     dfa:	a2 2e       	mov	r10, r18
     dfc:	b3 2e       	mov	r11, r19
     dfe:	c4 2e       	mov	r12, r20
     e00:	d5 2e       	mov	r13, r21
     e02:	e6 2e       	mov	r14, r22
     e04:	f7 2e       	mov	r15, r23
     e06:	08 2f       	mov	r16, r24
     e08:	19 2f       	mov	r17, r25
     e0a:	2d 81       	ldd	r18, Y+5	; 0x05
     e0c:	38 85       	ldd	r19, Y+8	; 0x08
     e0e:	4e 81       	ldd	r20, Y+6	; 0x06
     e10:	5f 81       	ldd	r21, Y+7	; 0x07
     e12:	65 2d       	mov	r22, r5
     e14:	74 2d       	mov	r23, r4
     e16:	83 2d       	mov	r24, r3
     e18:	92 2d       	mov	r25, r2
     e1a:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__divdi3>
     e1e:	a0 e0       	ldi	r26, 0x00	; 0
     e20:	0e 94 31 0c 	call	0x1862	; 0x1862 <__cmpdi2_s8>
     e24:	41 f6       	brne	.-112    	; 0xdb6 <TransformIntToString+0x46>
    digits--;
    uint8_t index=0;
    while (Number) 
     e26:	2d 81       	ldd	r18, Y+5	; 0x05
     e28:	38 85       	ldd	r19, Y+8	; 0x08
     e2a:	4e 81       	ldd	r20, Y+6	; 0x06
     e2c:	5f 81       	ldd	r21, Y+7	; 0x07
     e2e:	65 2d       	mov	r22, r5
     e30:	74 2d       	mov	r23, r4
     e32:	83 2d       	mov	r24, r3
     e34:	92 2d       	mov	r25, r2
     e36:	0e 94 31 0c 	call	0x1862	; 0x1862 <__cmpdi2_s8>
     e3a:	09 f4       	brne	.+2      	; 0xe3e <TransformIntToString+0xce>
     e3c:	5f c0       	rjmp	.+190    	; 0xefc <TransformIntToString+0x18c>
    uint8_t index=0;
     e3e:	19 82       	std	Y+1, r1	; 0x01
    { 
        Int_String[(digits-1)-index] = (Number%10) + '0'; 
     e40:	a8 2d       	mov	r26, r8
     e42:	a1 50       	subi	r26, 0x01	; 1
     e44:	bb 0b       	sbc	r27, r27
     e46:	4d 01       	movw	r8, r26
     e48:	c4 01       	movw	r24, r8
     e4a:	b9 81       	ldd	r27, Y+1	; 0x01
     e4c:	8b 1b       	sub	r24, r27
     e4e:	91 09       	sbc	r25, r1
     e50:	fc 01       	movw	r30, r24
     e52:	e4 56       	subi	r30, 0x64	; 100
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	3f 01       	movw	r6, r30
     e58:	0f 2e       	mov	r0, r31
     e5a:	fa e0       	ldi	r31, 0x0A	; 10
     e5c:	af 2e       	mov	r10, r31
     e5e:	f0 2d       	mov	r31, r0
     e60:	b1 2c       	mov	r11, r1
     e62:	c1 2c       	mov	r12, r1
     e64:	d1 2c       	mov	r13, r1
     e66:	e1 2c       	mov	r14, r1
     e68:	f1 2c       	mov	r15, r1
     e6a:	00 e0       	ldi	r16, 0x00	; 0
     e6c:	10 e0       	ldi	r17, 0x00	; 0
     e6e:	2d 81       	ldd	r18, Y+5	; 0x05
     e70:	38 85       	ldd	r19, Y+8	; 0x08
     e72:	4e 81       	ldd	r20, Y+6	; 0x06
     e74:	5f 81       	ldd	r21, Y+7	; 0x07
     e76:	65 2d       	mov	r22, r5
     e78:	74 2d       	mov	r23, r4
     e7a:	83 2d       	mov	r24, r3
     e7c:	92 2d       	mov	r25, r2
     e7e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__moddi3>
     e82:	20 5d       	subi	r18, 0xD0	; 208
     e84:	d3 01       	movw	r26, r6
     e86:	2c 93       	st	X, r18
        Number= Number/10; 
     e88:	2d 81       	ldd	r18, Y+5	; 0x05
     e8a:	38 85       	ldd	r19, Y+8	; 0x08
     e8c:	4e 81       	ldd	r20, Y+6	; 0x06
     e8e:	5f 81       	ldd	r21, Y+7	; 0x07
     e90:	65 2d       	mov	r22, r5
     e92:	74 2d       	mov	r23, r4
     e94:	83 2d       	mov	r24, r3
     e96:	92 2d       	mov	r25, r2
     e98:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__divdi3>
     e9c:	2d 83       	std	Y+5, r18	; 0x05
     e9e:	38 87       	std	Y+8, r19	; 0x08
     ea0:	4e 83       	std	Y+6, r20	; 0x06
     ea2:	5f 83       	std	Y+7, r21	; 0x07
     ea4:	56 2e       	mov	r5, r22
     ea6:	47 2e       	mov	r4, r23
     ea8:	38 2e       	mov	r3, r24
     eaa:	29 2e       	mov	r2, r25
        index++;
     eac:	b9 81       	ldd	r27, Y+1	; 0x01
     eae:	bf 5f       	subi	r27, 0xFF	; 255
     eb0:	b9 83       	std	Y+1, r27	; 0x01
    while (Number) 
     eb2:	a0 e0       	ldi	r26, 0x00	; 0
     eb4:	0e 94 31 0c 	call	0x1862	; 0x1862 <__cmpdi2_s8>
     eb8:	39 f6       	brne	.-114    	; 0xe48 <TransformIntToString+0xd8>
    } 
	Int_String[index]='\0';
     eba:	29 81       	ldd	r18, Y+1	; 0x01
     ebc:	e2 2f       	mov	r30, r18
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	e4 56       	subi	r30, 0x64	; 100
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	10 82       	st	Z, r1
    return Int_String;
     ec6:	8c e9       	ldi	r24, 0x9C	; 156
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	28 96       	adiw	r28, 0x08	; 8
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	df 90       	pop	r13
     ee4:	cf 90       	pop	r12
     ee6:	bf 90       	pop	r11
     ee8:	af 90       	pop	r10
     eea:	9f 90       	pop	r9
     eec:	8f 90       	pop	r8
     eee:	7f 90       	pop	r7
     ef0:	6f 90       	pop	r6
     ef2:	5f 90       	pop	r5
     ef4:	4f 90       	pop	r4
     ef6:	3f 90       	pop	r3
     ef8:	2f 90       	pop	r2
     efa:	08 95       	ret
    uint8_t index=0;
     efc:	19 82       	std	Y+1, r1	; 0x01
     efe:	dd cf       	rjmp	.-70     	; 0xeba <TransformIntToString+0x14a>

00000f00 <__subsf3>:
     f00:	50 58       	subi	r21, 0x80	; 128

00000f02 <__addsf3>:
     f02:	bb 27       	eor	r27, r27
     f04:	aa 27       	eor	r26, r26
     f06:	0e 94 98 07 	call	0xf30	; 0xf30 <__addsf3x>
     f0a:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__fp_round>
     f0e:	0e 94 20 09 	call	0x1240	; 0x1240 <__fp_pscA>
     f12:	38 f0       	brcs	.+14     	; 0xf22 <__addsf3+0x20>
     f14:	0e 94 27 09 	call	0x124e	; 0x124e <__fp_pscB>
     f18:	20 f0       	brcs	.+8      	; 0xf22 <__addsf3+0x20>
     f1a:	39 f4       	brne	.+14     	; 0xf2a <__addsf3+0x28>
     f1c:	9f 3f       	cpi	r25, 0xFF	; 255
     f1e:	19 f4       	brne	.+6      	; 0xf26 <__addsf3+0x24>
     f20:	26 f4       	brtc	.+8      	; 0xf2a <__addsf3+0x28>
     f22:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_nan>
     f26:	0e f4       	brtc	.+2      	; 0xf2a <__addsf3+0x28>
     f28:	e0 95       	com	r30
     f2a:	e7 fb       	bst	r30, 7
     f2c:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_inf>

00000f30 <__addsf3x>:
     f30:	e9 2f       	mov	r30, r25
     f32:	0e 94 3f 09 	call	0x127e	; 0x127e <__fp_split3>
     f36:	58 f3       	brcs	.-42     	; 0xf0e <__addsf3+0xc>
     f38:	ba 17       	cp	r27, r26
     f3a:	62 07       	cpc	r22, r18
     f3c:	73 07       	cpc	r23, r19
     f3e:	84 07       	cpc	r24, r20
     f40:	95 07       	cpc	r25, r21
     f42:	20 f0       	brcs	.+8      	; 0xf4c <__addsf3x+0x1c>
     f44:	79 f4       	brne	.+30     	; 0xf64 <__addsf3x+0x34>
     f46:	a6 f5       	brtc	.+104    	; 0xfb0 <__addsf3x+0x80>
     f48:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__fp_zero>
     f4c:	0e f4       	brtc	.+2      	; 0xf50 <__addsf3x+0x20>
     f4e:	e0 95       	com	r30
     f50:	0b 2e       	mov	r0, r27
     f52:	ba 2f       	mov	r27, r26
     f54:	a0 2d       	mov	r26, r0
     f56:	0b 01       	movw	r0, r22
     f58:	b9 01       	movw	r22, r18
     f5a:	90 01       	movw	r18, r0
     f5c:	0c 01       	movw	r0, r24
     f5e:	ca 01       	movw	r24, r20
     f60:	a0 01       	movw	r20, r0
     f62:	11 24       	eor	r1, r1
     f64:	ff 27       	eor	r31, r31
     f66:	59 1b       	sub	r21, r25
     f68:	99 f0       	breq	.+38     	; 0xf90 <__addsf3x+0x60>
     f6a:	59 3f       	cpi	r21, 0xF9	; 249
     f6c:	50 f4       	brcc	.+20     	; 0xf82 <__addsf3x+0x52>
     f6e:	50 3e       	cpi	r21, 0xE0	; 224
     f70:	68 f1       	brcs	.+90     	; 0xfcc <__addsf3x+0x9c>
     f72:	1a 16       	cp	r1, r26
     f74:	f0 40       	sbci	r31, 0x00	; 0
     f76:	a2 2f       	mov	r26, r18
     f78:	23 2f       	mov	r18, r19
     f7a:	34 2f       	mov	r19, r20
     f7c:	44 27       	eor	r20, r20
     f7e:	58 5f       	subi	r21, 0xF8	; 248
     f80:	f3 cf       	rjmp	.-26     	; 0xf68 <__addsf3x+0x38>
     f82:	46 95       	lsr	r20
     f84:	37 95       	ror	r19
     f86:	27 95       	ror	r18
     f88:	a7 95       	ror	r26
     f8a:	f0 40       	sbci	r31, 0x00	; 0
     f8c:	53 95       	inc	r21
     f8e:	c9 f7       	brne	.-14     	; 0xf82 <__addsf3x+0x52>
     f90:	7e f4       	brtc	.+30     	; 0xfb0 <__addsf3x+0x80>
     f92:	1f 16       	cp	r1, r31
     f94:	ba 0b       	sbc	r27, r26
     f96:	62 0b       	sbc	r22, r18
     f98:	73 0b       	sbc	r23, r19
     f9a:	84 0b       	sbc	r24, r20
     f9c:	ba f0       	brmi	.+46     	; 0xfcc <__addsf3x+0x9c>
     f9e:	91 50       	subi	r25, 0x01	; 1
     fa0:	a1 f0       	breq	.+40     	; 0xfca <__addsf3x+0x9a>
     fa2:	ff 0f       	add	r31, r31
     fa4:	bb 1f       	adc	r27, r27
     fa6:	66 1f       	adc	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	c2 f7       	brpl	.-16     	; 0xf9e <__addsf3x+0x6e>
     fae:	0e c0       	rjmp	.+28     	; 0xfcc <__addsf3x+0x9c>
     fb0:	ba 0f       	add	r27, r26
     fb2:	62 1f       	adc	r22, r18
     fb4:	73 1f       	adc	r23, r19
     fb6:	84 1f       	adc	r24, r20
     fb8:	48 f4       	brcc	.+18     	; 0xfcc <__addsf3x+0x9c>
     fba:	87 95       	ror	r24
     fbc:	77 95       	ror	r23
     fbe:	67 95       	ror	r22
     fc0:	b7 95       	ror	r27
     fc2:	f7 95       	ror	r31
     fc4:	9e 3f       	cpi	r25, 0xFE	; 254
     fc6:	08 f0       	brcs	.+2      	; 0xfca <__addsf3x+0x9a>
     fc8:	b0 cf       	rjmp	.-160    	; 0xf2a <__addsf3+0x28>
     fca:	93 95       	inc	r25
     fcc:	88 0f       	add	r24, r24
     fce:	08 f0       	brcs	.+2      	; 0xfd2 <__addsf3x+0xa2>
     fd0:	99 27       	eor	r25, r25
     fd2:	ee 0f       	add	r30, r30
     fd4:	97 95       	ror	r25
     fd6:	87 95       	ror	r24
     fd8:	08 95       	ret

00000fda <__divsf3>:
     fda:	0e 94 01 08 	call	0x1002	; 0x1002 <__divsf3x>
     fde:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__fp_round>
     fe2:	0e 94 27 09 	call	0x124e	; 0x124e <__fp_pscB>
     fe6:	58 f0       	brcs	.+22     	; 0xffe <__divsf3+0x24>
     fe8:	0e 94 20 09 	call	0x1240	; 0x1240 <__fp_pscA>
     fec:	40 f0       	brcs	.+16     	; 0xffe <__divsf3+0x24>
     fee:	29 f4       	brne	.+10     	; 0xffa <__divsf3+0x20>
     ff0:	5f 3f       	cpi	r21, 0xFF	; 255
     ff2:	29 f0       	breq	.+10     	; 0xffe <__divsf3+0x24>
     ff4:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_inf>
     ff8:	51 11       	cpse	r21, r1
     ffa:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__fp_szero>
     ffe:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_nan>

00001002 <__divsf3x>:
    1002:	0e 94 3f 09 	call	0x127e	; 0x127e <__fp_split3>
    1006:	68 f3       	brcs	.-38     	; 0xfe2 <__divsf3+0x8>

00001008 <__divsf3_pse>:
    1008:	99 23       	and	r25, r25
    100a:	b1 f3       	breq	.-20     	; 0xff8 <__divsf3+0x1e>
    100c:	55 23       	and	r21, r21
    100e:	91 f3       	breq	.-28     	; 0xff4 <__divsf3+0x1a>
    1010:	95 1b       	sub	r25, r21
    1012:	55 0b       	sbc	r21, r21
    1014:	bb 27       	eor	r27, r27
    1016:	aa 27       	eor	r26, r26
    1018:	62 17       	cp	r22, r18
    101a:	73 07       	cpc	r23, r19
    101c:	84 07       	cpc	r24, r20
    101e:	38 f0       	brcs	.+14     	; 0x102e <__divsf3_pse+0x26>
    1020:	9f 5f       	subi	r25, 0xFF	; 255
    1022:	5f 4f       	sbci	r21, 0xFF	; 255
    1024:	22 0f       	add	r18, r18
    1026:	33 1f       	adc	r19, r19
    1028:	44 1f       	adc	r20, r20
    102a:	aa 1f       	adc	r26, r26
    102c:	a9 f3       	breq	.-22     	; 0x1018 <__divsf3_pse+0x10>
    102e:	35 d0       	rcall	.+106    	; 0x109a <__divsf3_pse+0x92>
    1030:	0e 2e       	mov	r0, r30
    1032:	3a f0       	brmi	.+14     	; 0x1042 <__divsf3_pse+0x3a>
    1034:	e0 e8       	ldi	r30, 0x80	; 128
    1036:	32 d0       	rcall	.+100    	; 0x109c <__divsf3_pse+0x94>
    1038:	91 50       	subi	r25, 0x01	; 1
    103a:	50 40       	sbci	r21, 0x00	; 0
    103c:	e6 95       	lsr	r30
    103e:	00 1c       	adc	r0, r0
    1040:	ca f7       	brpl	.-14     	; 0x1034 <__divsf3_pse+0x2c>
    1042:	2b d0       	rcall	.+86     	; 0x109a <__divsf3_pse+0x92>
    1044:	fe 2f       	mov	r31, r30
    1046:	29 d0       	rcall	.+82     	; 0x109a <__divsf3_pse+0x92>
    1048:	66 0f       	add	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	bb 1f       	adc	r27, r27
    1050:	26 17       	cp	r18, r22
    1052:	37 07       	cpc	r19, r23
    1054:	48 07       	cpc	r20, r24
    1056:	ab 07       	cpc	r26, r27
    1058:	b0 e8       	ldi	r27, 0x80	; 128
    105a:	09 f0       	breq	.+2      	; 0x105e <__divsf3_pse+0x56>
    105c:	bb 0b       	sbc	r27, r27
    105e:	80 2d       	mov	r24, r0
    1060:	bf 01       	movw	r22, r30
    1062:	ff 27       	eor	r31, r31
    1064:	93 58       	subi	r25, 0x83	; 131
    1066:	5f 4f       	sbci	r21, 0xFF	; 255
    1068:	3a f0       	brmi	.+14     	; 0x1078 <__divsf3_pse+0x70>
    106a:	9e 3f       	cpi	r25, 0xFE	; 254
    106c:	51 05       	cpc	r21, r1
    106e:	78 f0       	brcs	.+30     	; 0x108e <__divsf3_pse+0x86>
    1070:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_inf>
    1074:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__fp_szero>
    1078:	5f 3f       	cpi	r21, 0xFF	; 255
    107a:	e4 f3       	brlt	.-8      	; 0x1074 <__divsf3_pse+0x6c>
    107c:	98 3e       	cpi	r25, 0xE8	; 232
    107e:	d4 f3       	brlt	.-12     	; 0x1074 <__divsf3_pse+0x6c>
    1080:	86 95       	lsr	r24
    1082:	77 95       	ror	r23
    1084:	67 95       	ror	r22
    1086:	b7 95       	ror	r27
    1088:	f7 95       	ror	r31
    108a:	9f 5f       	subi	r25, 0xFF	; 255
    108c:	c9 f7       	brne	.-14     	; 0x1080 <__divsf3_pse+0x78>
    108e:	88 0f       	add	r24, r24
    1090:	91 1d       	adc	r25, r1
    1092:	96 95       	lsr	r25
    1094:	87 95       	ror	r24
    1096:	97 f9       	bld	r25, 7
    1098:	08 95       	ret
    109a:	e1 e0       	ldi	r30, 0x01	; 1
    109c:	66 0f       	add	r22, r22
    109e:	77 1f       	adc	r23, r23
    10a0:	88 1f       	adc	r24, r24
    10a2:	bb 1f       	adc	r27, r27
    10a4:	62 17       	cp	r22, r18
    10a6:	73 07       	cpc	r23, r19
    10a8:	84 07       	cpc	r24, r20
    10aa:	ba 07       	cpc	r27, r26
    10ac:	20 f0       	brcs	.+8      	; 0x10b6 <__divsf3_pse+0xae>
    10ae:	62 1b       	sub	r22, r18
    10b0:	73 0b       	sbc	r23, r19
    10b2:	84 0b       	sbc	r24, r20
    10b4:	ba 0b       	sbc	r27, r26
    10b6:	ee 1f       	adc	r30, r30
    10b8:	88 f7       	brcc	.-30     	; 0x109c <__divsf3_pse+0x94>
    10ba:	e0 95       	com	r30
    10bc:	08 95       	ret

000010be <__fixsfdi>:
    10be:	be e3       	ldi	r27, 0x3E	; 62
    10c0:	04 d0       	rcall	.+8      	; 0x10ca <__fixunssfdi+0x2>
    10c2:	08 f4       	brcc	.+2      	; 0x10c6 <__fixsfdi+0x8>
    10c4:	90 e8       	ldi	r25, 0x80	; 128
    10c6:	08 95       	ret

000010c8 <__fixunssfdi>:
    10c8:	bf e3       	ldi	r27, 0x3F	; 63
    10ca:	22 27       	eor	r18, r18
    10cc:	33 27       	eor	r19, r19
    10ce:	a9 01       	movw	r20, r18
    10d0:	0e 94 47 09 	call	0x128e	; 0x128e <__fp_splitA>
    10d4:	60 f1       	brcs	.+88     	; 0x112e <__fixunssfdi+0x66>
    10d6:	9f 57       	subi	r25, 0x7F	; 127
    10d8:	48 f1       	brcs	.+82     	; 0x112c <__fixunssfdi+0x64>
    10da:	b9 17       	cp	r27, r25
    10dc:	40 f1       	brcs	.+80     	; 0x112e <__fixunssfdi+0x66>
    10de:	bf e3       	ldi	r27, 0x3F	; 63
    10e0:	b9 1b       	sub	r27, r25
    10e2:	99 27       	eor	r25, r25
    10e4:	b8 50       	subi	r27, 0x08	; 8
    10e6:	3a f4       	brpl	.+14     	; 0x10f6 <__fixunssfdi+0x2e>
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	b3 95       	inc	r27
    10f2:	d2 f3       	brmi	.-12     	; 0x10e8 <__fixunssfdi+0x20>
    10f4:	16 c0       	rjmp	.+44     	; 0x1122 <__fixunssfdi+0x5a>
    10f6:	b8 50       	subi	r27, 0x08	; 8
    10f8:	4a f0       	brmi	.+18     	; 0x110c <__fixunssfdi+0x44>
    10fa:	23 2f       	mov	r18, r19
    10fc:	34 2f       	mov	r19, r20
    10fe:	45 2f       	mov	r20, r21
    1100:	56 2f       	mov	r21, r22
    1102:	67 2f       	mov	r22, r23
    1104:	78 2f       	mov	r23, r24
    1106:	88 27       	eor	r24, r24
    1108:	b8 50       	subi	r27, 0x08	; 8
    110a:	ba f7       	brpl	.-18     	; 0x10fa <__fixunssfdi+0x32>
    110c:	b8 5f       	subi	r27, 0xF8	; 248
    110e:	49 f0       	breq	.+18     	; 0x1122 <__fixunssfdi+0x5a>
    1110:	86 95       	lsr	r24
    1112:	77 95       	ror	r23
    1114:	67 95       	ror	r22
    1116:	57 95       	ror	r21
    1118:	47 95       	ror	r20
    111a:	37 95       	ror	r19
    111c:	27 95       	ror	r18
    111e:	ba 95       	dec	r27
    1120:	b9 f7       	brne	.-18     	; 0x1110 <__fixunssfdi+0x48>
    1122:	16 f4       	brtc	.+4      	; 0x1128 <__fixunssfdi+0x60>
    1124:	0e 94 10 09 	call	0x1220	; 0x1220 <__fp_negdi>
    1128:	88 94       	clc
    112a:	08 95       	ret
    112c:	88 94       	clc
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	cb 01       	movw	r24, r22
    1134:	08 95       	ret

00001136 <__fixunssfsi>:
    1136:	0e 94 47 09 	call	0x128e	; 0x128e <__fp_splitA>
    113a:	88 f0       	brcs	.+34     	; 0x115e <__fixunssfsi+0x28>
    113c:	9f 57       	subi	r25, 0x7F	; 127
    113e:	98 f0       	brcs	.+38     	; 0x1166 <__fixunssfsi+0x30>
    1140:	b9 2f       	mov	r27, r25
    1142:	99 27       	eor	r25, r25
    1144:	b7 51       	subi	r27, 0x17	; 23
    1146:	b0 f0       	brcs	.+44     	; 0x1174 <__fixunssfsi+0x3e>
    1148:	e1 f0       	breq	.+56     	; 0x1182 <__fixunssfsi+0x4c>
    114a:	66 0f       	add	r22, r22
    114c:	77 1f       	adc	r23, r23
    114e:	88 1f       	adc	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	1a f0       	brmi	.+6      	; 0x115a <__fixunssfsi+0x24>
    1154:	ba 95       	dec	r27
    1156:	c9 f7       	brne	.-14     	; 0x114a <__fixunssfsi+0x14>
    1158:	14 c0       	rjmp	.+40     	; 0x1182 <__fixunssfsi+0x4c>
    115a:	b1 30       	cpi	r27, 0x01	; 1
    115c:	91 f0       	breq	.+36     	; 0x1182 <__fixunssfsi+0x4c>
    115e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__fp_zero>
    1162:	b1 e0       	ldi	r27, 0x01	; 1
    1164:	08 95       	ret
    1166:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__fp_zero>
    116a:	67 2f       	mov	r22, r23
    116c:	78 2f       	mov	r23, r24
    116e:	88 27       	eor	r24, r24
    1170:	b8 5f       	subi	r27, 0xF8	; 248
    1172:	39 f0       	breq	.+14     	; 0x1182 <__fixunssfsi+0x4c>
    1174:	b9 3f       	cpi	r27, 0xF9	; 249
    1176:	cc f3       	brlt	.-14     	; 0x116a <__fixunssfsi+0x34>
    1178:	86 95       	lsr	r24
    117a:	77 95       	ror	r23
    117c:	67 95       	ror	r22
    117e:	b3 95       	inc	r27
    1180:	d9 f7       	brne	.-10     	; 0x1178 <__fixunssfsi+0x42>
    1182:	3e f4       	brtc	.+14     	; 0x1192 <__fixunssfsi+0x5c>
    1184:	90 95       	com	r25
    1186:	80 95       	com	r24
    1188:	70 95       	com	r23
    118a:	61 95       	neg	r22
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	8f 4f       	sbci	r24, 0xFF	; 255
    1190:	9f 4f       	sbci	r25, 0xFF	; 255
    1192:	08 95       	ret

00001194 <__floatunsisf>:
    1194:	e8 94       	clt
    1196:	09 c0       	rjmp	.+18     	; 0x11aa <__floatsisf+0x12>

00001198 <__floatsisf>:
    1198:	97 fb       	bst	r25, 7
    119a:	3e f4       	brtc	.+14     	; 0x11aa <__floatsisf+0x12>
    119c:	90 95       	com	r25
    119e:	80 95       	com	r24
    11a0:	70 95       	com	r23
    11a2:	61 95       	neg	r22
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	8f 4f       	sbci	r24, 0xFF	; 255
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	99 23       	and	r25, r25
    11ac:	a9 f0       	breq	.+42     	; 0x11d8 <__floatsisf+0x40>
    11ae:	f9 2f       	mov	r31, r25
    11b0:	96 e9       	ldi	r25, 0x96	; 150
    11b2:	bb 27       	eor	r27, r27
    11b4:	93 95       	inc	r25
    11b6:	f6 95       	lsr	r31
    11b8:	87 95       	ror	r24
    11ba:	77 95       	ror	r23
    11bc:	67 95       	ror	r22
    11be:	b7 95       	ror	r27
    11c0:	f1 11       	cpse	r31, r1
    11c2:	f8 cf       	rjmp	.-16     	; 0x11b4 <__floatsisf+0x1c>
    11c4:	fa f4       	brpl	.+62     	; 0x1204 <__floatsisf+0x6c>
    11c6:	bb 0f       	add	r27, r27
    11c8:	11 f4       	brne	.+4      	; 0x11ce <__floatsisf+0x36>
    11ca:	60 ff       	sbrs	r22, 0
    11cc:	1b c0       	rjmp	.+54     	; 0x1204 <__floatsisf+0x6c>
    11ce:	6f 5f       	subi	r22, 0xFF	; 255
    11d0:	7f 4f       	sbci	r23, 0xFF	; 255
    11d2:	8f 4f       	sbci	r24, 0xFF	; 255
    11d4:	9f 4f       	sbci	r25, 0xFF	; 255
    11d6:	16 c0       	rjmp	.+44     	; 0x1204 <__floatsisf+0x6c>
    11d8:	88 23       	and	r24, r24
    11da:	11 f0       	breq	.+4      	; 0x11e0 <__floatsisf+0x48>
    11dc:	96 e9       	ldi	r25, 0x96	; 150
    11de:	11 c0       	rjmp	.+34     	; 0x1202 <__floatsisf+0x6a>
    11e0:	77 23       	and	r23, r23
    11e2:	21 f0       	breq	.+8      	; 0x11ec <__floatsisf+0x54>
    11e4:	9e e8       	ldi	r25, 0x8E	; 142
    11e6:	87 2f       	mov	r24, r23
    11e8:	76 2f       	mov	r23, r22
    11ea:	05 c0       	rjmp	.+10     	; 0x11f6 <__floatsisf+0x5e>
    11ec:	66 23       	and	r22, r22
    11ee:	71 f0       	breq	.+28     	; 0x120c <__floatsisf+0x74>
    11f0:	96 e8       	ldi	r25, 0x86	; 134
    11f2:	86 2f       	mov	r24, r22
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	2a f0       	brmi	.+10     	; 0x1204 <__floatsisf+0x6c>
    11fa:	9a 95       	dec	r25
    11fc:	66 0f       	add	r22, r22
    11fe:	77 1f       	adc	r23, r23
    1200:	88 1f       	adc	r24, r24
    1202:	da f7       	brpl	.-10     	; 0x11fa <__floatsisf+0x62>
    1204:	88 0f       	add	r24, r24
    1206:	96 95       	lsr	r25
    1208:	87 95       	ror	r24
    120a:	97 f9       	bld	r25, 7
    120c:	08 95       	ret

0000120e <__fp_inf>:
    120e:	97 f9       	bld	r25, 7
    1210:	9f 67       	ori	r25, 0x7F	; 127
    1212:	80 e8       	ldi	r24, 0x80	; 128
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	08 95       	ret

0000121a <__fp_nan>:
    121a:	9f ef       	ldi	r25, 0xFF	; 255
    121c:	80 ec       	ldi	r24, 0xC0	; 192
    121e:	08 95       	ret

00001220 <__fp_negdi>:
    1220:	90 95       	com	r25
    1222:	80 95       	com	r24
    1224:	70 95       	com	r23
    1226:	60 95       	com	r22
    1228:	50 95       	com	r21
    122a:	40 95       	com	r20
    122c:	30 95       	com	r19
    122e:	21 95       	neg	r18
    1230:	3f 4f       	sbci	r19, 0xFF	; 255
    1232:	4f 4f       	sbci	r20, 0xFF	; 255
    1234:	5f 4f       	sbci	r21, 0xFF	; 255
    1236:	6f 4f       	sbci	r22, 0xFF	; 255
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	8f 4f       	sbci	r24, 0xFF	; 255
    123c:	9f 4f       	sbci	r25, 0xFF	; 255
    123e:	08 95       	ret

00001240 <__fp_pscA>:
    1240:	00 24       	eor	r0, r0
    1242:	0a 94       	dec	r0
    1244:	16 16       	cp	r1, r22
    1246:	17 06       	cpc	r1, r23
    1248:	18 06       	cpc	r1, r24
    124a:	09 06       	cpc	r0, r25
    124c:	08 95       	ret

0000124e <__fp_pscB>:
    124e:	00 24       	eor	r0, r0
    1250:	0a 94       	dec	r0
    1252:	12 16       	cp	r1, r18
    1254:	13 06       	cpc	r1, r19
    1256:	14 06       	cpc	r1, r20
    1258:	05 06       	cpc	r0, r21
    125a:	08 95       	ret

0000125c <__fp_round>:
    125c:	09 2e       	mov	r0, r25
    125e:	03 94       	inc	r0
    1260:	00 0c       	add	r0, r0
    1262:	11 f4       	brne	.+4      	; 0x1268 <__fp_round+0xc>
    1264:	88 23       	and	r24, r24
    1266:	52 f0       	brmi	.+20     	; 0x127c <__fp_round+0x20>
    1268:	bb 0f       	add	r27, r27
    126a:	40 f4       	brcc	.+16     	; 0x127c <__fp_round+0x20>
    126c:	bf 2b       	or	r27, r31
    126e:	11 f4       	brne	.+4      	; 0x1274 <__fp_round+0x18>
    1270:	60 ff       	sbrs	r22, 0
    1272:	04 c0       	rjmp	.+8      	; 0x127c <__fp_round+0x20>
    1274:	6f 5f       	subi	r22, 0xFF	; 255
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	8f 4f       	sbci	r24, 0xFF	; 255
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	08 95       	ret

0000127e <__fp_split3>:
    127e:	57 fd       	sbrc	r21, 7
    1280:	90 58       	subi	r25, 0x80	; 128
    1282:	44 0f       	add	r20, r20
    1284:	55 1f       	adc	r21, r21
    1286:	59 f0       	breq	.+22     	; 0x129e <__fp_splitA+0x10>
    1288:	5f 3f       	cpi	r21, 0xFF	; 255
    128a:	71 f0       	breq	.+28     	; 0x12a8 <__fp_splitA+0x1a>
    128c:	47 95       	ror	r20

0000128e <__fp_splitA>:
    128e:	88 0f       	add	r24, r24
    1290:	97 fb       	bst	r25, 7
    1292:	99 1f       	adc	r25, r25
    1294:	61 f0       	breq	.+24     	; 0x12ae <__fp_splitA+0x20>
    1296:	9f 3f       	cpi	r25, 0xFF	; 255
    1298:	79 f0       	breq	.+30     	; 0x12b8 <__fp_splitA+0x2a>
    129a:	87 95       	ror	r24
    129c:	08 95       	ret
    129e:	12 16       	cp	r1, r18
    12a0:	13 06       	cpc	r1, r19
    12a2:	14 06       	cpc	r1, r20
    12a4:	55 1f       	adc	r21, r21
    12a6:	f2 cf       	rjmp	.-28     	; 0x128c <__fp_split3+0xe>
    12a8:	46 95       	lsr	r20
    12aa:	f1 df       	rcall	.-30     	; 0x128e <__fp_splitA>
    12ac:	08 c0       	rjmp	.+16     	; 0x12be <__fp_splitA+0x30>
    12ae:	16 16       	cp	r1, r22
    12b0:	17 06       	cpc	r1, r23
    12b2:	18 06       	cpc	r1, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	f1 cf       	rjmp	.-30     	; 0x129a <__fp_splitA+0xc>
    12b8:	86 95       	lsr	r24
    12ba:	71 05       	cpc	r23, r1
    12bc:	61 05       	cpc	r22, r1
    12be:	08 94       	sec
    12c0:	08 95       	ret

000012c2 <__fp_zero>:
    12c2:	e8 94       	clt

000012c4 <__fp_szero>:
    12c4:	bb 27       	eor	r27, r27
    12c6:	66 27       	eor	r22, r22
    12c8:	77 27       	eor	r23, r23
    12ca:	cb 01       	movw	r24, r22
    12cc:	97 f9       	bld	r25, 7
    12ce:	08 95       	ret

000012d0 <pow>:
    12d0:	fa 01       	movw	r30, r20
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	30 96       	adiw	r30, 0x00	; 0
    12d8:	21 05       	cpc	r18, r1
    12da:	31 05       	cpc	r19, r1
    12dc:	a1 f1       	breq	.+104    	; 0x1346 <pow+0x76>
    12de:	61 15       	cp	r22, r1
    12e0:	71 05       	cpc	r23, r1
    12e2:	61 f4       	brne	.+24     	; 0x12fc <pow+0x2c>
    12e4:	80 38       	cpi	r24, 0x80	; 128
    12e6:	bf e3       	ldi	r27, 0x3F	; 63
    12e8:	9b 07       	cpc	r25, r27
    12ea:	49 f1       	breq	.+82     	; 0x133e <pow+0x6e>
    12ec:	68 94       	set
    12ee:	90 38       	cpi	r25, 0x80	; 128
    12f0:	81 05       	cpc	r24, r1
    12f2:	61 f0       	breq	.+24     	; 0x130c <pow+0x3c>
    12f4:	80 38       	cpi	r24, 0x80	; 128
    12f6:	bf ef       	ldi	r27, 0xFF	; 255
    12f8:	9b 07       	cpc	r25, r27
    12fa:	41 f0       	breq	.+16     	; 0x130c <pow+0x3c>
    12fc:	99 23       	and	r25, r25
    12fe:	4a f5       	brpl	.+82     	; 0x1352 <pow+0x82>
    1300:	ff 3f       	cpi	r31, 0xFF	; 255
    1302:	e1 05       	cpc	r30, r1
    1304:	31 05       	cpc	r19, r1
    1306:	21 05       	cpc	r18, r1
    1308:	19 f1       	breq	.+70     	; 0x1350 <pow+0x80>
    130a:	e8 94       	clt
    130c:	08 94       	sec
    130e:	e7 95       	ror	r30
    1310:	d9 01       	movw	r26, r18
    1312:	aa 23       	and	r26, r26
    1314:	29 f4       	brne	.+10     	; 0x1320 <pow+0x50>
    1316:	ab 2f       	mov	r26, r27
    1318:	be 2f       	mov	r27, r30
    131a:	f8 5f       	subi	r31, 0xF8	; 248
    131c:	d0 f3       	brcs	.-12     	; 0x1312 <pow+0x42>
    131e:	10 c0       	rjmp	.+32     	; 0x1340 <pow+0x70>
    1320:	ff 5f       	subi	r31, 0xFF	; 255
    1322:	70 f4       	brcc	.+28     	; 0x1340 <pow+0x70>
    1324:	a6 95       	lsr	r26
    1326:	e0 f7       	brcc	.-8      	; 0x1320 <pow+0x50>
    1328:	f7 39       	cpi	r31, 0x97	; 151
    132a:	50 f0       	brcs	.+20     	; 0x1340 <pow+0x70>
    132c:	19 f0       	breq	.+6      	; 0x1334 <pow+0x64>
    132e:	ff 3a       	cpi	r31, 0xAF	; 175
    1330:	38 f4       	brcc	.+14     	; 0x1340 <pow+0x70>
    1332:	9f 77       	andi	r25, 0x7F	; 127
    1334:	9f 93       	push	r25
    1336:	0d d0       	rcall	.+26     	; 0x1352 <pow+0x82>
    1338:	0f 90       	pop	r0
    133a:	07 fc       	sbrc	r0, 7
    133c:	90 58       	subi	r25, 0x80	; 128
    133e:	08 95       	ret
    1340:	46 f0       	brts	.+16     	; 0x1352 <pow+0x82>
    1342:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_nan>
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	80 e8       	ldi	r24, 0x80	; 128
    134c:	9f e3       	ldi	r25, 0x3F	; 63
    134e:	08 95       	ret
    1350:	4f e7       	ldi	r20, 0x7F	; 127
    1352:	9f 77       	andi	r25, 0x7F	; 127
    1354:	5f 93       	push	r21
    1356:	4f 93       	push	r20
    1358:	3f 93       	push	r19
    135a:	2f 93       	push	r18
    135c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <log>
    1360:	2f 91       	pop	r18
    1362:	3f 91       	pop	r19
    1364:	4f 91       	pop	r20
    1366:	5f 91       	pop	r21
    1368:	0e 94 df 0a 	call	0x15be	; 0x15be <__mulsf3>
    136c:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <exp>
    1370:	29 f4       	brne	.+10     	; 0x137c <pow+0xac>
    1372:	16 f0       	brts	.+4      	; 0x1378 <pow+0xa8>
    1374:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_inf>
    1378:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__fp_zero>
    137c:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_nan>

00001380 <exp>:
    1380:	0e 94 47 09 	call	0x128e	; 0x128e <__fp_splitA>
    1384:	a8 f3       	brcs	.-22     	; 0x1370 <pow+0xa0>
    1386:	96 38       	cpi	r25, 0x86	; 134
    1388:	a0 f7       	brcc	.-24     	; 0x1372 <pow+0xa2>
    138a:	07 f8       	bld	r0, 7
    138c:	0f 92       	push	r0
    138e:	e8 94       	clt
    1390:	2b e3       	ldi	r18, 0x3B	; 59
    1392:	3a ea       	ldi	r19, 0xAA	; 170
    1394:	48 eb       	ldi	r20, 0xB8	; 184
    1396:	5f e7       	ldi	r21, 0x7F	; 127
    1398:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__mulsf3_pse>
    139c:	0f 92       	push	r0
    139e:	0f 92       	push	r0
    13a0:	0f 92       	push	r0
    13a2:	4d b7       	in	r20, 0x3d	; 61
    13a4:	5e b7       	in	r21, 0x3e	; 62
    13a6:	0f 92       	push	r0
    13a8:	0e 94 ab 0a 	call	0x1556	; 0x1556 <modf>
    13ac:	e4 e5       	ldi	r30, 0x54	; 84
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__fp_powser>
    13b4:	4f 91       	pop	r20
    13b6:	5f 91       	pop	r21
    13b8:	ef 91       	pop	r30
    13ba:	ff 91       	pop	r31
    13bc:	e5 95       	asr	r30
    13be:	ee 1f       	adc	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	49 f0       	breq	.+18     	; 0x13d6 <exp+0x56>
    13c4:	fe 57       	subi	r31, 0x7E	; 126
    13c6:	e0 68       	ori	r30, 0x80	; 128
    13c8:	44 27       	eor	r20, r20
    13ca:	ee 0f       	add	r30, r30
    13cc:	44 1f       	adc	r20, r20
    13ce:	fa 95       	dec	r31
    13d0:	e1 f7       	brne	.-8      	; 0x13ca <exp+0x4a>
    13d2:	41 95       	neg	r20
    13d4:	55 0b       	sbc	r21, r21
    13d6:	0e 94 25 0a 	call	0x144a	; 0x144a <ldexp>
    13da:	0f 90       	pop	r0
    13dc:	07 fe       	sbrs	r0, 7
    13de:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <inverse>
    13e2:	08 95       	ret

000013e4 <__fp_powser>:
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	1f 93       	push	r17
    13ea:	0f 93       	push	r16
    13ec:	ff 92       	push	r15
    13ee:	ef 92       	push	r14
    13f0:	df 92       	push	r13
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
    13f6:	68 94       	set
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <__fp_powser+0x22>
    13fa:	da 2e       	mov	r13, r26
    13fc:	ef 01       	movw	r28, r30
    13fe:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__mulsf3x>
    1402:	fe 01       	movw	r30, r28
    1404:	e8 94       	clt
    1406:	a5 91       	lpm	r26, Z+
    1408:	25 91       	lpm	r18, Z+
    140a:	35 91       	lpm	r19, Z+
    140c:	45 91       	lpm	r20, Z+
    140e:	55 91       	lpm	r21, Z+
    1410:	a6 f3       	brts	.-24     	; 0x13fa <__fp_powser+0x16>
    1412:	ef 01       	movw	r28, r30
    1414:	0e 94 98 07 	call	0xf30	; 0xf30 <__addsf3x>
    1418:	fe 01       	movw	r30, r28
    141a:	97 01       	movw	r18, r14
    141c:	a8 01       	movw	r20, r16
    141e:	da 94       	dec	r13
    1420:	69 f7       	brne	.-38     	; 0x13fc <__fp_powser+0x18>
    1422:	df 90       	pop	r13
    1424:	ef 90       	pop	r14
    1426:	ff 90       	pop	r15
    1428:	0f 91       	pop	r16
    142a:	1f 91       	pop	r17
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <inverse>:
    1432:	9b 01       	movw	r18, r22
    1434:	ac 01       	movw	r20, r24
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	80 e8       	ldi	r24, 0x80	; 128
    143c:	9f e3       	ldi	r25, 0x3F	; 63
    143e:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__divsf3>
    1442:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_inf>
    1446:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__fp_mpack>

0000144a <ldexp>:
    144a:	0e 94 47 09 	call	0x128e	; 0x128e <__fp_splitA>
    144e:	d8 f3       	brcs	.-10     	; 0x1446 <inverse+0x14>
    1450:	99 23       	and	r25, r25
    1452:	c9 f3       	breq	.-14     	; 0x1446 <inverse+0x14>
    1454:	94 0f       	add	r25, r20
    1456:	51 1d       	adc	r21, r1
    1458:	a3 f3       	brvs	.-24     	; 0x1442 <inverse+0x10>
    145a:	91 50       	subi	r25, 0x01	; 1
    145c:	50 40       	sbci	r21, 0x00	; 0
    145e:	94 f0       	brlt	.+36     	; 0x1484 <ldexp+0x3a>
    1460:	59 f0       	breq	.+22     	; 0x1478 <ldexp+0x2e>
    1462:	88 23       	and	r24, r24
    1464:	32 f0       	brmi	.+12     	; 0x1472 <ldexp+0x28>
    1466:	66 0f       	add	r22, r22
    1468:	77 1f       	adc	r23, r23
    146a:	88 1f       	adc	r24, r24
    146c:	91 50       	subi	r25, 0x01	; 1
    146e:	50 40       	sbci	r21, 0x00	; 0
    1470:	c1 f7       	brne	.-16     	; 0x1462 <ldexp+0x18>
    1472:	9e 3f       	cpi	r25, 0xFE	; 254
    1474:	51 05       	cpc	r21, r1
    1476:	2c f7       	brge	.-54     	; 0x1442 <inverse+0x10>
    1478:	88 0f       	add	r24, r24
    147a:	91 1d       	adc	r25, r1
    147c:	96 95       	lsr	r25
    147e:	87 95       	ror	r24
    1480:	97 f9       	bld	r25, 7
    1482:	08 95       	ret
    1484:	5f 3f       	cpi	r21, 0xFF	; 255
    1486:	ac f0       	brlt	.+42     	; 0x14b2 <ldexp+0x68>
    1488:	98 3e       	cpi	r25, 0xE8	; 232
    148a:	9c f0       	brlt	.+38     	; 0x14b2 <ldexp+0x68>
    148c:	bb 27       	eor	r27, r27
    148e:	86 95       	lsr	r24
    1490:	77 95       	ror	r23
    1492:	67 95       	ror	r22
    1494:	b7 95       	ror	r27
    1496:	08 f4       	brcc	.+2      	; 0x149a <ldexp+0x50>
    1498:	b1 60       	ori	r27, 0x01	; 1
    149a:	93 95       	inc	r25
    149c:	c1 f7       	brne	.-16     	; 0x148e <ldexp+0x44>
    149e:	bb 0f       	add	r27, r27
    14a0:	58 f7       	brcc	.-42     	; 0x1478 <ldexp+0x2e>
    14a2:	11 f4       	brne	.+4      	; 0x14a8 <ldexp+0x5e>
    14a4:	60 ff       	sbrs	r22, 0
    14a6:	e8 cf       	rjmp	.-48     	; 0x1478 <ldexp+0x2e>
    14a8:	6f 5f       	subi	r22, 0xFF	; 255
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	8f 4f       	sbci	r24, 0xFF	; 255
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	e3 cf       	rjmp	.-58     	; 0x1478 <ldexp+0x2e>
    14b2:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__fp_szero>
    14b6:	16 f0       	brts	.+4      	; 0x14bc <ldexp+0x72>
    14b8:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__fp_mpack>
    14bc:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_nan>
    14c0:	68 94       	set
    14c2:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_inf>

000014c6 <log>:
    14c6:	0e 94 47 09 	call	0x128e	; 0x128e <__fp_splitA>
    14ca:	a8 f3       	brcs	.-22     	; 0x14b6 <ldexp+0x6c>
    14cc:	99 23       	and	r25, r25
    14ce:	c1 f3       	breq	.-16     	; 0x14c0 <ldexp+0x76>
    14d0:	ae f3       	brts	.-22     	; 0x14bc <ldexp+0x72>
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	1f 93       	push	r17
    14d8:	0f 93       	push	r16
    14da:	ff 92       	push	r15
    14dc:	c9 2f       	mov	r28, r25
    14de:	dd 27       	eor	r29, r29
    14e0:	88 23       	and	r24, r24
    14e2:	2a f0       	brmi	.+10     	; 0x14ee <log+0x28>
    14e4:	21 97       	sbiw	r28, 0x01	; 1
    14e6:	66 0f       	add	r22, r22
    14e8:	77 1f       	adc	r23, r23
    14ea:	88 1f       	adc	r24, r24
    14ec:	da f7       	brpl	.-10     	; 0x14e4 <log+0x1e>
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e8       	ldi	r20, 0x80	; 128
    14f4:	5f eb       	ldi	r21, 0xBF	; 191
    14f6:	9f e3       	ldi	r25, 0x3F	; 63
    14f8:	88 39       	cpi	r24, 0x98	; 152
    14fa:	20 f0       	brcs	.+8      	; 0x1504 <log+0x3e>
    14fc:	80 3e       	cpi	r24, 0xE0	; 224
    14fe:	38 f0       	brcs	.+14     	; 0x150e <log+0x48>
    1500:	21 96       	adiw	r28, 0x01	; 1
    1502:	8f 77       	andi	r24, 0x7F	; 127
    1504:	0e 94 81 07 	call	0xf02	; 0xf02 <__addsf3>
    1508:	ec e7       	ldi	r30, 0x7C	; 124
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <log+0x50>
    150e:	0e 94 81 07 	call	0xf02	; 0xf02 <__addsf3>
    1512:	e9 ea       	ldi	r30, 0xA9	; 169
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__fp_powser>
    151a:	8b 01       	movw	r16, r22
    151c:	be 01       	movw	r22, r28
    151e:	ec 01       	movw	r28, r24
    1520:	fb 2e       	mov	r15, r27
    1522:	6f 57       	subi	r22, 0x7F	; 127
    1524:	71 09       	sbc	r23, r1
    1526:	75 95       	asr	r23
    1528:	77 1f       	adc	r23, r23
    152a:	88 0b       	sbc	r24, r24
    152c:	99 0b       	sbc	r25, r25
    152e:	0e 94 cc 08 	call	0x1198	; 0x1198 <__floatsisf>
    1532:	28 e1       	ldi	r18, 0x18	; 24
    1534:	32 e7       	ldi	r19, 0x72	; 114
    1536:	41 e3       	ldi	r20, 0x31	; 49
    1538:	5f e3       	ldi	r21, 0x3F	; 63
    153a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__mulsf3x>
    153e:	af 2d       	mov	r26, r15
    1540:	98 01       	movw	r18, r16
    1542:	ae 01       	movw	r20, r28
    1544:	ff 90       	pop	r15
    1546:	0f 91       	pop	r16
    1548:	1f 91       	pop	r17
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	0e 94 98 07 	call	0xf30	; 0xf30 <__addsf3x>
    1552:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__fp_round>

00001556 <modf>:
    1556:	fa 01       	movw	r30, r20
    1558:	dc 01       	movw	r26, r24
    155a:	aa 0f       	add	r26, r26
    155c:	bb 1f       	adc	r27, r27
    155e:	9b 01       	movw	r18, r22
    1560:	ac 01       	movw	r20, r24
    1562:	bf 57       	subi	r27, 0x7F	; 127
    1564:	28 f4       	brcc	.+10     	; 0x1570 <modf+0x1a>
    1566:	22 27       	eor	r18, r18
    1568:	33 27       	eor	r19, r19
    156a:	44 27       	eor	r20, r20
    156c:	50 78       	andi	r21, 0x80	; 128
    156e:	20 c0       	rjmp	.+64     	; 0x15b0 <modf+0x5a>
    1570:	b7 51       	subi	r27, 0x17	; 23
    1572:	90 f4       	brcc	.+36     	; 0x1598 <modf+0x42>
    1574:	ab 2f       	mov	r26, r27
    1576:	00 24       	eor	r0, r0
    1578:	46 95       	lsr	r20
    157a:	37 95       	ror	r19
    157c:	27 95       	ror	r18
    157e:	01 1c       	adc	r0, r1
    1580:	a3 95       	inc	r26
    1582:	d2 f3       	brmi	.-12     	; 0x1578 <modf+0x22>
    1584:	00 20       	and	r0, r0
    1586:	71 f0       	breq	.+28     	; 0x15a4 <modf+0x4e>
    1588:	22 0f       	add	r18, r18
    158a:	33 1f       	adc	r19, r19
    158c:	44 1f       	adc	r20, r20
    158e:	b3 95       	inc	r27
    1590:	da f3       	brmi	.-10     	; 0x1588 <modf+0x32>
    1592:	0e d0       	rcall	.+28     	; 0x15b0 <modf+0x5a>
    1594:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__subsf3>
    1598:	61 30       	cpi	r22, 0x01	; 1
    159a:	71 05       	cpc	r23, r1
    159c:	a0 e8       	ldi	r26, 0x80	; 128
    159e:	8a 07       	cpc	r24, r26
    15a0:	b9 46       	sbci	r27, 0x69	; 105
    15a2:	30 f4       	brcc	.+12     	; 0x15b0 <modf+0x5a>
    15a4:	9b 01       	movw	r18, r22
    15a6:	ac 01       	movw	r20, r24
    15a8:	66 27       	eor	r22, r22
    15aa:	77 27       	eor	r23, r23
    15ac:	88 27       	eor	r24, r24
    15ae:	90 78       	andi	r25, 0x80	; 128
    15b0:	30 96       	adiw	r30, 0x00	; 0
    15b2:	21 f0       	breq	.+8      	; 0x15bc <modf+0x66>
    15b4:	20 83       	st	Z, r18
    15b6:	31 83       	std	Z+1, r19	; 0x01
    15b8:	42 83       	std	Z+2, r20	; 0x02
    15ba:	53 83       	std	Z+3, r21	; 0x03
    15bc:	08 95       	ret

000015be <__mulsf3>:
    15be:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__mulsf3x>
    15c2:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__fp_round>
    15c6:	0e 94 20 09 	call	0x1240	; 0x1240 <__fp_pscA>
    15ca:	38 f0       	brcs	.+14     	; 0x15da <__mulsf3+0x1c>
    15cc:	0e 94 27 09 	call	0x124e	; 0x124e <__fp_pscB>
    15d0:	20 f0       	brcs	.+8      	; 0x15da <__mulsf3+0x1c>
    15d2:	95 23       	and	r25, r21
    15d4:	11 f0       	breq	.+4      	; 0x15da <__mulsf3+0x1c>
    15d6:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_inf>
    15da:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_nan>
    15de:	11 24       	eor	r1, r1
    15e0:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__fp_szero>

000015e4 <__mulsf3x>:
    15e4:	0e 94 3f 09 	call	0x127e	; 0x127e <__fp_split3>
    15e8:	70 f3       	brcs	.-36     	; 0x15c6 <__mulsf3+0x8>

000015ea <__mulsf3_pse>:
    15ea:	95 9f       	mul	r25, r21
    15ec:	c1 f3       	breq	.-16     	; 0x15de <__mulsf3+0x20>
    15ee:	95 0f       	add	r25, r21
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	55 1f       	adc	r21, r21
    15f4:	62 9f       	mul	r22, r18
    15f6:	f0 01       	movw	r30, r0
    15f8:	72 9f       	mul	r23, r18
    15fa:	bb 27       	eor	r27, r27
    15fc:	f0 0d       	add	r31, r0
    15fe:	b1 1d       	adc	r27, r1
    1600:	63 9f       	mul	r22, r19
    1602:	aa 27       	eor	r26, r26
    1604:	f0 0d       	add	r31, r0
    1606:	b1 1d       	adc	r27, r1
    1608:	aa 1f       	adc	r26, r26
    160a:	64 9f       	mul	r22, r20
    160c:	66 27       	eor	r22, r22
    160e:	b0 0d       	add	r27, r0
    1610:	a1 1d       	adc	r26, r1
    1612:	66 1f       	adc	r22, r22
    1614:	82 9f       	mul	r24, r18
    1616:	22 27       	eor	r18, r18
    1618:	b0 0d       	add	r27, r0
    161a:	a1 1d       	adc	r26, r1
    161c:	62 1f       	adc	r22, r18
    161e:	73 9f       	mul	r23, r19
    1620:	b0 0d       	add	r27, r0
    1622:	a1 1d       	adc	r26, r1
    1624:	62 1f       	adc	r22, r18
    1626:	83 9f       	mul	r24, r19
    1628:	a0 0d       	add	r26, r0
    162a:	61 1d       	adc	r22, r1
    162c:	22 1f       	adc	r18, r18
    162e:	74 9f       	mul	r23, r20
    1630:	33 27       	eor	r19, r19
    1632:	a0 0d       	add	r26, r0
    1634:	61 1d       	adc	r22, r1
    1636:	23 1f       	adc	r18, r19
    1638:	84 9f       	mul	r24, r20
    163a:	60 0d       	add	r22, r0
    163c:	21 1d       	adc	r18, r1
    163e:	82 2f       	mov	r24, r18
    1640:	76 2f       	mov	r23, r22
    1642:	6a 2f       	mov	r22, r26
    1644:	11 24       	eor	r1, r1
    1646:	9f 57       	subi	r25, 0x7F	; 127
    1648:	50 40       	sbci	r21, 0x00	; 0
    164a:	9a f0       	brmi	.+38     	; 0x1672 <__mulsf3_pse+0x88>
    164c:	f1 f0       	breq	.+60     	; 0x168a <__mulsf3_pse+0xa0>
    164e:	88 23       	and	r24, r24
    1650:	4a f0       	brmi	.+18     	; 0x1664 <__mulsf3_pse+0x7a>
    1652:	ee 0f       	add	r30, r30
    1654:	ff 1f       	adc	r31, r31
    1656:	bb 1f       	adc	r27, r27
    1658:	66 1f       	adc	r22, r22
    165a:	77 1f       	adc	r23, r23
    165c:	88 1f       	adc	r24, r24
    165e:	91 50       	subi	r25, 0x01	; 1
    1660:	50 40       	sbci	r21, 0x00	; 0
    1662:	a9 f7       	brne	.-22     	; 0x164e <__mulsf3_pse+0x64>
    1664:	9e 3f       	cpi	r25, 0xFE	; 254
    1666:	51 05       	cpc	r21, r1
    1668:	80 f0       	brcs	.+32     	; 0x168a <__mulsf3_pse+0xa0>
    166a:	0c 94 07 09 	jmp	0x120e	; 0x120e <__fp_inf>
    166e:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__fp_szero>
    1672:	5f 3f       	cpi	r21, 0xFF	; 255
    1674:	e4 f3       	brlt	.-8      	; 0x166e <__mulsf3_pse+0x84>
    1676:	98 3e       	cpi	r25, 0xE8	; 232
    1678:	d4 f3       	brlt	.-12     	; 0x166e <__mulsf3_pse+0x84>
    167a:	86 95       	lsr	r24
    167c:	77 95       	ror	r23
    167e:	67 95       	ror	r22
    1680:	b7 95       	ror	r27
    1682:	f7 95       	ror	r31
    1684:	e7 95       	ror	r30
    1686:	9f 5f       	subi	r25, 0xFF	; 255
    1688:	c1 f7       	brne	.-16     	; 0x167a <__mulsf3_pse+0x90>
    168a:	fe 2b       	or	r31, r30
    168c:	88 0f       	add	r24, r24
    168e:	91 1d       	adc	r25, r1
    1690:	96 95       	lsr	r25
    1692:	87 95       	ror	r24
    1694:	97 f9       	bld	r25, 7
    1696:	08 95       	ret

00001698 <__fp_mpack>:
    1698:	9f 3f       	cpi	r25, 0xFF	; 255
    169a:	31 f0       	breq	.+12     	; 0x16a8 <__fp_mpack_finite+0xc>

0000169c <__fp_mpack_finite>:
    169c:	91 50       	subi	r25, 0x01	; 1
    169e:	20 f4       	brcc	.+8      	; 0x16a8 <__fp_mpack_finite+0xc>
    16a0:	87 95       	ror	r24
    16a2:	77 95       	ror	r23
    16a4:	67 95       	ror	r22
    16a6:	b7 95       	ror	r27
    16a8:	88 0f       	add	r24, r24
    16aa:	91 1d       	adc	r25, r1
    16ac:	96 95       	lsr	r25
    16ae:	87 95       	ror	r24
    16b0:	97 f9       	bld	r25, 7
    16b2:	08 95       	ret

000016b4 <__moddi3>:
    16b4:	68 94       	set
    16b6:	01 c0       	rjmp	.+2      	; 0x16ba <__divdi3_moddi3>

000016b8 <__divdi3>:
    16b8:	e8 94       	clt

000016ba <__divdi3_moddi3>:
    16ba:	f9 2f       	mov	r31, r25
    16bc:	f1 2b       	or	r31, r17
    16be:	12 f0       	brmi	.+4      	; 0x16c4 <__divdi3_moddi3+0xa>
    16c0:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__udivdi3_umoddi3>
    16c4:	a0 e0       	ldi	r26, 0x00	; 0
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e8 e6       	ldi	r30, 0x68	; 104
    16ca:	fb e0       	ldi	r31, 0x0B	; 11
    16cc:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__prologue_saves__+0xc>
    16d0:	09 2e       	mov	r0, r25
    16d2:	05 94       	asr	r0
    16d4:	22 f4       	brpl	.+8      	; 0x16de <__divdi3_moddi3+0x24>
    16d6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__negdi2>
    16da:	11 23       	and	r17, r17
    16dc:	92 f4       	brpl	.+36     	; 0x1702 <__divdi3_moddi3+0x48>
    16de:	f0 e8       	ldi	r31, 0x80	; 128
    16e0:	0f 26       	eor	r0, r31
    16e2:	ff ef       	ldi	r31, 0xFF	; 255
    16e4:	e0 94       	com	r14
    16e6:	f0 94       	com	r15
    16e8:	00 95       	com	r16
    16ea:	10 95       	com	r17
    16ec:	b0 94       	com	r11
    16ee:	c0 94       	com	r12
    16f0:	d0 94       	com	r13
    16f2:	a1 94       	neg	r10
    16f4:	bf 0a       	sbc	r11, r31
    16f6:	cf 0a       	sbc	r12, r31
    16f8:	df 0a       	sbc	r13, r31
    16fa:	ef 0a       	sbc	r14, r31
    16fc:	ff 0a       	sbc	r15, r31
    16fe:	0f 0b       	sbc	r16, r31
    1700:	1f 0b       	sbc	r17, r31
    1702:	0e 94 99 0b 	call	0x1732	; 0x1732 <__udivmod64>
    1706:	07 fc       	sbrc	r0, 7
    1708:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__negdi2>
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	ec e0       	ldi	r30, 0x0C	; 12
    1712:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__epilogue_restores__+0xc>

00001716 <__umoddi3>:
    1716:	68 94       	set
    1718:	01 c0       	rjmp	.+2      	; 0x171c <__udivdi3_umoddi3>

0000171a <__udivdi3>:
    171a:	e8 94       	clt

0000171c <__udivdi3_umoddi3>:
    171c:	8f 92       	push	r8
    171e:	9f 92       	push	r9
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	0e 94 99 0b 	call	0x1732	; 0x1732 <__udivmod64>
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	9f 90       	pop	r9
    172e:	8f 90       	pop	r8
    1730:	08 95       	ret

00001732 <__udivmod64>:
    1732:	88 24       	eor	r8, r8
    1734:	99 24       	eor	r9, r9
    1736:	f4 01       	movw	r30, r8
    1738:	e4 01       	movw	r28, r8
    173a:	b0 e4       	ldi	r27, 0x40	; 64
    173c:	9f 93       	push	r25
    173e:	aa 27       	eor	r26, r26
    1740:	9a 15       	cp	r25, r10
    1742:	8b 04       	cpc	r8, r11
    1744:	9c 04       	cpc	r9, r12
    1746:	ed 05       	cpc	r30, r13
    1748:	fe 05       	cpc	r31, r14
    174a:	cf 05       	cpc	r28, r15
    174c:	d0 07       	cpc	r29, r16
    174e:	a1 07       	cpc	r26, r17
    1750:	98 f4       	brcc	.+38     	; 0x1778 <__udivmod64+0x46>
    1752:	ad 2f       	mov	r26, r29
    1754:	dc 2f       	mov	r29, r28
    1756:	cf 2f       	mov	r28, r31
    1758:	fe 2f       	mov	r31, r30
    175a:	e9 2d       	mov	r30, r9
    175c:	98 2c       	mov	r9, r8
    175e:	89 2e       	mov	r8, r25
    1760:	98 2f       	mov	r25, r24
    1762:	87 2f       	mov	r24, r23
    1764:	76 2f       	mov	r23, r22
    1766:	65 2f       	mov	r22, r21
    1768:	54 2f       	mov	r21, r20
    176a:	43 2f       	mov	r20, r19
    176c:	32 2f       	mov	r19, r18
    176e:	22 27       	eor	r18, r18
    1770:	b8 50       	subi	r27, 0x08	; 8
    1772:	31 f7       	brne	.-52     	; 0x1740 <__udivmod64+0xe>
    1774:	bf 91       	pop	r27
    1776:	27 c0       	rjmp	.+78     	; 0x17c6 <__udivmod64+0x94>
    1778:	1b 2e       	mov	r1, r27
    177a:	bf 91       	pop	r27
    177c:	bb 27       	eor	r27, r27
    177e:	22 0f       	add	r18, r18
    1780:	33 1f       	adc	r19, r19
    1782:	44 1f       	adc	r20, r20
    1784:	55 1f       	adc	r21, r21
    1786:	66 1f       	adc	r22, r22
    1788:	77 1f       	adc	r23, r23
    178a:	88 1f       	adc	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	88 1c       	adc	r8, r8
    1790:	99 1c       	adc	r9, r9
    1792:	ee 1f       	adc	r30, r30
    1794:	ff 1f       	adc	r31, r31
    1796:	cc 1f       	adc	r28, r28
    1798:	dd 1f       	adc	r29, r29
    179a:	aa 1f       	adc	r26, r26
    179c:	bb 1f       	adc	r27, r27
    179e:	8a 14       	cp	r8, r10
    17a0:	9b 04       	cpc	r9, r11
    17a2:	ec 05       	cpc	r30, r12
    17a4:	fd 05       	cpc	r31, r13
    17a6:	ce 05       	cpc	r28, r14
    17a8:	df 05       	cpc	r29, r15
    17aa:	a0 07       	cpc	r26, r16
    17ac:	b1 07       	cpc	r27, r17
    17ae:	48 f0       	brcs	.+18     	; 0x17c2 <__udivmod64+0x90>
    17b0:	8a 18       	sub	r8, r10
    17b2:	9b 08       	sbc	r9, r11
    17b4:	ec 09       	sbc	r30, r12
    17b6:	fd 09       	sbc	r31, r13
    17b8:	ce 09       	sbc	r28, r14
    17ba:	df 09       	sbc	r29, r15
    17bc:	a0 0b       	sbc	r26, r16
    17be:	b1 0b       	sbc	r27, r17
    17c0:	21 60       	ori	r18, 0x01	; 1
    17c2:	1a 94       	dec	r1
    17c4:	e1 f6       	brne	.-72     	; 0x177e <__udivmod64+0x4c>
    17c6:	2e f4       	brtc	.+10     	; 0x17d2 <__udivmod64+0xa0>
    17c8:	94 01       	movw	r18, r8
    17ca:	af 01       	movw	r20, r30
    17cc:	be 01       	movw	r22, r28
    17ce:	cd 01       	movw	r24, r26
    17d0:	00 0c       	add	r0, r0
    17d2:	08 95       	ret

000017d4 <__negdi2>:
    17d4:	60 95       	com	r22
    17d6:	70 95       	com	r23
    17d8:	80 95       	com	r24
    17da:	90 95       	com	r25
    17dc:	30 95       	com	r19
    17de:	40 95       	com	r20
    17e0:	50 95       	com	r21
    17e2:	21 95       	neg	r18
    17e4:	3f 4f       	sbci	r19, 0xFF	; 255
    17e6:	4f 4f       	sbci	r20, 0xFF	; 255
    17e8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ea:	6f 4f       	sbci	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	8f 4f       	sbci	r24, 0xFF	; 255
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	08 95       	ret

000017f4 <__prologue_saves__>:
    17f4:	2f 92       	push	r2
    17f6:	3f 92       	push	r3
    17f8:	4f 92       	push	r4
    17fa:	5f 92       	push	r5
    17fc:	6f 92       	push	r6
    17fe:	7f 92       	push	r7
    1800:	8f 92       	push	r8
    1802:	9f 92       	push	r9
    1804:	af 92       	push	r10
    1806:	bf 92       	push	r11
    1808:	cf 92       	push	r12
    180a:	df 92       	push	r13
    180c:	ef 92       	push	r14
    180e:	ff 92       	push	r15
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	ca 1b       	sub	r28, r26
    181e:	db 0b       	sbc	r29, r27
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	09 94       	ijmp

0000182c <__epilogue_restores__>:
    182c:	2a 88       	ldd	r2, Y+18	; 0x12
    182e:	39 88       	ldd	r3, Y+17	; 0x11
    1830:	48 88       	ldd	r4, Y+16	; 0x10
    1832:	5f 84       	ldd	r5, Y+15	; 0x0f
    1834:	6e 84       	ldd	r6, Y+14	; 0x0e
    1836:	7d 84       	ldd	r7, Y+13	; 0x0d
    1838:	8c 84       	ldd	r8, Y+12	; 0x0c
    183a:	9b 84       	ldd	r9, Y+11	; 0x0b
    183c:	aa 84       	ldd	r10, Y+10	; 0x0a
    183e:	b9 84       	ldd	r11, Y+9	; 0x09
    1840:	c8 84       	ldd	r12, Y+8	; 0x08
    1842:	df 80       	ldd	r13, Y+7	; 0x07
    1844:	ee 80       	ldd	r14, Y+6	; 0x06
    1846:	fd 80       	ldd	r15, Y+5	; 0x05
    1848:	0c 81       	ldd	r16, Y+4	; 0x04
    184a:	1b 81       	ldd	r17, Y+3	; 0x03
    184c:	aa 81       	ldd	r26, Y+2	; 0x02
    184e:	b9 81       	ldd	r27, Y+1	; 0x01
    1850:	ce 0f       	add	r28, r30
    1852:	d1 1d       	adc	r29, r1
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	ed 01       	movw	r28, r26
    1860:	08 95       	ret

00001862 <__cmpdi2_s8>:
    1862:	00 24       	eor	r0, r0
    1864:	a7 fd       	sbrc	r26, 7
    1866:	00 94       	com	r0
    1868:	2a 17       	cp	r18, r26
    186a:	30 05       	cpc	r19, r0
    186c:	40 05       	cpc	r20, r0
    186e:	50 05       	cpc	r21, r0
    1870:	60 05       	cpc	r22, r0
    1872:	70 05       	cpc	r23, r0
    1874:	80 05       	cpc	r24, r0
    1876:	90 05       	cpc	r25, r0
    1878:	08 95       	ret

0000187a <_exit>:
    187a:	f8 94       	cli

0000187c <__stop_program>:
    187c:	ff cf       	rjmp	.-2      	; 0x187c <__stop_program>
