
Measurement_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000018ea  0000197e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008e  00800074  00800074  00001992  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  000019e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e81  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e7c  00000000  00000000  00003bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000040ff  00000000  00000000  00004a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a4  00000000  00000000  00008b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cfe  00000000  00000000  000090d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f12  00000000  00000000  00009dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000bce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_1>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_4>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__vector_7>
      20:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__vector_8>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_10>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__vector_12>
      34:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__vector_13>
      38:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__vector_14>
      3c:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__vector_15>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ea ee       	ldi	r30, 0xEA	; 234
      ea:	f8 e1       	ldi	r31, 0x18	; 24
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a4 37       	cpi	r26, 0x74	; 116
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	a4 e7       	ldi	r26, 0x74	; 116
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a2 30       	cpi	r26, 0x02	; 2
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 2c 01 	call	0x258	; 0x258 <main>
     10c:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <TIMR0_CTC_CALLBACK_FUNC_ISR>:
	UART_SendByte(ENTER_CHARACHTER);
	
}				
/***The function that will execute in CTC Timer ISR***/
static void TIMR0_CTC_CALLBACK_FUNC_ISR(void)
{
     114:	cf 92       	push	r12
     116:	df 92       	push	r13
     118:	ef 92       	push	r14
     11a:	ff 92       	push	r15
     11c:	cf 93       	push	r28
     11e:	df 93       	push	r29
     120:	00 d0       	rcall	.+0      	; 0x122 <TIMR0_CTC_CALLBACK_FUNC_ISR+0xe>
     122:	00 d0       	rcall	.+0      	; 0x124 <TIMR0_CTC_CALLBACK_FUNC_ISR+0x10>
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
    /***Incrementing miliseconds***/
	f64_Miliseconds++;
     128:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <f64_Miliseconds>
     12c:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <f64_Miliseconds+0x1>
     130:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <f64_Miliseconds+0x2>
     134:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <f64_Miliseconds+0x3>
     138:	89 83       	std	Y+1, r24	; 0x01
     13a:	9a 83       	std	Y+2, r25	; 0x02
     13c:	ab 83       	std	Y+3, r26	; 0x03
     13e:	bc 83       	std	Y+4, r27	; 0x04
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	40 e8       	ldi	r20, 0x80	; 128
     146:	5f e3       	ldi	r21, 0x3F	; 63
     148:	bc 01       	movw	r22, r24
     14a:	cd 01       	movw	r24, r26
     14c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
     150:	46 2f       	mov	r20, r22
     152:	57 2f       	mov	r21, r23
     154:	68 2f       	mov	r22, r24
     156:	79 2f       	mov	r23, r25
     158:	40 93 7e 00 	sts	0x007E, r20	; 0x80007e <f64_Miliseconds>
     15c:	50 93 7f 00 	sts	0x007F, r21	; 0x80007f <f64_Miliseconds+0x1>
     160:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <f64_Miliseconds+0x2>
     164:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <f64_Miliseconds+0x3>
	/**Here we made the calculation of the distance in m**/
	f64_Distances_In_M+=(float64_t)(sgu64_updated_speed/1000.0);
     168:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     16c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     170:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__data_start+0x2>
     174:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__data_start+0x3>
     178:	89 83       	std	Y+1, r24	; 0x01
     17a:	9a 83       	std	Y+2, r25	; 0x02
     17c:	ab 83       	std	Y+3, r26	; 0x03
     17e:	bc 83       	std	Y+4, r27	; 0x04
     180:	c0 90 76 00 	lds	r12, 0x0076	; 0x800076 <f64_Distances_In_M>
     184:	d0 90 77 00 	lds	r13, 0x0077	; 0x800077 <f64_Distances_In_M+0x1>
     188:	e0 90 78 00 	lds	r14, 0x0078	; 0x800078 <f64_Distances_In_M+0x2>
     18c:	f0 90 79 00 	lds	r15, 0x0079	; 0x800079 <f64_Distances_In_M+0x3>
     190:	bc 01       	movw	r22, r24
     192:	cd 01       	movw	r24, r26
     194:	0e 94 00 09 	call	0x1200	; 0x1200 <__floatunsisf>
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	4a e7       	ldi	r20, 0x7A	; 122
     19e:	54 e4       	ldi	r21, 0x44	; 68
     1a0:	69 83       	std	Y+1, r22	; 0x01
     1a2:	7a 83       	std	Y+2, r23	; 0x02
     1a4:	8b 83       	std	Y+3, r24	; 0x03
     1a6:	9c 83       	std	Y+4, r25	; 0x04
     1a8:	69 81       	ldd	r22, Y+1	; 0x01
     1aa:	7a 81       	ldd	r23, Y+2	; 0x02
     1ac:	8b 81       	ldd	r24, Y+3	; 0x03
     1ae:	9c 81       	ldd	r25, Y+4	; 0x04
     1b0:	0e 94 23 08 	call	0x1046	; 0x1046 <__divsf3>
     1b4:	a7 01       	movw	r20, r14
     1b6:	96 01       	movw	r18, r12
     1b8:	69 83       	std	Y+1, r22	; 0x01
     1ba:	7a 83       	std	Y+2, r23	; 0x02
     1bc:	8b 83       	std	Y+3, r24	; 0x03
     1be:	9c 83       	std	Y+4, r25	; 0x04
     1c0:	69 81       	ldd	r22, Y+1	; 0x01
     1c2:	7a 81       	ldd	r23, Y+2	; 0x02
     1c4:	8b 81       	ldd	r24, Y+3	; 0x03
     1c6:	9c 81       	ldd	r25, Y+4	; 0x04
     1c8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
     1cc:	46 2f       	mov	r20, r22
     1ce:	57 2f       	mov	r21, r23
     1d0:	68 2f       	mov	r22, r24
     1d2:	79 2f       	mov	r23, r25
     1d4:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <f64_Distances_In_M>
     1d8:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <f64_Distances_In_M+0x1>
     1dc:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <f64_Distances_In_M+0x2>
     1e0:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <f64_Distances_In_M+0x3>
	/**Measurment of time in seconds***/
	f64_Time_In_Seconds=f64_Miliseconds/1000.0;	
     1e4:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <f64_Miliseconds>
     1e8:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <f64_Miliseconds+0x1>
     1ec:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <f64_Miliseconds+0x2>
     1f0:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <f64_Miliseconds+0x3>
     1f4:	89 83       	std	Y+1, r24	; 0x01
     1f6:	9a 83       	std	Y+2, r25	; 0x02
     1f8:	ab 83       	std	Y+3, r26	; 0x03
     1fa:	bc 83       	std	Y+4, r27	; 0x04
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	4a e7       	ldi	r20, 0x7A	; 122
     202:	54 e4       	ldi	r21, 0x44	; 68
     204:	bc 01       	movw	r22, r24
     206:	cd 01       	movw	r24, r26
     208:	0e 94 23 08 	call	0x1046	; 0x1046 <__divsf3>
     20c:	46 2f       	mov	r20, r22
     20e:	57 2f       	mov	r21, r23
     210:	68 2f       	mov	r22, r24
     212:	79 2f       	mov	r23, r25
     214:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <f64_Time_In_Seconds>
     218:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <f64_Time_In_Seconds+0x1>
     21c:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <f64_Time_In_Seconds+0x2>
     220:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <f64_Time_In_Seconds+0x3>
}
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	08 95       	ret

0000023a <UART_SLAVE_TRANS_FUNCTION_ISR>:
	SPI_RecieveByte(&sgu64_updated_speed);
}
/***This is function is called back in ISR OF UART Transmission finished***/
void UART_SLAVE_TRANS_FUNCTION_ISR(void)
{
	sgu8_UART_Interrupt_Flag_trans=1U;
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
/* 	DIO_INIT_Pin(0,1);
	DIO_toggle_Pin(0);  */	

}
     240:	08 95       	ret

00000242 <SPI_SLAVE_REC_FUNCTION_ISR>:
	SPI_RecieveByte(&sgu64_updated_speed);
     242:	80 e6       	ldi	r24, 0x60	; 96
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 b3 06 	call	0xd66	; 0xd66 <SPI_RecieveByte>
}
     24a:	08 95       	ret

0000024c <__vector_1>:
{
     24c:	8f 93       	push	r24
    sgu8_MU_Switch_flag=1U;
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <sgu8_MU_Switch_flag>
}
     254:	8f 91       	pop	r24
     256:	18 95       	reti

00000258 <main>:
int main()
{
     258:	00 d0       	rcall	.+0      	; 0x25a <main+0x2>
     25a:	00 d0       	rcall	.+0      	; 0x25c <main+0x4>
     25c:	00 d0       	rcall	.+0      	; 0x25e <main+0x6>
     25e:	0f 92       	push	r0
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
    uint8_t u8_MU_General_State=MU_Sending_Velocity;
	uint8_t u8_MU_Sending_Velocity_State=MU_SEND_Velocity_CHARACTER;
	uint8_t u8_MU_Sending_Distance_State=MU_SEND_Distance_CHARACTER;
	uint8_t u8_MU_Sending_Time_State=MU_SEND_Time_CHARACTER;	
	/**Initailize SPI by SPI Configuration**/
	SPI_Init(&spi);
     264:	8f e6       	ldi	r24, 0x6F	; 111
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 16 06 	call	0xc2c	; 0xc2c <SPI_Init>
	/**Initalize setcall back for spi ISR**/
	SPI_Trans_SetCallBack(SPI_SLAVE_REC_FUNCTION_ISR);
     26c:	81 e2       	ldi	r24, 0x21	; 33
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	0e 94 0f 06 	call	0xc1e	; 0xc1e <SPI_Trans_SetCallBack>
	/**Initalization fo Timer**/
    Timer_Init(&Measurement_ECU_TIMER_Init_Config);
     274:	8b e6       	ldi	r24, 0x6B	; 107
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 98 04 	call	0x930	; 0x930 <Timer_Init>
	/***Start the timer to count until it reaches 1 mili to measure at each mili the velocity and the new distance***/
	Timer_Start(TIMER0,Nothing_passed,TIMR0_CTC_CALLBACK_FUNC_ISR);
     27c:	4a e8       	ldi	r20, 0x8A	; 138
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Timer_Start>
	/**Initalize UART by configuration structure***/
	UART_Init(&Measurement_ECU_TX_UART_CONFIG);
     28a:	84 e6       	ldi	r24, 0x64	; 100
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 07 04 	call	0x80e	; 0x80e <UART_Init>
	/**Initalize setcall back for UART ISR**/
	UART_Trans_SetCallBack(UART_SLAVE_TRANS_FUNCTION_ISR);
     292:	8d e1       	ldi	r24, 0x1D	; 29
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0e 94 71 04 	call	0x8e2	; 0x8e2 <UART_Trans_SetCallBack>
	/**Initalize GPIO pin as input for INT0**/
    DIO_INIT_Pin(INT0_PIN,INPUT);
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	8a e1       	ldi	r24, 0x1A	; 26
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INIT_Pin>
	/**Initailize INT0 as external interrupt falling edge**/
	ENABLE_EXTERNAL_INTERRUPT_0(FAILING);
     2a6:	85 b7       	in	r24, 0x35	; 53
     2a8:	82 60       	ori	r24, 0x02	; 2
     2aa:	85 bf       	out	0x35, r24	; 53
     2ac:	8b b7       	in	r24, 0x3b	; 59
     2ae:	80 64       	ori	r24, 0x40	; 64
     2b0:	8b bf       	out	0x3b, r24	; 59
	uint8_t u8_MU_Sending_Time_State=MU_SEND_Time_CHARACTER;	
     2b2:	00 e1       	ldi	r16, 0x10	; 16
	uint8_t u8_MU_Sending_Distance_State=MU_SEND_Distance_CHARACTER;
     2b4:	18 e0       	ldi	r17, 0x08	; 8
	uint8_t u8_MU_Sending_Velocity_State=MU_SEND_Velocity_CHARACTER;
     2b6:	82 e0       	ldi	r24, 0x02	; 2
     2b8:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t u8_MU_General_State=MU_Sending_Velocity;
     2ba:	91 e0       	ldi	r25, 0x01	; 1
     2bc:	9e 83       	std	Y+6, r25	; 0x06
    uint8_t u8_MU_First_Byte_Trans_Flag=1U;
     2be:	a1 e0       	ldi	r26, 0x01	; 1
     2c0:	ad 83       	std	Y+5, r26	; 0x05
	uint8_t *pu8_INT_STRING=NullPointer;
     2c2:	f1 2c       	mov	r15, r1
     2c4:	e1 2c       	mov	r14, r1
								
								if(sgu8_UART_Interrupt_Flag_trans==1U)
								{
									UART_SendByte(SPACE_CHARACHTER);
									u8_MU_Sending_Time_State=MU_SEND_Time_CHARACTER;
									u8_MU_General_State=MU_Sending_DOT;										
     2c6:	0f 2e       	mov	r0, r31
     2c8:	f4 e1       	ldi	r31, 0x14	; 20
     2ca:	2f 2e       	mov	r2, r31
     2cc:	f0 2d       	mov	r31, r0
									u8_MU_Sending_Time_State=MU_SEND_Time_EQUAL_CHARACTER;
     2ce:	0f 2e       	mov	r0, r31
     2d0:	f1 e1       	ldi	r31, 0x11	; 17
     2d2:	3f 2e       	mov	r3, r31
     2d4:	f0 2d       	mov	r31, r0
								u8_MU_Sending_Velocity_State=MU_SEND_Velocity_SPACE;
     2d6:	0f 2e       	mov	r0, r31
     2d8:	f5 e0       	ldi	r31, 0x05	; 5
     2da:	4f 2e       	mov	r4, r31
     2dc:	f0 2d       	mov	r31, r0
								u8_MU_Sending_Velocity_State=MU_SEND_Velocity_COMMA;								
     2de:	0f 2e       	mov	r0, r31
     2e0:	f6 e0       	ldi	r31, 0x06	; 6
     2e2:	5f 2e       	mov	r5, r31
     2e4:	f0 2d       	mov	r31, r0
								u8_MU_General_State=MU_Sending_Distance;																				
     2e6:	0f 2e       	mov	r0, r31
     2e8:	f7 e0       	ldi	r31, 0x07	; 7
     2ea:	6f 2e       	mov	r6, r31
     2ec:	f0 2d       	mov	r31, r0
									u8_MU_Sending_Velocity_State=MU_SEND_Velocity_EQUAL_CHARACTER;										
     2ee:	0f 2e       	mov	r0, r31
     2f0:	f3 e0       	ldi	r31, 0x03	; 3
     2f2:	7f 2e       	mov	r7, r31
     2f4:	f0 2d       	mov	r31, r0
     2f6:	60 c1       	rjmp	.+704    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
								u8_MU_Sending_Velocity_State=MU_SEND_Velocity_SPACE;
     2f8:	4f 82       	std	Y+7, r4	; 0x07
     2fa:	5e c1       	rjmp	.+700    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
								u8_MU_Sending_Distance_State=MU_SEND_Distance_SPACE;
     2fc:	1c e0       	ldi	r17, 0x0C	; 12
     2fe:	5c c1       	rjmp	.+696    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
									u8_MU_Sending_Time_State=MU_SEND_Time_SPACE;
     300:	09 e0       	ldi	r16, 0x09	; 9
     302:	5a c1       	rjmp	.+692    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
        	switch( u8_MU_General_State )
     304:	b1 30       	cpi	r27, 0x01	; 1
     306:	d1 f0       	breq	.+52     	; 0x33c <main+0xe4>
     308:	b7 30       	cpi	r27, 0x07	; 7
     30a:	09 f0       	breq	.+2      	; 0x30e <main+0xb6>
     30c:	55 c1       	rjmp	.+682    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
					switch( u8_MU_Sending_Distance_State )
     30e:	1b 30       	cpi	r17, 0x0B	; 11
     310:	09 f4       	brne	.+2      	; 0x314 <main+0xbc>
     312:	cf c0       	rjmp	.+414    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     314:	08 f0       	brcs	.+2      	; 0x318 <main+0xc0>
     316:	8b c0       	rjmp	.+278    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     318:	18 30       	cpi	r17, 0x08	; 8
     31a:	09 f4       	brne	.+2      	; 0x31e <main+0xc6>
     31c:	9c c0       	rjmp	.+312    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     31e:	1a 30       	cpi	r17, 0x0A	; 10
     320:	09 f0       	breq	.+2      	; 0x324 <main+0xcc>
     322:	4a c1       	rjmp	.+660    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
							if(sgu8_UART_Interrupt_Flag_trans==1U)
     324:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     328:	81 30       	cpi	r24, 0x01	; 1
     32a:	09 f0       	breq	.+2      	; 0x32e <main+0xd6>
     32c:	45 c1       	rjmp	.+650    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
								UART_SendByte('=');
     32e:	8d e3       	ldi	r24, 0x3D	; 61
     330:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
								sgu8_UART_Interrupt_Flag_trans=0U;
     334:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
								u8_MU_Sending_Distance_State=MU_SEND_Distance_DATA;
     338:	1b e0       	ldi	r17, 0x0B	; 11
     33a:	3e c1       	rjmp	.+636    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
					switch( u8_MU_Sending_Velocity_State )
     33c:	ff 81       	ldd	r31, Y+7	; 0x07
     33e:	f4 30       	cpi	r31, 0x04	; 4
     340:	09 f4       	brne	.+2      	; 0x344 <main+0xec>
     342:	55 c0       	rjmp	.+170    	; 0x3ee <main+0x196>
     344:	98 f4       	brcc	.+38     	; 0x36c <main+0x114>
     346:	f2 30       	cpi	r31, 0x02	; 2
     348:	31 f1       	breq	.+76     	; 0x396 <main+0x13e>
     34a:	f3 30       	cpi	r31, 0x03	; 3
     34c:	09 f0       	breq	.+2      	; 0x350 <main+0xf8>
     34e:	34 c1       	rjmp	.+616    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
							if(sgu8_UART_Interrupt_Flag_trans==1U)
     350:	d0 90 74 00 	lds	r13, 0x0074	; 0x800074 <__data_end>
     354:	e1 e0       	ldi	r30, 0x01	; 1
     356:	de 12       	cpse	r13, r30
     358:	2f c1       	rjmp	.+606    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
								UART_SendByte('=');
     35a:	8d e3       	ldi	r24, 0x3D	; 61
     35c:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
								sgu8_UART_Interrupt_Flag_trans=0U;
     360:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
     364:	de 82       	std	Y+6, r13	; 0x06
								u8_MU_Sending_Velocity_State=MU_SEND_Velocity_DATA;										
     366:	f4 e0       	ldi	r31, 0x04	; 4
     368:	ff 83       	std	Y+7, r31	; 0x07
     36a:	26 c1       	rjmp	.+588    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     36c:	8f 81       	ldd	r24, Y+7	; 0x07
     36e:	85 30       	cpi	r24, 0x05	; 5
     370:	09 f4       	brne	.+2      	; 0x374 <main+0x11c>
     372:	50 c0       	rjmp	.+160    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     374:	86 30       	cpi	r24, 0x06	; 6
     376:	09 f0       	breq	.+2      	; 0x37a <main+0x122>
     378:	1f c1       	rjmp	.+574    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
							if(sgu8_UART_Interrupt_Flag_trans==1U)
     37a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     37e:	81 30       	cpi	r24, 0x01	; 1
     380:	09 f0       	breq	.+2      	; 0x384 <main+0x12c>
     382:	1a c1       	rjmp	.+564    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
								UART_SendByte(',');
     384:	8c e2       	ldi	r24, 0x2C	; 44
     386:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
								sgu8_UART_Interrupt_Flag_trans=0U;										
     38a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
								u8_MU_Sending_Velocity_State=MU_SEND_Velocity_CHARACTER;
     38e:	82 e0       	ldi	r24, 0x02	; 2
     390:	8f 83       	std	Y+7, r24	; 0x07
								u8_MU_General_State=MU_Sending_Distance;																				
     392:	6e 82       	std	Y+6, r6	; 0x06
     394:	11 c1       	rjmp	.+546    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
							pu8_INT_STRING=TransformIntToString(sgu64_updated_speed);
     396:	80 90 60 00 	lds	r8, 0x0060	; 0x800060 <__data_start>
     39a:	90 90 61 00 	lds	r9, 0x0061	; 0x800061 <__data_start+0x1>
     39e:	a0 90 62 00 	lds	r10, 0x0062	; 0x800062 <__data_start+0x2>
     3a2:	b0 90 63 00 	lds	r11, 0x0063	; 0x800063 <__data_start+0x3>
     3a6:	28 2d       	mov	r18, r8
     3a8:	39 2d       	mov	r19, r9
     3aa:	4a 2d       	mov	r20, r10
     3ac:	5b 2d       	mov	r21, r11
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 ee 06 	call	0xddc	; 0xddc <TransformIntToString>
     3ba:	e8 2e       	mov	r14, r24
     3bc:	f9 2e       	mov	r15, r25
                            if(u8_MU_First_Byte_Trans_Flag==1U)
     3be:	9d 81       	ldd	r25, Y+5	; 0x05
     3c0:	91 30       	cpi	r25, 0x01	; 1
     3c2:	69 f0       	breq	.+26     	; 0x3de <main+0x186>
								if(sgu8_UART_Interrupt_Flag_trans==1U)
     3c4:	d0 90 74 00 	lds	r13, 0x0074	; 0x800074 <__data_end>
     3c8:	b1 e0       	ldi	r27, 0x01	; 1
     3ca:	db 12       	cpse	r13, r27
     3cc:	f5 c0       	rjmp	.+490    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
									UART_SendByte('V');
     3ce:	86 e5       	ldi	r24, 0x56	; 86
     3d0:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
									sgu8_UART_Interrupt_Flag_trans=0U;
     3d4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
									u8_MU_Sending_Velocity_State=MU_SEND_Velocity_EQUAL_CHARACTER;										
     3d8:	de 82       	std	Y+6, r13	; 0x06
     3da:	7f 82       	std	Y+7, r7	; 0x07
     3dc:	ed c0       	rjmp	.+474    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
								UART_SendByte('V');		
     3de:	86 e5       	ldi	r24, 0x56	; 86
     3e0:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
								u8_MU_Sending_Velocity_State=MU_SEND_Velocity_EQUAL_CHARACTER;									
     3e4:	ad 81       	ldd	r26, Y+5	; 0x05
     3e6:	ae 83       	std	Y+6, r26	; 0x06
     3e8:	7f 82       	std	Y+7, r7	; 0x07
                                u8_MU_First_Byte_Trans_Flag=0U;	
     3ea:	1d 82       	std	Y+5, r1	; 0x05
     3ec:	e5 c0       	rjmp	.+458    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     						if(*pu8_INT_STRING)
     3ee:	d7 01       	movw	r26, r14
     3f0:	8c 91       	ld	r24, X
     3f2:	88 23       	and	r24, r24
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <main+0x1a0>
     3f6:	80 cf       	rjmp	.-256    	; 0x2f8 <main+0xa0>
								if(sgu8_UART_Interrupt_Flag_trans==1U)
     3f8:	d0 90 74 00 	lds	r13, 0x0074	; 0x800074 <__data_end>
     3fc:	b1 e0       	ldi	r27, 0x01	; 1
     3fe:	db 12       	cpse	r13, r27
     400:	db c0       	rjmp	.+438    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
                                    UART_SendByte(*pu8_INT_STRING);									
     402:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
									sgu8_UART_Interrupt_Flag_trans=0U;
     406:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
									pu8_INT_STRING++;
     40a:	ef ef       	ldi	r30, 0xFF	; 255
     40c:	ee 1a       	sub	r14, r30
     40e:	fe 0a       	sbc	r15, r30
     410:	de 82       	std	Y+6, r13	; 0x06
     412:	d2 c0       	rjmp	.+420    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
							if(sgu8_UART_Interrupt_Flag_trans==1U)
     414:	d0 90 74 00 	lds	r13, 0x0074	; 0x800074 <__data_end>
     418:	f1 e0       	ldi	r31, 0x01	; 1
     41a:	df 12       	cpse	r13, r31
     41c:	cd c0       	rjmp	.+410    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
                                UART_SendByte(SPACE_CHARACHTER);						
     41e:	80 e2       	ldi	r24, 0x20	; 32
     420:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
								sgu8_UART_Interrupt_Flag_trans=0U;
     424:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
     428:	de 82       	std	Y+6, r13	; 0x06
								u8_MU_Sending_Velocity_State=MU_SEND_Velocity_COMMA;								
     42a:	5f 82       	std	Y+7, r5	; 0x07
     42c:	c5 c0       	rjmp	.+394    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     42e:	1c 30       	cpi	r17, 0x0C	; 12
     430:	09 f4       	brne	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	51 c0       	rjmp	.+162    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     434:	1d 30       	cpi	r17, 0x0D	; 13
     436:	09 f0       	breq	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     438:	bf c0       	rjmp	.+382    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
							if(sgu8_UART_Interrupt_Flag_trans==1U)
     43a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	09 f0       	breq	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     442:	ba c0       	rjmp	.+372    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
								UART_SendByte(',');
     444:	8c e2       	ldi	r24, 0x2C	; 44
     446:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
								sgu8_UART_Interrupt_Flag_trans=0U;
     44a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
								u8_MU_Sending_Distance_State=MU_SEND_Distance_CHARACTER;
     44e:	18 e0       	ldi	r17, 0x08	; 8
								u8_MU_General_State=MU_Sending_Time;
     450:	ef e0       	ldi	r30, 0x0F	; 15
     452:	ee 83       	std	Y+6, r30	; 0x06
     454:	b1 c0       	rjmp	.+354    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
							pu8_INT_STRING=TransformIntToString((uint64_t)f64_Distances_In_M);	
     456:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <f64_Distances_In_M>
     45a:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <f64_Distances_In_M+0x1>
     45e:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <f64_Distances_In_M+0x2>
     462:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <f64_Distances_In_M+0x3>
     466:	89 83       	std	Y+1, r24	; 0x01
     468:	9a 83       	std	Y+2, r25	; 0x02
     46a:	ab 83       	std	Y+3, r26	; 0x03
     46c:	bc 83       	std	Y+4, r27	; 0x04
     46e:	bc 01       	movw	r22, r24
     470:	cd 01       	movw	r24, r26
     472:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__fixunssfsi>
     476:	69 83       	std	Y+1, r22	; 0x01
     478:	7a 83       	std	Y+2, r23	; 0x02
     47a:	8b 83       	std	Y+3, r24	; 0x03
     47c:	9c 83       	std	Y+4, r25	; 0x04
     47e:	4b 01       	movw	r8, r22
     480:	5c 01       	movw	r10, r24
     482:	26 2f       	mov	r18, r22
     484:	39 2d       	mov	r19, r9
     486:	48 2f       	mov	r20, r24
     488:	5b 2d       	mov	r21, r11
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 ee 06 	call	0xddc	; 0xddc <TransformIntToString>
     496:	e8 2e       	mov	r14, r24
     498:	f9 2e       	mov	r15, r25
							if(sgu8_UART_Interrupt_Flag_trans==1U)
     49a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	09 f0       	breq	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4a2:	8a c0       	rjmp	.+276    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
								UART_SendByte('D');
     4a4:	84 e4       	ldi	r24, 0x44	; 68
     4a6:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
								sgu8_UART_Interrupt_Flag_trans=0U;
     4aa:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
								u8_MU_Sending_Distance_State=MU_SEND_Distance_EQUAL_CHARACTER;										
     4ae:	1a e0       	ldi	r17, 0x0A	; 10
     4b0:	83 c0       	rjmp	.+262    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     						if(*pu8_INT_STRING)
     4b2:	d7 01       	movw	r26, r14
     4b4:	8c 91       	ld	r24, X
     4b6:	88 23       	and	r24, r24
     4b8:	09 f4       	brne	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4ba:	20 cf       	rjmp	.-448    	; 0x2fc <main+0xa4>
								if(sgu8_UART_Interrupt_Flag_trans==1U)
     4bc:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
     4c0:	91 30       	cpi	r25, 0x01	; 1
     4c2:	09 f0       	breq	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c4:	79 c0       	rjmp	.+242    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
									UART_SendByte(*pu8_INT_STRING);	
     4c6:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
									pu8_INT_STRING++;
     4ca:	bf ef       	ldi	r27, 0xFF	; 255
     4cc:	eb 1a       	sub	r14, r27
     4ce:	fb 0a       	sbc	r15, r27
									sgu8_UART_Interrupt_Flag_trans=0U;
     4d0:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
     4d4:	71 c0       	rjmp	.+226    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
							if(sgu8_UART_Interrupt_Flag_trans==1U)
     4d6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	09 f0       	breq	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
     4de:	6c c0       	rjmp	.+216    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
                                UART_SendByte(SPACE_CHARACHTER);								
     4e0:	80 e2       	ldi	r24, 0x20	; 32
     4e2:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
								sgu8_UART_Interrupt_Flag_trans=0U;
     4e6:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
								u8_MU_Sending_Distance_State=MU_SEND_Distance_COMMA;
     4ea:	1d e0       	ldi	r17, 0x0D	; 13
     4ec:	65 c0       	rjmp	.+202    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
						switch( u8_MU_Sending_Time_State )
     4ee:	01 31       	cpi	r16, 0x11	; 17
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f2:	47 c0       	rjmp	.+142    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     4f4:	98 f5       	brcc	.+102    	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     4f6:	09 30       	cpi	r16, 0x09	; 9
     4f8:	09 f4       	brne	.+2      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4fa:	4e c0       	rjmp	.+156    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     4fc:	00 31       	cpi	r16, 0x10	; 16
     4fe:	09 f0       	breq	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     500:	5b c0       	rjmp	.+182    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
								pu8_INT_STRING=TransformIntToString((uint64_t)f64_Time_In_Seconds);
     502:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <f64_Time_In_Seconds>
     506:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <f64_Time_In_Seconds+0x1>
     50a:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <f64_Time_In_Seconds+0x2>
     50e:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <f64_Time_In_Seconds+0x3>
     512:	89 83       	std	Y+1, r24	; 0x01
     514:	9a 83       	std	Y+2, r25	; 0x02
     516:	ab 83       	std	Y+3, r26	; 0x03
     518:	bc 83       	std	Y+4, r27	; 0x04
     51a:	bc 01       	movw	r22, r24
     51c:	cd 01       	movw	r24, r26
     51e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__fixunssfsi>
     522:	69 83       	std	Y+1, r22	; 0x01
     524:	7a 83       	std	Y+2, r23	; 0x02
     526:	8b 83       	std	Y+3, r24	; 0x03
     528:	9c 83       	std	Y+4, r25	; 0x04
     52a:	4b 01       	movw	r8, r22
     52c:	5c 01       	movw	r10, r24
     52e:	26 2f       	mov	r18, r22
     530:	39 2d       	mov	r19, r9
     532:	48 2f       	mov	r20, r24
     534:	5b 2d       	mov	r21, r11
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 ee 06 	call	0xddc	; 0xddc <TransformIntToString>
     542:	e8 2e       	mov	r14, r24
     544:	f9 2e       	mov	r15, r25
								if(sgu8_UART_Interrupt_Flag_trans==1U)
     546:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     54a:	81 30       	cpi	r24, 0x01	; 1
     54c:	a9 f5       	brne	.+106    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
									UART_SendByte('T');	
     54e:	84 e5       	ldi	r24, 0x54	; 84
     550:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
									sgu8_UART_Interrupt_Flag_trans=0U;
     554:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
									u8_MU_Sending_Time_State=MU_SEND_Time_EQUAL_CHARACTER;
     558:	03 2d       	mov	r16, r3
     55a:	2e c0       	rjmp	.+92     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     55c:	02 31       	cpi	r16, 0x12	; 18
     55e:	61 f5       	brne	.+88     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
  								if(*pu8_INT_STRING)
     560:	d7 01       	movw	r26, r14
     562:	8c 91       	ld	r24, X
     564:	88 23       	and	r24, r24
     566:	09 f4       	brne	.+2      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     568:	cb ce       	rjmp	.-618    	; 0x300 <main+0xa8>
									if(sgu8_UART_Interrupt_Flag_trans==1U)
     56a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
     56e:	91 30       	cpi	r25, 0x01	; 1
     570:	19 f5       	brne	.+70     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
										UART_SendByte(*pu8_INT_STRING);	
     572:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
										pu8_INT_STRING++;
     576:	bf ef       	ldi	r27, 0xFF	; 255
     578:	eb 1a       	sub	r14, r27
     57a:	fb 0a       	sbc	r15, r27
										sgu8_UART_Interrupt_Flag_trans=0U;
     57c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
     580:	1b c0       	rjmp	.+54     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
								if(sgu8_UART_Interrupt_Flag_trans==1U)
     582:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	b9 f4       	brne	.+46     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
									UART_SendByte('=');
     58a:	8d e3       	ldi	r24, 0x3D	; 61
     58c:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
									sgu8_UART_Interrupt_Flag_trans=0U;
     590:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
									u8_MU_Sending_Time_State=MU_SEND_Time_DATA;
     594:	02 e1       	ldi	r16, 0x12	; 18
     596:	10 c0       	rjmp	.+32     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
								if(sgu8_UART_Interrupt_Flag_trans==1U)
     598:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     59c:	81 30       	cpi	r24, 0x01	; 1
     59e:	61 f4       	brne	.+24     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
									UART_SendByte(SPACE_CHARACHTER);
     5a0:	80 e2       	ldi	r24, 0x20	; 32
     5a2:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
									sgu8_UART_Interrupt_Flag_trans=0U;
     5a6:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
									u8_MU_Sending_Time_State=MU_SEND_Time_CHARACTER;
     5aa:	00 e1       	ldi	r16, 0x10	; 16
									u8_MU_General_State=MU_Sending_DOT;										
     5ac:	2e 82       	std	Y+6, r2	; 0x06
     5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
				}
				break;
				case MU_Sending_DOT:
				{
					
					if(sgu8_UART_Interrupt_Flag_trans==1U)
     5b0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     5b4:	81 30       	cpi	r24, 0x01	; 1
     5b6:	89 f1       	breq	.+98     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
       if(1U==sgu8_MU_Switch_flag)
     5b8:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <sgu8_MU_Switch_flag>
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
        	switch( u8_MU_General_State )
     5c0:	be 81       	ldd	r27, Y+6	; 0x06
     5c2:	bf 30       	cpi	r27, 0x0F	; 15
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
     5c6:	93 cf       	rjmp	.-218    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     5c8:	08 f4       	brcc	.+2      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5ca:	9c ce       	rjmp	.-712    	; 0x304 <main+0xac>
     5cc:	ee 81       	ldd	r30, Y+6	; 0x06
     5ce:	e4 31       	cpi	r30, 0x14	; 20
     5d0:	79 f3       	breq	.-34     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5d2:	e5 31       	cpi	r30, 0x15	; 21
     5d4:	89 f7       	brne	.-30     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
					
				}
				break;
				case MU_Sending_Enter:
				{
					if(sgu8_UART_Interrupt_Flag_trans==1U)
     5d6:	d0 90 74 00 	lds	r13, 0x0074	; 0x800074 <__data_end>
     5da:	f1 e0       	ldi	r31, 0x01	; 1
     5dc:	df 12       	cpse	r13, r31
     5de:	ec cf       	rjmp	.-40     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
					{
						UART_SendByte(ENTER_CHARACHTER);
     5e0:	8d e0       	ldi	r24, 0x0D	; 13
     5e2:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
						/**Reset Flag of switch**/
						sgu8_MU_Switch_flag=0U;		  
     5e6:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <sgu8_MU_Switch_flag>
						/***let the values of Distance and time equal zero**/
						f64_Distances_In_M=0U;
     5ea:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <f64_Distances_In_M>
     5ee:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <f64_Distances_In_M+0x1>
     5f2:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <f64_Distances_In_M+0x2>
     5f6:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <f64_Distances_In_M+0x3>
						/* Time_In_Seconds=0U; */
						f64_Miliseconds=0U;
     5fa:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <f64_Miliseconds>
     5fe:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <f64_Miliseconds+0x1>
     602:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <f64_Miliseconds+0x2>
     606:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <f64_Miliseconds+0x3>
						u8_MU_General_State=MU_Sending_Velocity;
						u8_MU_Sending_Velocity_State=MU_SEND_Velocity_CHARACTER;
						u8_MU_Sending_Distance_State=MU_SEND_Distance_CHARACTER;
						u8_MU_Sending_Time_State=MU_SEND_Time_CHARACTER;
						sgu8_UART_Interrupt_Flag_trans=0U;							
     60a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
						u8_MU_General_State=MU_Sending_Velocity;
     60e:	de 82       	std	Y+6, r13	; 0x06
						u8_MU_Sending_Time_State=MU_SEND_Time_CHARACTER;
     610:	00 e1       	ldi	r16, 0x10	; 16
						u8_MU_Sending_Distance_State=MU_SEND_Distance_CHARACTER;
     612:	18 e0       	ldi	r17, 0x08	; 8
						u8_MU_Sending_Velocity_State=MU_SEND_Velocity_CHARACTER;
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	8f 83       	std	Y+7, r24	; 0x07
     618:	cf cf       	rjmp	.-98     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
						UART_SendByte('.');
     61a:	8e e2       	ldi	r24, 0x2E	; 46
     61c:	0e 94 81 04 	call	0x902	; 0x902 <UART_SendByte>
						sgu8_UART_Interrupt_Flag_trans=0U;
     620:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
						u8_MU_General_State=MU_Sending_Enter;
     624:	e5 e1       	ldi	r30, 0x15	; 21
     626:	ee 83       	std	Y+6, r30	; 0x06
     628:	c7 cf       	rjmp	.-114    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>

0000062a <DIO_INIT_Pin>:
}
uint8_t DIO_INIT_Pin(uint8_t pin, uint8_t direction)
{
	uint8_t por;

	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     62a:	80 32       	cpi	r24, 0x20	; 32
     62c:	08 f0       	brcs	.+2      	; 0x630 <DIO_INIT_Pin+0x6>
     62e:	8b c0       	rjmp	.+278    	; 0x746 <DIO_INIT_Pin+0x11c>
    else
	{
	por='A'+pin/PortSize;
     630:	28 2f       	mov	r18, r24
     632:	26 95       	lsr	r18
     634:	26 95       	lsr	r18
     636:	26 95       	lsr	r18
     638:	91 e4       	ldi	r25, 0x41	; 65
     63a:	92 0f       	add	r25, r18
	pin=pin%PortSize;
     63c:	87 70       	andi	r24, 0x07	; 7
	}
	
    switch(por)
     63e:	22 30       	cpi	r18, 0x02	; 2
     640:	09 f4       	brne	.+2      	; 0x644 <DIO_INIT_Pin+0x1a>
     642:	45 c0       	rjmp	.+138    	; 0x6ce <DIO_INIT_Pin+0xa4>
     644:	94 34       	cpi	r25, 0x44	; 68
     646:	08 f0       	brcs	.+2      	; 0x64a <DIO_INIT_Pin+0x20>
     648:	60 c0       	rjmp	.+192    	; 0x70a <DIO_INIT_Pin+0xe0>
     64a:	91 34       	cpi	r25, 0x41	; 65
     64c:	a9 f0       	breq	.+42     	; 0x678 <DIO_INIT_Pin+0x4e>
     64e:	92 34       	cpi	r25, 0x42	; 66
     650:	89 f4       	brne	.+34     	; 0x674 <DIO_INIT_Pin+0x4a>
    {
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
              break;

    case 'B': if(direction==0){CLR_BIT(DirectionRegisterB,pin);}else{SET_BIT(DirectionRegisterB,pin);}
     652:	61 11       	cpse	r22, r1
     654:	2f c0       	rjmp	.+94     	; 0x6b4 <DIO_INIT_Pin+0x8a>
     656:	47 b3       	in	r20, 0x17	; 23
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	f9 01       	movw	r30, r18
     65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_INIT_Pin+0x3a>
     660:	ee 0f       	add	r30, r30
     662:	ff 1f       	adc	r31, r31
     664:	8a 95       	dec	r24
     666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_INIT_Pin+0x36>
     668:	cf 01       	movw	r24, r30
     66a:	80 95       	com	r24
     66c:	84 23       	and	r24, r20
     66e:	87 bb       	out	0x17, r24	; 23
#endif
	default :
	return DIO_ERROR_NOK;
	break;
	}
return DIO_ERROR_OK;
     670:	86 2f       	mov	r24, r22
     672:	08 95       	ret
    switch(por)
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	08 95       	ret
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
     678:	61 11       	cpse	r22, r1
     67a:	0f c0       	rjmp	.+30     	; 0x69a <DIO_INIT_Pin+0x70>
     67c:	4a b3       	in	r20, 0x1a	; 26
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	f9 01       	movw	r30, r18
     684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_INIT_Pin+0x60>
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	8a 95       	dec	r24
     68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_INIT_Pin+0x5c>
     68e:	cf 01       	movw	r24, r30
     690:	80 95       	com	r24
     692:	84 23       	and	r24, r20
     694:	8a bb       	out	0x1a, r24	; 26
return DIO_ERROR_OK;
     696:	86 2f       	mov	r24, r22
     698:	08 95       	ret
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
     69a:	9a b3       	in	r25, 0x1a	; 26
     69c:	21 e0       	ldi	r18, 0x01	; 1
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_INIT_Pin+0x7c>
     6a2:	22 0f       	add	r18, r18
     6a4:	33 1f       	adc	r19, r19
     6a6:	8a 95       	dec	r24
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_INIT_Pin+0x78>
     6aa:	89 2f       	mov	r24, r25
     6ac:	82 2b       	or	r24, r18
     6ae:	8a bb       	out	0x1a, r24	; 26
return DIO_ERROR_OK;
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	08 95       	ret
    case 'B': if(direction==0){CLR_BIT(DirectionRegisterB,pin);}else{SET_BIT(DirectionRegisterB,pin);}
     6b4:	97 b3       	in	r25, 0x17	; 23
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_INIT_Pin+0x96>
     6bc:	22 0f       	add	r18, r18
     6be:	33 1f       	adc	r19, r19
     6c0:	8a 95       	dec	r24
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_INIT_Pin+0x92>
     6c4:	89 2f       	mov	r24, r25
     6c6:	82 2b       	or	r24, r18
     6c8:	87 bb       	out	0x17, r24	; 23
return DIO_ERROR_OK;
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	08 95       	ret
    case 'C': if(direction==0){CLR_BIT(DirectionRegisterC,pin);}else{SET_BIT(DirectionRegisterC,pin);}
     6ce:	61 11       	cpse	r22, r1
     6d0:	0f c0       	rjmp	.+30     	; 0x6f0 <DIO_INIT_Pin+0xc6>
     6d2:	44 b3       	in	r20, 0x14	; 20
     6d4:	21 e0       	ldi	r18, 0x01	; 1
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	f9 01       	movw	r30, r18
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_INIT_Pin+0xb6>
     6dc:	ee 0f       	add	r30, r30
     6de:	ff 1f       	adc	r31, r31
     6e0:	8a 95       	dec	r24
     6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_INIT_Pin+0xb2>
     6e4:	cf 01       	movw	r24, r30
     6e6:	80 95       	com	r24
     6e8:	84 23       	and	r24, r20
     6ea:	84 bb       	out	0x14, r24	; 20
return DIO_ERROR_OK;
     6ec:	86 2f       	mov	r24, r22
     6ee:	08 95       	ret
    case 'C': if(direction==0){CLR_BIT(DirectionRegisterC,pin);}else{SET_BIT(DirectionRegisterC,pin);}
     6f0:	94 b3       	in	r25, 0x14	; 20
     6f2:	21 e0       	ldi	r18, 0x01	; 1
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_INIT_Pin+0xd2>
     6f8:	22 0f       	add	r18, r18
     6fa:	33 1f       	adc	r19, r19
     6fc:	8a 95       	dec	r24
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_INIT_Pin+0xce>
     700:	89 2f       	mov	r24, r25
     702:	82 2b       	or	r24, r18
     704:	84 bb       	out	0x14, r24	; 20
return DIO_ERROR_OK;
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	08 95       	ret
    case 'D': if(direction==0){CLR_BIT(DirectionRegisterD,pin);}else{SET_BIT(DirectionRegisterD,pin);}
     70a:	61 11       	cpse	r22, r1
     70c:	0f c0       	rjmp	.+30     	; 0x72c <DIO_INIT_Pin+0x102>
     70e:	41 b3       	in	r20, 0x11	; 17
     710:	21 e0       	ldi	r18, 0x01	; 1
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	b9 01       	movw	r22, r18
     716:	02 c0       	rjmp	.+4      	; 0x71c <DIO_INIT_Pin+0xf2>
     718:	66 0f       	add	r22, r22
     71a:	77 1f       	adc	r23, r23
     71c:	8a 95       	dec	r24
     71e:	e2 f7       	brpl	.-8      	; 0x718 <DIO_INIT_Pin+0xee>
     720:	cb 01       	movw	r24, r22
     722:	80 95       	com	r24
     724:	84 23       	and	r24, r20
     726:	81 bb       	out	0x11, r24	; 17
	return DIO_ERROR_NOK;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	08 95       	ret
    case 'D': if(direction==0){CLR_BIT(DirectionRegisterD,pin);}else{SET_BIT(DirectionRegisterD,pin);}
     72c:	91 b3       	in	r25, 0x11	; 17
     72e:	21 e0       	ldi	r18, 0x01	; 1
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_INIT_Pin+0x10e>
     734:	22 0f       	add	r18, r18
     736:	33 1f       	adc	r19, r19
     738:	8a 95       	dec	r24
     73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_INIT_Pin+0x10a>
     73c:	89 2f       	mov	r24, r25
     73e:	82 2b       	or	r24, r18
     740:	81 bb       	out	0x11, r24	; 17
	return DIO_ERROR_NOK;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	08 95       	ret
	if(pin>=PinsNeeded || pin>=No_of_pins ) return DIO_ERROR_NOK;
     746:	81 e0       	ldi	r24, 0x01	; 1
}
     748:	08 95       	ret

0000074a <__vector_13>:

/*- GLOBAL EXTERN VARIABLES -------------------------------*/
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/

void __vector_13(void)
{
     74a:	1f 92       	push	r1
     74c:	0f 92       	push	r0
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	0f 92       	push	r0
     752:	11 24       	eor	r1, r1
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	ef 93       	push	r30
     76a:	ff 93       	push	r31
	
	if(gPntrToFunc_UART_RX_ISR==NullPointer)
     76c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <gPntrToFunc_UART_RX_ISR>
     770:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <gPntrToFunc_UART_RX_ISR+0x1>
     774:	89 2b       	or	r24, r25
     776:	29 f0       	breq	.+10     	; 0x782 <__vector_13+0x38>
	{ 		

	}
	else
	{
		gPntrToFunc_UART_RX_ISR();
     778:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <gPntrToFunc_UART_RX_ISR>
     77c:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <gPntrToFunc_UART_RX_ISR+0x1>
     780:	09 95       	icall
	}


}
     782:	ff 91       	pop	r31
     784:	ef 91       	pop	r30
     786:	bf 91       	pop	r27
     788:	af 91       	pop	r26
     78a:	9f 91       	pop	r25
     78c:	8f 91       	pop	r24
     78e:	7f 91       	pop	r23
     790:	6f 91       	pop	r22
     792:	5f 91       	pop	r21
     794:	4f 91       	pop	r20
     796:	3f 91       	pop	r19
     798:	2f 91       	pop	r18
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <__vector_14>:
void __vector_14(void)
{	
     7a4:	8f 93       	push	r24
	UART_TXC_Enable_INT();
     7a6:	56 9a       	sbi	0x0a, 6	; 10
	UART_UDRE_Disable_INT();
     7a8:	55 98       	cbi	0x0a, 5	; 10
	sgu8_Uart_UDRE_Interrupt_flag=1U;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <sgu8_Uart_UDRE_Interrupt_flag>
}
     7b0:	8f 91       	pop	r24
     7b2:	18 95       	reti

000007b4 <__vector_15>:
void __vector_15(void)
{
     7b4:	1f 92       	push	r1
     7b6:	0f 92       	push	r0
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	0f 92       	push	r0
     7bc:	11 24       	eor	r1, r1
     7be:	2f 93       	push	r18
     7c0:	3f 93       	push	r19
     7c2:	4f 93       	push	r20
     7c4:	5f 93       	push	r21
     7c6:	6f 93       	push	r22
     7c8:	7f 93       	push	r23
     7ca:	8f 93       	push	r24
     7cc:	9f 93       	push	r25
     7ce:	af 93       	push	r26
     7d0:	bf 93       	push	r27
     7d2:	ef 93       	push	r30
     7d4:	ff 93       	push	r31
	if(gPntrToFunc_UART_TX_ISR!=NullPointer )
     7d6:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <gPntrToFunc_UART_TX_ISR>
     7da:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <gPntrToFunc_UART_TX_ISR+0x1>
     7de:	89 2b       	or	r24, r25
     7e0:	29 f0       	breq	.+10     	; 0x7ec <__vector_15+0x38>
	{ 	
		gPntrToFunc_UART_TX_ISR();	
     7e2:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <gPntrToFunc_UART_TX_ISR>
     7e6:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <gPntrToFunc_UART_TX_ISR+0x1>
     7ea:	09 95       	icall
    else
	{
		

	}		
}
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	bf 91       	pop	r27
     7f2:	af 91       	pop	r26
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	7f 91       	pop	r23
     7fa:	6f 91       	pop	r22
     7fc:	5f 91       	pop	r21
     7fe:	4f 91       	pop	r20
     800:	3f 91       	pop	r19
     802:	2f 91       	pop	r18
     804:	0f 90       	pop	r0
     806:	0f be       	out	0x3f, r0	; 63
     808:	0f 90       	pop	r0
     80a:	1f 90       	pop	r1
     80c:	18 95       	reti

0000080e <UART_Init>:
 * Input     : (char_t* pchar_index)It takes pointer to char
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/

UART_Error_t UART_Init(const UART_Confg_Stuct_t* pstr_Config_UART)
{
     80e:	e8 2f       	mov	r30, r24
     810:	f9 2f       	mov	r31, r25

    if(pstr_Config_UART!=NullPointer)
     812:	30 97       	sbiw	r30, 0x00	; 0
     814:	09 f4       	brne	.+2      	; 0x818 <UART_Init+0xa>
     816:	63 c0       	rjmp	.+198    	; 0x8de <__stack+0x7f>
	{
		/**Set baud rate**/
		UART_BAUD_RATE_REG_HIGH = (uint8_t)((pstr_Config_UART->BaudRate)>>8);
     818:	10 bc       	out	0x20, r1	; 32
		UART_BAUD_RATE_REG_LOW =  (uint8_t) (pstr_Config_UART->BaudRate);
     81a:	82 81       	ldd	r24, Z+2	; 0x02
     81c:	89 b9       	out	0x09, r24	; 9
		/**Enable receiver and transmitter**/
		if(pstr_Config_UART->Trasmit==UART_trasmit_Enable)
     81e:	80 81       	ld	r24, Z
     820:	8d 30       	cpi	r24, 0x0D	; 13
     822:	11 f1       	breq	.+68     	; 0x868 <__stack+0x9>
			SET_BIT(UART_CNTRL_STATUS_REG_B,UART_transimter_EN_BIT);
			
		}
		else
		{
		    sgu8_UART_Transimter_enable=UART_trasmit_Disable;
     824:	8f e0       	ldi	r24, 0x0F	; 15
     826:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgu8_UART_Transimter_enable>
		}
		if(pstr_Config_UART->Reciever==UART_Receive_Enable)
     82a:	81 81       	ldd	r24, Z+1	; 0x01
     82c:	8e 30       	cpi	r24, 0x0E	; 14
     82e:	01 f1       	breq	.+64     	; 0x870 <__stack+0x11>
			SET_BIT(UART_CNTRL_STATUS_REG_B,UART_Reciever_EN_BIT);
			
		}	
		else
		{
			sgu8_UART_Receiver_enable=UART_Receive_Disable;
     830:	80 e1       	ldi	r24, 0x10	; 16
     832:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <sgu8_UART_Receiver_enable>
		}		
		/*** Check for parity ***/
		if(pstr_Config_UART->Parity==UART_Parity_Disabled)
     836:	83 81       	ldd	r24, Z+3	; 0x03
     838:	81 11       	cpse	r24, r1
     83a:	1e c0       	rjmp	.+60     	; 0x878 <__stack+0x19>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Parity_Bit_1)|(0<<UART_Parity_Bit_0);
     83c:	80 b5       	in	r24, 0x20	; 32
     83e:	80 bd       	out	0x20, r24	; 32
		}
		else
		{
		}
		/*** Set frame format: Stop bit***/
		if(pstr_Config_UART->Parity==UART_two_Stop_bit)
     840:	83 81       	ldd	r24, Z+3	; 0x03
     842:	84 30       	cpi	r24, 0x04	; 4
     844:	29 f1       	breq	.+74     	; 0x890 <__stack+0x31>
		{
			UART_CNTRL_STATUS_REG_C|=(1<<UART_STOP_setting_Bit);				
		}
		else if(pstr_Config_UART->Parity==UART_One_Stop_bit)
     846:	83 30       	cpi	r24, 0x03	; 3
     848:	39 f1       	breq	.+78     	; 0x898 <__stack+0x39>
		}
		else
		{
		}
		/* Set frame format:Data_size */
		if(pstr_Config_UART->Data_size==UART_Frame_5_bit_)
     84a:	85 81       	ldd	r24, Z+5	; 0x05
     84c:	85 30       	cpi	r24, 0x05	; 5
     84e:	39 f1       	breq	.+78     	; 0x89e <__stack+0x3f>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(0<<UART_Bit_Data_Size_bit_1)|(0<<UART_Bit_Data_Size_bit_0);
		}
		else if(pstr_Config_UART->Data_size==UART_Frame_6_bit_)
     850:	86 30       	cpi	r24, 0x06	; 6
     852:	71 f1       	breq	.+92     	; 0x8b0 <__stack+0x51>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(0<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);
		}
		else if(pstr_Config_UART->Data_size==UART_Frame_7_bit_)
     854:	87 30       	cpi	r24, 0x07	; 7
     856:	81 f1       	breq	.+96     	; 0x8b8 <__stack+0x59>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(0<<UART_Bit_Data_Size_bit_0);
		}			
		else if(pstr_Config_UART->Data_size==UART_Frame_8_bit_)
     858:	88 30       	cpi	r24, 0x08	; 8
     85a:	91 f1       	breq	.+100    	; 0x8c0 <__stack+0x61>
		{
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);			
		}	
		else if(pstr_Config_UART->Data_size==UART_Frame_9_bit_)
     85c:	89 30       	cpi	r24, 0x09	; 9
     85e:	09 f5       	brne	.+66     	; 0x8a2 <__stack+0x43>
		{
			UART_CNTRL_STATUS_REG_C|=(1<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);					
     860:	80 b5       	in	r24, 0x20	; 32
     862:	86 60       	ori	r24, 0x06	; 6
     864:	80 bd       	out	0x20, r24	; 32
     866:	1d c0       	rjmp	.+58     	; 0x8a2 <__stack+0x43>
		    sgu8_UART_Transimter_enable=UART_trasmit_Enable;
     868:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <sgu8_UART_Transimter_enable>
			SET_BIT(UART_CNTRL_STATUS_REG_B,UART_transimter_EN_BIT);
     86c:	53 9a       	sbi	0x0a, 3	; 10
     86e:	dd cf       	rjmp	.-70     	; 0x82a <UART_Init+0x1c>
			sgu8_UART_Receiver_enable=UART_Receive_Enable;
     870:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <sgu8_UART_Receiver_enable>
			SET_BIT(UART_CNTRL_STATUS_REG_B,UART_Reciever_EN_BIT);
     874:	54 9a       	sbi	0x0a, 4	; 10
     876:	df cf       	rjmp	.-66     	; 0x836 <UART_Init+0x28>
		else if(pstr_Config_UART->Parity==UART_Parity_Even)
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	31 f0       	breq	.+12     	; 0x888 <__stack+0x29>
		else if(pstr_Config_UART->Parity==UART_Parity_Odd)
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	01 f7       	brne	.-64     	; 0x840 <UART_Init+0x32>
			UART_CNTRL_STATUS_REG_C|=(1<<UART_Parity_Bit_1)|(1<<UART_Parity_Bit_0);				
     880:	80 b5       	in	r24, 0x20	; 32
     882:	80 63       	ori	r24, 0x30	; 48
     884:	80 bd       	out	0x20, r24	; 32
     886:	dc cf       	rjmp	.-72     	; 0x840 <UART_Init+0x32>
			UART_CNTRL_STATUS_REG_C|=(1<<UART_Parity_Bit_1)|(0<<UART_Parity_Bit_0);			
     888:	80 b5       	in	r24, 0x20	; 32
     88a:	80 62       	ori	r24, 0x20	; 32
     88c:	80 bd       	out	0x20, r24	; 32
     88e:	d8 cf       	rjmp	.-80     	; 0x840 <UART_Init+0x32>
			UART_CNTRL_STATUS_REG_C|=(1<<UART_STOP_setting_Bit);				
     890:	80 b5       	in	r24, 0x20	; 32
     892:	88 60       	ori	r24, 0x08	; 8
     894:	80 bd       	out	0x20, r24	; 32
     896:	d9 cf       	rjmp	.-78     	; 0x84a <UART_Init+0x3c>
			UART_CNTRL_STATUS_REG_C|=(0<<UART_STOP_setting_Bit);
     898:	80 b5       	in	r24, 0x20	; 32
     89a:	80 bd       	out	0x20, r24	; 32
     89c:	d6 cf       	rjmp	.-84     	; 0x84a <UART_Init+0x3c>
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(0<<UART_Bit_Data_Size_bit_1)|(0<<UART_Bit_Data_Size_bit_0);
     89e:	80 b5       	in	r24, 0x20	; 32
     8a0:	80 bd       	out	0x20, r24	; 32
		}	
	    else
		{
		}
		/**Check whether it is interrupt or polling mode**/
		if(pstr_Config_UART->InterruptMode==UART_Interrupt_mode_enable)
     8a2:	86 81       	ldd	r24, Z+6	; 0x06
     8a4:	8a 30       	cpi	r24, 0x0A	; 10
     8a6:	81 f0       	breq	.+32     	; 0x8c8 <__stack+0x69>
			{
			}
		}
		else
		{
			sgu8_UART_Execution_Mode=UART_Polling_mode_enable;			
     8a8:	8b e0       	ldi	r24, 0x0B	; 11
     8aa:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <sgu8_UART_Execution_Mode>
     8ae:	08 95       	ret
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(0<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);
     8b0:	80 b5       	in	r24, 0x20	; 32
     8b2:	82 60       	ori	r24, 0x02	; 2
     8b4:	80 bd       	out	0x20, r24	; 32
     8b6:	f5 cf       	rjmp	.-22     	; 0x8a2 <__stack+0x43>
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(0<<UART_Bit_Data_Size_bit_0);
     8b8:	80 b5       	in	r24, 0x20	; 32
     8ba:	84 60       	ori	r24, 0x04	; 4
     8bc:	80 bd       	out	0x20, r24	; 32
     8be:	f1 cf       	rjmp	.-30     	; 0x8a2 <__stack+0x43>
			UART_CNTRL_STATUS_REG_C|=(0<<UART_Bit_Data_Size_bit_2)|(1<<UART_Bit_Data_Size_bit_1)|(1<<UART_Bit_Data_Size_bit_0);			
     8c0:	80 b5       	in	r24, 0x20	; 32
     8c2:	86 60       	ori	r24, 0x06	; 6
     8c4:	80 bd       	out	0x20, r24	; 32
     8c6:	ed cf       	rjmp	.-38     	; 0x8a2 <__stack+0x43>
			sgu8_UART_Execution_Mode=UART_Interrupt_mode_enable;
     8c8:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <sgu8_UART_Execution_Mode>
			EnableGeneralInterrupt();
     8cc:	8f b7       	in	r24, 0x3f	; 63
     8ce:	80 68       	ori	r24, 0x80	; 128
     8d0:	8f bf       	out	0x3f, r24	; 63
		    if(pstr_Config_UART->Reciever==UART_Receive_Enable)
     8d2:	81 81       	ldd	r24, Z+1	; 0x01
     8d4:	8e 30       	cpi	r24, 0x0E	; 14
     8d6:	09 f0       	breq	.+2      	; 0x8da <__stack+0x7b>
	else 
	{
		return UART_ERROR_NULL_POINTER;
	}

}
     8d8:	08 95       	ret
		    	UART_RXC_Enable_INT();
     8da:	57 9a       	sbi	0x0a, 7	; 10
     8dc:	08 95       	ret
		return UART_ERROR_NULL_POINTER;
     8de:	8c e0       	ldi	r24, 0x0C	; 12
     8e0:	08 95       	ret

000008e2 <UART_Trans_SetCallBack>:
/*Description: Set call back funtion for transimter
 * Input     : PntrToFunc_t PntrToFunc_Copy_UART_TX_USER_ISR->copy of pointer to function
 * Output    : Uart Error Checking
 *_______________________________________________________________________________________________________________________________*/
UART_Error_t UART_Trans_SetCallBack(PntrToFunc_t PntrToFunc_Copy_UART_TX_USER_ISR)
{
     8e2:	28 2f       	mov	r18, r24
     8e4:	39 2f       	mov	r19, r25
  if(UART_Interrupt_mode_enable==sgu8_UART_Execution_Mode)
     8e6:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <sgu8_UART_Execution_Mode>
     8ea:	8a 30       	cpi	r24, 0x0A	; 10
     8ec:	09 f0       	breq	.+2      	; 0x8f0 <UART_Trans_SetCallBack+0xe>
  }
  else
  {
  }

}
     8ee:	08 95       	ret
	if(NullPointer!=PntrToFunc_Copy_UART_TX_USER_ISR)
     8f0:	21 15       	cp	r18, r1
     8f2:	31 05       	cpc	r19, r1
     8f4:	e1 f3       	breq	.-8      	; 0x8ee <UART_Trans_SetCallBack+0xc>
		gPntrToFunc_UART_TX_ISR=PntrToFunc_Copy_UART_TX_USER_ISR;	
     8f6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <gPntrToFunc_UART_TX_ISR+0x1>
     8fa:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <gPntrToFunc_UART_TX_ISR>
        UART_UDRE_Enable_INT();
     8fe:	55 9a       	sbi	0x0a, 5	; 10
     900:	f6 cf       	rjmp	.-20     	; 0x8ee <UART_Trans_SetCallBack+0xc>

00000902 <UART_SendByte>:
 * Input     : (char_t pchar_index)It takes  char
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
UART_Error_t UART_SendByte(uint8_t u8_Byte_UART)
{
    if(sgu8_UART_Transimter_enable==UART_trasmit_Enable)
     902:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <sgu8_UART_Transimter_enable>
     906:	9d 30       	cpi	r25, 0x0D	; 13
     908:	09 f0       	breq	.+2      	; 0x90c <UART_SendByte+0xa>
	}
	else
	{
	}
	
}
     90a:	08 95       	ret
		if(sgu8_UART_Execution_Mode==UART_Polling_mode_enable)
     90c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <sgu8_UART_Execution_Mode>
     910:	9b 30       	cpi	r25, 0x0B	; 11
     912:	51 f0       	breq	.+20     	; 0x928 <UART_SendByte+0x26>
		else if(sgu8_UART_Execution_Mode==UART_Interrupt_mode_enable)
     914:	9a 30       	cpi	r25, 0x0A	; 10
     916:	c9 f7       	brne	.-14     	; 0x90a <UART_SendByte+0x8>
			if(1U==sgu8_Uart_UDRE_Interrupt_flag&&( UART_CNTRL_STATUS_REG_A & (1<<UART_DATA_REGISTER_EMPETY_FLAG)) ) UART_DATA_REGISTER=u8_Byte_UART;
     918:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <sgu8_Uart_UDRE_Interrupt_flag>
     91c:	91 30       	cpi	r25, 0x01	; 1
     91e:	a9 f7       	brne	.-22     	; 0x90a <UART_SendByte+0x8>
     920:	5d 9b       	sbis	0x0b, 5	; 11
     922:	f3 cf       	rjmp	.-26     	; 0x90a <UART_SendByte+0x8>
     924:	8c b9       	out	0x0c, r24	; 12
     926:	f1 cf       	rjmp	.-30     	; 0x90a <UART_SendByte+0x8>
			while ( !( UART_CNTRL_STATUS_REG_A & (1<<UART_DATA_REGISTER_EMPETY_FLAG)) );
     928:	5d 9b       	sbis	0x0b, 5	; 11
     92a:	fe cf       	rjmp	.-4      	; 0x928 <UART_SendByte+0x26>
            UART_DATA_REGISTER=u8_Byte_UART;
     92c:	8c b9       	out	0x0c, r24	; 12
     92e:	08 95       	ret

00000930 <Timer_Init>:


/*- APIs IMPLEMENTATION -----------------------------------*/
	
uint8_t Timer_Init(StrTimerConfiguration_t* ps_Copy_Measurement_ECU_TIMER_Init_Config)
{
     930:	e8 2f       	mov	r30, r24
     932:	f9 2f       	mov	r31, r25
	
	if(NullPointer!=ps_Copy_Measurement_ECU_TIMER_Init_Config)
     934:	30 97       	sbiw	r30, 0x00	; 0
     936:	09 f4       	brne	.+2      	; 0x93a <Timer_Init+0xa>
     938:	3f c0       	rjmp	.+126    	; 0x9b8 <Timer_Init+0x88>
	{
		
		/*To Check whether the structure values that have been passed is in the scope of configuration nor not*/
		if(sgau8_TIMERChannel[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]==Enable)            return TIMER_ERROR_NOK;	
     93a:	90 81       	ld	r25, Z
     93c:	29 2f       	mov	r18, r25
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	d9 01       	movw	r26, r18
     942:	ae 56       	subi	r26, 0x6E	; 110
     944:	bf 4f       	sbci	r27, 0xFF	; 255
     946:	8c 91       	ld	r24, X
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	f1 f0       	breq	.+60     	; 0x988 <Timer_Init+0x58>
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel >TIMER2  )                              return TIMER_ERROR_NOK;	
     94c:	93 30       	cpi	r25, 0x03	; 3
     94e:	b0 f5       	brcc	.+108    	; 0x9bc <Timer_Init+0x8c>
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Mode>TIMER_MODE_MILIE )                         return TIMER_ERROR_NOK;
     950:	82 81       	ldd	r24, Z+2	; 0x02
     952:	83 30       	cpi	r24, 0x03	; 3
     954:	a8 f5       	brcc	.+106    	; 0x9c0 <Timer_Init+0x90>
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Interrupt_Mode>INTERRUPT)                             return TIMER_ERROR_NOK;
     956:	43 81       	ldd	r20, Z+3	; 0x03
     958:	42 30       	cpi	r20, 0x02	; 2
     95a:	a0 f5       	brcc	.+104    	; 0x9c4 <Timer_Init+0x94>
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc >  Max_Prescaler_possiblities   )           return TIMER_ERROR_NOK;
     95c:	51 81       	ldd	r21, Z+1	; 0x01
     95e:	58 30       	cpi	r21, 0x08	; 8
     960:	98 f5       	brcc	.+102    	; 0x9c8 <Timer_Init+0x98>
	
		/*Adjust the configurations*/
		
		sgau8_TIMERChannel[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]=Enable;		
     962:	d9 01       	movw	r26, r18
     964:	ae 56       	subi	r26, 0x6E	; 110
     966:	bf 4f       	sbci	r27, 0xFF	; 255
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	6c 93       	st	X, r22
		sgau8_TIMERMode[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Mode;
     96c:	d9 01       	movw	r26, r18
     96e:	ab 56       	subi	r26, 0x6B	; 107
     970:	bf 4f       	sbci	r27, 0xFF	; 255
     972:	8c 93       	st	X, r24
		sgau8_Interrupt_Mode[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]=ps_Copy_Measurement_ECU_TIMER_Init_Config->Interrupt_Mode;
     974:	28 56       	subi	r18, 0x68	; 104
     976:	3f 4f       	sbci	r19, 0xFF	; 255
     978:	d9 01       	movw	r26, r18
     97a:	4c 93       	st	X, r20
		sgau8_TIMERPrescaler[ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel]=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc;
		
    
		
		/*In the mode of counter mode the prescaler is entered by the user */
		if((ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Mode)==COUNTER_MODE)
     97c:	81 30       	cpi	r24, 0x01	; 1
     97e:	29 f0       	breq	.+10     	; 0x98a <Timer_Init+0x5a>
			 * the delay is in micro or milie
			 *************************************************************************/
		}

		/*Check IF mode of Interrupt is enabled*/
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Interrupt_Mode==INTERRUPT)
     980:	83 81       	ldd	r24, Z+3	; 0x03
     982:	81 30       	cpi	r24, 0x01	; 1
     984:	a1 f0       	breq	.+40     	; 0x9ae <Timer_Init+0x7e>
	}
	else
	{
		
	}
	return TIMER_ERROR_OK;
     986:	80 e0       	ldi	r24, 0x00	; 0
}
     988:	08 95       	ret
			switch(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel)
     98a:	91 30       	cpi	r25, 0x01	; 1
     98c:	41 f0       	breq	.+16     	; 0x99e <Timer_Init+0x6e>
     98e:	92 30       	cpi	r25, 0x02	; 2
     990:	51 f0       	breq	.+20     	; 0x9a6 <Timer_Init+0x76>
     992:	91 11       	cpse	r25, r1
     994:	f9 cf       	rjmp	.-14     	; 0x988 <Timer_Init+0x58>
					TIMER0_CNTRL_REG  |=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc;
     996:	83 b7       	in	r24, 0x33	; 51
     998:	58 2b       	or	r21, r24
     99a:	53 bf       	out	0x33, r21	; 51
				break;
     99c:	f1 cf       	rjmp	.-30     	; 0x980 <Timer_Init+0x50>
					TIMER1_CNTRL_REG_B|=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc;
     99e:	8e b5       	in	r24, 0x2e	; 46
     9a0:	58 2b       	or	r21, r24
     9a2:	5e bd       	out	0x2e, r21	; 46
				break;
     9a4:	ed cf       	rjmp	.-38     	; 0x980 <Timer_Init+0x50>
				     TIMER2_CNTRL_REG|=ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc;
     9a6:	85 b5       	in	r24, 0x25	; 37
     9a8:	58 2b       	or	r21, r24
     9aa:	55 bd       	out	0x25, r21	; 37
				break;
     9ac:	e9 cf       	rjmp	.-46     	; 0x980 <Timer_Init+0x50>
				  EnableGeneralInterrupt();
     9ae:	8f b7       	in	r24, 0x3f	; 63
     9b0:	80 68       	ori	r24, 0x80	; 128
     9b2:	8f bf       	out	0x3f, r24	; 63
	return TIMER_ERROR_OK;
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	08 95       	ret
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	08 95       	ret
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Channel >TIMER2  )                              return TIMER_ERROR_NOK;	
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 95       	ret
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Mode>TIMER_MODE_MILIE )                         return TIMER_ERROR_NOK;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	08 95       	ret
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Interrupt_Mode>INTERRUPT)                             return TIMER_ERROR_NOK;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	08 95       	ret
		if(ps_Copy_Measurement_ECU_TIMER_Init_Config->Timer_Psc >  Max_Prescaler_possiblities   )           return TIMER_ERROR_NOK;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	08 95       	ret

000009cc <Timer_Start>:

uint8_t Timer_Start(uint8_t u8_Copy_TIMER_Start_TIMERChannel,uint32_t u32_Copy_TIMER_Start_tickCounts,PntrToFunc_t PntrToFunc_t_Copy_TIMER_Start_ISR)//with sgau8_Prescaler
{
     9cc:	98 2f       	mov	r25, r24
     9ce:	26 2f       	mov	r18, r22
     9d0:	37 2f       	mov	r19, r23
     9d2:	64 2f       	mov	r22, r20
     9d4:	75 2f       	mov	r23, r21
	
	uint16_t u16_Count_TIMER_Start=0;
	
	switch(u8_Copy_TIMER_Start_TIMERChannel)
     9d6:	81 11       	cpse	r24, r1
     9d8:	84 c0       	rjmp	.+264    	; 0xae2 <Timer_Start+0x116>
	{
		case TIMER0:
		{
			TIMER0_CNTRL_REG|=TIMER0_CNTRL_REG_CTC_MODE_VALUE;
     9da:	83 b7       	in	r24, 0x33	; 51
     9dc:	88 60       	ori	r24, 0x08	; 8
     9de:	83 bf       	out	0x33, r24	; 51
			/*Check whether it is counter or timer*/
			if(sgau8_TIMERMode[TIMER0]!=COUNTER_MODE)
     9e0:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <sgau8_TIMERMode>
     9e4:	41 30       	cpi	r20, 0x01	; 1
     9e6:	09 f4       	brne	.+2      	; 0x9ea <Timer_Start+0x1e>
     9e8:	5f c0       	rjmp	.+190    	; 0xaa8 <Timer_Start+0xdc>
			{
				/* Check whether it is time delay in mili or in micro */
				if(sgau8_TIMERMode[TIMER0]==TIMER_MODE_MICRO)
     9ea:	41 11       	cpse	r20, r1
     9ec:	2d c0       	rjmp	.+90     	; 0xa48 <Timer_Start+0x7c>
				{ 
						/************************************************************
						 * The prescale divide by 8 and  make count =1 and  the 
						 * counter =255-1 to get overflow every micro
						 ************************************************************/
						TIMER0_CNTRL_REG|=F_CPU_CLOCK_8_TIMER_0;	
     9ee:	83 b7       	in	r24, 0x33	; 51
     9f0:	82 60       	ori	r24, 0x02	; 2
     9f2:	83 bf       	out	0x33, r24	; 51
						/*Check whether it is polled or not*/
						if(sgau8_Interrupt_Mode[TIMER0]==POLLING)
     9f4:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <sgau8_Interrupt_Mode>
     9f8:	81 11       	cpse	r24, r1
     9fa:	14 c0       	rjmp	.+40     	; 0xa24 <Timer_Start+0x58>
						{                            
							/*Loop  until it get the time of delay in micro*/
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
     9fc:	21 15       	cp	r18, r1
     9fe:	31 05       	cpc	r19, r1
     a00:	09 f4       	brne	.+2      	; 0xa04 <Timer_Start+0x38>
     a02:	61 c0       	rjmp	.+194    	; 0xac6 <Timer_Start+0xfa>
	uint16_t u16_Count_TIMER_Start=0;
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	40 e0       	ldi	r20, 0x00	; 0
								/************************************************************
								 * The prescale divide by 8 and  make countER =1 to get 
								 * 1 microsecond
								 ************************************************************/
								SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
								TIMER0_COMPARE_Register=1U;
     a08:	61 e0       	ldi	r22, 0x01	; 1
								SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
     a0a:	98 b7       	in	r25, 0x38	; 56
     a0c:	92 60       	ori	r25, 0x02	; 2
     a0e:	98 bf       	out	0x38, r25	; 56
								TIMER0_COMPARE_Register=1U;
     a10:	6c bf       	out	0x3c, r22	; 60
								/*Loop  until overflow happens*/
								while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT) );
     a12:	08 b6       	in	r0, 0x38	; 56
     a14:	01 fe       	sbrs	r0, 1
     a16:	fd cf       	rjmp	.-6      	; 0xa12 <Timer_Start+0x46>
								u16_Count_TIMER_Start++;
     a18:	4f 5f       	subi	r20, 0xFF	; 255
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
     a1c:	24 17       	cp	r18, r20
     a1e:	35 07       	cpc	r19, r21
     a20:	a1 f7       	brne	.-24     	; 0xa0a <Timer_Start+0x3e>
     a22:	08 95       	ret
							}
							
						}
			
						else if(sgau8_Interrupt_Mode[TIMER0]==INTERRUPT)
     a24:	81 30       	cpi	r24, 0x01	; 1
     a26:	11 f0       	breq	.+4      	; 0xa2c <Timer_Start+0x60>
		{
			return TIMER_ERROR_NOK;
		}
		break;			
	}
	return TIMER_ERROR_OK;
     a28:	84 2f       	mov	r24, r20
     a2a:	08 95       	ret
						     SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
     a2c:	88 b7       	in	r24, 0x38	; 56
     a2e:	82 60       	ori	r24, 0x02	; 2
     a30:	88 bf       	out	0x38, r24	; 56
							 TIMER0_COMPARE_Register=1U;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	8c bf       	out	0x3c, r24	; 60
				             Timer_0_OCF_INT_EN();			  
     a36:	89 b7       	in	r24, 0x39	; 57
     a38:	82 60       	ori	r24, 0x02	; 2
     a3a:	89 bf       	out	0x39, r24	; 57
							 sgpfun_TIMER0_CMP_ISR_Function=PntrToFunc_t_Copy_TIMER_Start_ISR;													
     a3c:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     a40:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <sgpfun_TIMER0_CMP_ISR_Function>
	return TIMER_ERROR_OK;
     a44:	84 2f       	mov	r24, r20
     a46:	08 95       	ret
				else if(sgau8_TIMERMode[TIMER0]==TIMER_MODE_MILIE)
     a48:	42 30       	cpi	r20, 0x02	; 2
     a4a:	11 f0       	breq	.+4      	; 0xa50 <Timer_Start+0x84>
	return TIMER_ERROR_OK;
     a4c:	89 2f       	mov	r24, r25
     a4e:	08 95       	ret
						TIMER0_CNTRL_REG|=F_CPU_CLOCK_64_TIMER_0;	
     a50:	83 b7       	in	r24, 0x33	; 51
     a52:	83 60       	ori	r24, 0x03	; 3
     a54:	83 bf       	out	0x33, r24	; 51
						if(sgau8_Interrupt_Mode[TIMER0]==POLLING)
     a56:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <sgau8_Interrupt_Mode>
     a5a:	81 11       	cpse	r24, r1
     a5c:	13 c0       	rjmp	.+38     	; 0xa84 <Timer_Start+0xb8>
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
     a5e:	21 15       	cp	r18, r1
     a60:	31 05       	cpc	r19, r1
     a62:	89 f1       	breq	.+98     	; 0xac6 <Timer_Start+0xfa>
	uint16_t u16_Count_TIMER_Start=0;
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
								TIMER0_COMPARE_Register=125U;
     a68:	6d e7       	ldi	r22, 0x7D	; 125
								SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
     a6a:	98 b7       	in	r25, 0x38	; 56
     a6c:	92 60       	ori	r25, 0x02	; 2
     a6e:	98 bf       	out	0x38, r25	; 56
								TIMER0_COMPARE_Register=125U;
     a70:	6c bf       	out	0x3c, r22	; 60
								while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT) );
     a72:	08 b6       	in	r0, 0x38	; 56
     a74:	01 fe       	sbrs	r0, 1
     a76:	fd cf       	rjmp	.-6      	; 0xa72 <Timer_Start+0xa6>
								u16_Count_TIMER_Start++;
     a78:	4f 5f       	subi	r20, 0xFF	; 255
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
     a7c:	24 17       	cp	r18, r20
     a7e:	35 07       	cpc	r19, r21
     a80:	a1 f7       	brne	.-24     	; 0xa6a <Timer_Start+0x9e>
     a82:	08 95       	ret
						else if(sgau8_Interrupt_Mode[TIMER0]==INTERRUPT)
     a84:	81 30       	cpi	r24, 0x01	; 1
     a86:	11 f0       	breq	.+4      	; 0xa8c <Timer_Start+0xc0>
	return TIMER_ERROR_OK;
     a88:	89 2f       	mov	r24, r25
     a8a:	08 95       	ret
						     SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
     a8c:	88 b7       	in	r24, 0x38	; 56
     a8e:	82 60       	ori	r24, 0x02	; 2
     a90:	88 bf       	out	0x38, r24	; 56
							 TIMER0_COMPARE_Register=125U;
     a92:	8d e7       	ldi	r24, 0x7D	; 125
     a94:	8c bf       	out	0x3c, r24	; 60
				             Timer_0_OCF_INT_EN();			  
     a96:	89 b7       	in	r24, 0x39	; 57
     a98:	82 60       	ori	r24, 0x02	; 2
     a9a:	89 bf       	out	0x39, r24	; 57
							 sgpfun_TIMER0_CMP_ISR_Function=PntrToFunc_t_Copy_TIMER_Start_ISR;												
     a9c:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     aa0:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <sgpfun_TIMER0_CMP_ISR_Function>
	return TIMER_ERROR_OK;
     aa4:	89 2f       	mov	r24, r25
     aa6:	08 95       	ret
				if(sgau8_Interrupt_Mode[TIMER0]==POLLING)
     aa8:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <sgau8_Interrupt_Mode>
     aac:	81 11       	cpse	r24, r1
     aae:	08 c0       	rjmp	.+16     	; 0xac0 <Timer_Start+0xf4>
                    SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);
     ab0:	98 b7       	in	r25, 0x38	; 56
     ab2:	92 60       	ori	r25, 0x02	; 2
     ab4:	98 bf       	out	0x38, r25	; 56
				    TIMER0_COMPARE_Register=u32_Copy_TIMER_Start_tickCounts;
     ab6:	2c bf       	out	0x3c, r18	; 60
					while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT) );
     ab8:	08 b6       	in	r0, 0x38	; 56
     aba:	01 fe       	sbrs	r0, 1
     abc:	fd cf       	rjmp	.-6      	; 0xab8 <Timer_Start+0xec>
     abe:	08 95       	ret
				else if(sgau8_Interrupt_Mode[TIMER0]==INTERRUPT)
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	11 f0       	breq	.+4      	; 0xac8 <Timer_Start+0xfc>
	return TIMER_ERROR_OK;
     ac4:	89 2f       	mov	r24, r25
}
     ac6:	08 95       	ret
					 SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_Compare_FLAG_BIT);								 
     ac8:	88 b7       	in	r24, 0x38	; 56
     aca:	82 60       	ori	r24, 0x02	; 2
     acc:	88 bf       	out	0x38, r24	; 56
					 TIMER0_COMPARE_Register=u32_Copy_TIMER_Start_tickCounts;
     ace:	2c bf       	out	0x3c, r18	; 60
					 Timer_0_OCF_INT_EN();			  
     ad0:	89 b7       	in	r24, 0x39	; 57
     ad2:	82 60       	ori	r24, 0x02	; 2
     ad4:	89 bf       	out	0x39, r24	; 57
					 sgpfun_TIMER0_CMP_ISR_Function=PntrToFunc_t_Copy_TIMER_Start_ISR;						
     ad6:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     ada:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <sgpfun_TIMER0_CMP_ISR_Function>
	return TIMER_ERROR_OK;
     ade:	89 2f       	mov	r24, r25
     ae0:	08 95       	ret
			return TIMER_ERROR_NOK;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	08 95       	ret

00000ae6 <__vector_10>:
	
	return TIMER_ERROR_OK;
}

Timer_ISR(TIMER0_COMP_VECTOR)
{
     ae6:	1f 92       	push	r1
     ae8:	0f 92       	push	r0
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	0f 92       	push	r0
     aee:	11 24       	eor	r1, r1
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	5f 93       	push	r21
     af8:	6f 93       	push	r22
     afa:	7f 93       	push	r23
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	ef 93       	push	r30
     b06:	ff 93       	push	r31
    sgpfun_TIMER0_CMP_ISR_Function();
     b08:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <sgpfun_TIMER0_CMP_ISR_Function>
     b0c:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <sgpfun_TIMER0_CMP_ISR_Function+0x1>
     b10:	09 95       	icall
}
     b12:	ff 91       	pop	r31
     b14:	ef 91       	pop	r30
     b16:	bf 91       	pop	r27
     b18:	af 91       	pop	r26
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	7f 91       	pop	r23
     b20:	6f 91       	pop	r22
     b22:	5f 91       	pop	r21
     b24:	4f 91       	pop	r20
     b26:	3f 91       	pop	r19
     b28:	2f 91       	pop	r18
     b2a:	0f 90       	pop	r0
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	0f 90       	pop	r0
     b30:	1f 90       	pop	r1
     b32:	18 95       	reti

00000b34 <__vector_7>:
Timer_ISR(TIMER1_COMPA_VECTOR)
{
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	2f 93       	push	r18
     b40:	3f 93       	push	r19
     b42:	4f 93       	push	r20
     b44:	5f 93       	push	r21
     b46:	6f 93       	push	r22
     b48:	7f 93       	push	r23
     b4a:	8f 93       	push	r24
     b4c:	9f 93       	push	r25
     b4e:	af 93       	push	r26
     b50:	bf 93       	push	r27
     b52:	ef 93       	push	r30
     b54:	ff 93       	push	r31

	sgpfun_TIMER0_CMPA_ISR_Function();
     b56:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <sgpfun_TIMER0_CMPA_ISR_Function>
     b5a:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <sgpfun_TIMER0_CMPA_ISR_Function+0x1>
     b5e:	09 95       	icall
}
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	7f 91       	pop	r23
     b6e:	6f 91       	pop	r22
     b70:	5f 91       	pop	r21
     b72:	4f 91       	pop	r20
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <__vector_8>:

Timer_ISR(TIMER1_COMPB_VECTOR)
{
     b82:	1f 92       	push	r1
     b84:	0f 92       	push	r0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	0f 92       	push	r0
     b8a:	11 24       	eor	r1, r1
     b8c:	2f 93       	push	r18
     b8e:	3f 93       	push	r19
     b90:	4f 93       	push	r20
     b92:	5f 93       	push	r21
     b94:	6f 93       	push	r22
     b96:	7f 93       	push	r23
     b98:	8f 93       	push	r24
     b9a:	9f 93       	push	r25
     b9c:	af 93       	push	r26
     b9e:	bf 93       	push	r27
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
	sgpfun_TIMER0_CMPB_ISR_Function();
     ba4:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <sgpfun_TIMER0_CMPB_ISR_Function>
     ba8:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <sgpfun_TIMER0_CMPB_ISR_Function+0x1>
     bac:	09 95       	icall
}
     bae:	ff 91       	pop	r31
     bb0:	ef 91       	pop	r30
     bb2:	bf 91       	pop	r27
     bb4:	af 91       	pop	r26
     bb6:	9f 91       	pop	r25
     bb8:	8f 91       	pop	r24
     bba:	7f 91       	pop	r23
     bbc:	6f 91       	pop	r22
     bbe:	5f 91       	pop	r21
     bc0:	4f 91       	pop	r20
     bc2:	3f 91       	pop	r19
     bc4:	2f 91       	pop	r18
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <__vector_4>:
Timer_ISR(TIMER2_COMP_VECTOR)
{
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	2f 93       	push	r18
     bdc:	3f 93       	push	r19
     bde:	4f 93       	push	r20
     be0:	5f 93       	push	r21
     be2:	6f 93       	push	r22
     be4:	7f 93       	push	r23
     be6:	8f 93       	push	r24
     be8:	9f 93       	push	r25
     bea:	af 93       	push	r26
     bec:	bf 93       	push	r27
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31
	sgpfun_TIMER2_CMP_ISR_Function();
     bf2:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <sgpfun_TIMER2_CMP_ISR_Function>
     bf6:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <sgpfun_TIMER2_CMP_ISR_Function+0x1>
     bfa:	09 95       	icall
     bfc:	ff 91       	pop	r31
     bfe:	ef 91       	pop	r30
     c00:	bf 91       	pop	r27
     c02:	af 91       	pop	r26
     c04:	9f 91       	pop	r25
     c06:	8f 91       	pop	r24
     c08:	7f 91       	pop	r23
     c0a:	6f 91       	pop	r22
     c0c:	5f 91       	pop	r21
     c0e:	4f 91       	pop	r20
     c10:	3f 91       	pop	r19
     c12:	2f 91       	pop	r18
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	0f 90       	pop	r0
     c1a:	1f 90       	pop	r1
     c1c:	18 95       	reti

00000c1e <SPI_Trans_SetCallBack>:
static uint8_t gu8_Interrupt_Mode =0;
static uint8_t gu8_Interrupt_Flag=1;
static volatile PntrToFunc_t PFUNC_SPI_FUNC_ISR=NullPointer;
void __vector_12(void)__attribute((signal,used));
Error_Type_t SPI_Trans_SetCallBack(PntrToFunc_t Copy_pfunc_callbackfunc_ISR)
{
     c1e:	28 2f       	mov	r18, r24
     c20:	39 2f       	mov	r19, r25
	PFUNC_SPI_FUNC_ISR=Copy_pfunc_callbackfunc_ISR;
     c22:	30 93 9c 00 	sts	0x009C, r19	; 0x80009c <PFUNC_SPI_FUNC_ISR+0x1>
     c26:	20 93 9b 00 	sts	0x009B, r18	; 0x80009b <PFUNC_SPI_FUNC_ISR>
}
     c2a:	08 95       	ret

00000c2c <SPI_Init>:
Error_Type_t SPI_Init (str_Configuration_SPI_t * str_Confg)
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	c8 2f       	mov	r28, r24
     c32:	d9 2f       	mov	r29, r25
	Error_Type_t au8_error= 0;
	DIO_INIT_Pin(B4,OUTPUT);
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	8c e0       	ldi	r24, 0x0C	; 12
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INIT_Pin>
	DIO_INIT_Pin(B5, OUTPUT);
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	8d e0       	ldi	r24, 0x0D	; 13
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INIT_Pin>
	DIO_INIT_Pin(B6, INPUT);
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	8e e0       	ldi	r24, 0x0E	; 14
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INIT_Pin>
	DIO_INIT_Pin(B7, OUTPUT);
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	8f e0       	ldi	r24, 0x0F	; 15
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INIT_Pin>
	if(str_Confg->au8_SPI_Mode==SPI_MODE_MASTER) /*Check If structure Configuration is passing Master_Mood*/
     c64:	98 81       	ld	r25, Y
     c66:	99 23       	and	r25, r25
     c68:	31 f0       	breq	.+12     	; 0xc76 <SPI_Init+0x4a>
		}

	}
	else
	{
		au8_error=ERROR_INIT_MASTER_MODE_NOT_DEFINED;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
	else if(str_Confg->au8_SPI_Mode==SPI_MODE_SLAVE)
     c6c:	91 30       	cpi	r25, 0x01	; 1
     c6e:	89 f1       	breq	.+98     	; 0xcd2 <SPI_Init+0xa6>
	}
	return au8_error;
}
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret
		SET_BIT(SPCR,SPCR_MSTR);
     c76:	6c 9a       	sbi	0x0d, 4	; 13
		if(str_Confg->au8_prescaler==((SPI_PRESCALER_SPEED_4)||(SPI_PRESCALER_SPEED_16)||(SPI_PRESCALER_SPEED_64) || (SPI_PRESCALER_SPEED_128)))
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	91 f0       	breq	.+36     	; 0xca2 <SPI_Init+0x76>
		if(str_Confg->au8_SPI_Data_Order==(DATA_ORDER_MSB_FIRST))
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	81 11       	cpse	r24, r1
     c82:	19 c0       	rjmp	.+50     	; 0xcb6 <SPI_Init+0x8a>
			CLR_BIT(SPCR,SPCR_DORD);
     c84:	6d 98       	cbi	0x0d, 5	; 13
		if(str_Confg->au8_Speed_Mode==SPI_SPEED_DOUBLE_MODE)
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	c9 f0       	breq	.+50     	; 0xcbe <SPI_Init+0x92>
		if(str_Confg->au8_Interrupt_Mode==SPI_INTERRUPT_MODE)
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	81 11       	cpse	r24, r1
     c90:	18 c0       	rjmp	.+48     	; 0xcc2 <SPI_Init+0x96>
		    SET_BIT(SREG,7);
     c92:	9f b7       	in	r25, 0x3f	; 63
     c94:	90 68       	ori	r25, 0x80	; 128
     c96:	9f bf       	out	0x3f, r25	; 63
		    SET_BIT(SPCR,SPCR_SPIE);
     c98:	6f 9a       	sbi	0x0d, 7	; 13
			gu8_Interrupt_Mode= SPI_INTERRUPT_MODE;
     c9a:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <gu8_Interrupt_Mode>
		SET_BIT(SPCR,SPCR_SPE);
     c9e:	6e 9a       	sbi	0x0d, 6	; 13
		return au8_error;
     ca0:	e7 cf       	rjmp	.-50     	; 0xc70 <SPI_Init+0x44>
			SPCR &= NORMAL_PRESCALER_MASK;
     ca2:	8d b1       	in	r24, 0x0d	; 13
     ca4:	83 7f       	andi	r24, 0xF3	; 243
     ca6:	8d b9       	out	0x0d, r24	; 13
			SPCR |= str_Confg->au8_prescaler;
     ca8:	8d b1       	in	r24, 0x0d	; 13
     caa:	29 81       	ldd	r18, Y+1	; 0x01
     cac:	82 2b       	or	r24, r18
     cae:	8d b9       	out	0x0d, r24	; 13
			CLR_BIT(SPCR,SPCR_CPHA);
     cb0:	6a 98       	cbi	0x0d, 2	; 13
			CLR_BIT(SPCR,SPCR_CPOL);
     cb2:	6b 98       	cbi	0x0d, 3	; 13
			au8_error=ERROR_INIT_MASTER_OK;
     cb4:	e4 cf       	rjmp	.-56     	; 0xc7e <SPI_Init+0x52>
		else if(str_Confg->au8_SPI_Data_Order==(DATA_ORDER_LSB_FIRST))
     cb6:	81 30       	cpi	r24, 0x01	; 1
     cb8:	31 f7       	brne	.-52     	; 0xc86 <SPI_Init+0x5a>
			SET_BIT(SPCR,SPCR_DORD);
     cba:	6d 9a       	sbi	0x0d, 5	; 13
			au8_error=ERROR_INIT_MASTER_OK;
     cbc:	e4 cf       	rjmp	.-56     	; 0xc86 <SPI_Init+0x5a>
			SET_BIT(SPSR,SPSR_SPI2X);
     cbe:	70 9a       	sbi	0x0e, 0	; 14
			au8_error=ERROR_INIT_MASTER_OK;
     cc0:	e5 cf       	rjmp	.-54     	; 0xc8c <SPI_Init+0x60>
		else if(str_Confg->au8_Interrupt_Mode==SPI_POLLING_MODE)
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	11 f0       	breq	.+4      	; 0xcca <SPI_Init+0x9e>
			au8_error=ERROR_INIT_INTEERUPT_MODE_NOT_DEFINED;
     cc6:	84 e0       	ldi	r24, 0x04	; 4
     cc8:	ea cf       	rjmp	.-44     	; 0xc9e <SPI_Init+0x72>
			gu8_Interrupt_Mode= SPI_POLLING_MODE;
     cca:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <gu8_Interrupt_Mode>
			au8_error=ERROR_INIT_MASTER_OK;
     cce:	89 2f       	mov	r24, r25
     cd0:	e6 cf       	rjmp	.-52     	; 0xc9e <SPI_Init+0x72>
		DIO_INIT_Pin(B4, INPUT);
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	8c e0       	ldi	r24, 0x0C	; 12
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INIT_Pin>
		DIO_INIT_Pin(B5, INPUT);
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	8d e0       	ldi	r24, 0x0D	; 13
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INIT_Pin>
		DIO_INIT_Pin(B6, OUTPUT);
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	8e e0       	ldi	r24, 0x0E	; 14
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INIT_Pin>
		DIO_INIT_Pin(B7, INPUT);
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	8f e0       	ldi	r24, 0x0F	; 15
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_INIT_Pin>
		CLR_BIT(SPCR,SPCR_MSTR); /*ACTIVATE SLAVE MOODE*/
     d02:	6c 98       	cbi	0x0d, 4	; 13
		if(str_Confg->au8_SPI_Data_Order==DATA_ORDER_MSB_FIRST)
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	81 11       	cpse	r24, r1
     d08:	15 c0       	rjmp	.+42     	; 0xd34 <SPI_Init+0x108>
			CLR_BIT(SPCR,SPCR_DORD);
     d0a:	6d 98       	cbi	0x0d, 5	; 13
			SET_BIT(SPCR,SPCR_SPE); /*ENABLE SPI*/
     d0c:	6e 9a       	sbi	0x0d, 6	; 13
			if(str_Confg->au8_Interrupt_Mode==SPI_INTERRUPT_MODE)
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	88 23       	and	r24, r24
     d12:	21 f0       	breq	.+8      	; 0xd1c <SPI_Init+0xf0>
			else if(str_Confg->au8_Interrupt_Mode==SPI_POLLING_MODE)
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	51 f0       	breq	.+20     	; 0xd2c <SPI_Init+0x100>
				au8_error=ERROR_INIT_INTEERUPT_MODE_NOT_DEFINED;
     d18:	84 e0       	ldi	r24, 0x04	; 4
     d1a:	aa cf       	rjmp	.-172    	; 0xc70 <SPI_Init+0x44>
				SET_BIT(SREG,7);
     d1c:	8f b7       	in	r24, 0x3f	; 63
     d1e:	80 68       	ori	r24, 0x80	; 128
     d20:	8f bf       	out	0x3f, r24	; 63
		        SET_BIT(SPCR,SPCR_SPIE);
     d22:	6f 9a       	sbi	0x0d, 7	; 13
				gu8_Interrupt_Mode=SPI_INTERRUPT_MODE;
     d24:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <gu8_Interrupt_Mode>
				au8_error=ERROR_INIT_SLAVE_OK;
     d28:	86 e0       	ldi	r24, 0x06	; 6
     d2a:	a2 cf       	rjmp	.-188    	; 0xc70 <SPI_Init+0x44>
				gu8_Interrupt_Mode=SPI_POLLING_MODE;
     d2c:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <gu8_Interrupt_Mode>
				au8_error=ERROR_INIT_SLAVE_OK;
     d30:	86 e0       	ldi	r24, 0x06	; 6
     d32:	9e cf       	rjmp	.-196    	; 0xc70 <SPI_Init+0x44>
		else if(str_Confg->au8_SPI_Data_Order==DATA_ORDER_LSB_FIRST)
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	11 f0       	breq	.+4      	; 0xd3c <SPI_Init+0x110>
			au8_error=ERROR_INIT_DATA_ORDER_NOT_DEFINED;
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	9a cf       	rjmp	.-204    	; 0xc70 <SPI_Init+0x44>
			SET_BIT(SPCR,SPCR_DORD);
     d3c:	6d 9a       	sbi	0x0d, 5	; 13
			SET_BIT(SPCR,SPCR_SPE); /*ENABLE SPI*/
     d3e:	6e 9a       	sbi	0x0d, 6	; 13
			if(str_Confg->au8_Interrupt_Mode==SPI_INTERRUPT_MODE)
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	88 23       	and	r24, r24
     d44:	21 f0       	breq	.+8      	; 0xd4e <SPI_Init+0x122>
			else if(str_Confg->au8_Interrupt_Mode==SPI_POLLING_MODE)
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	51 f0       	breq	.+20     	; 0xd5e <SPI_Init+0x132>
				au8_error=ERROR_INIT_INTEERUPT_MODE_NOT_DEFINED;
     d4a:	84 e0       	ldi	r24, 0x04	; 4
     d4c:	91 cf       	rjmp	.-222    	; 0xc70 <SPI_Init+0x44>
                SET_BIT(SREG,7);
     d4e:	8f b7       	in	r24, 0x3f	; 63
     d50:	80 68       	ori	r24, 0x80	; 128
     d52:	8f bf       	out	0x3f, r24	; 63
		        SET_BIT(SPCR,SPCR_SPIE);
     d54:	6f 9a       	sbi	0x0d, 7	; 13
				gu8_Interrupt_Mode=SPI_INTERRUPT_MODE;
     d56:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <gu8_Interrupt_Mode>
				au8_error=ERROR_INIT_SLAVE_OK;
     d5a:	86 e0       	ldi	r24, 0x06	; 6
     d5c:	89 cf       	rjmp	.-238    	; 0xc70 <SPI_Init+0x44>
				gu8_Interrupt_Mode=SPI_POLLING_MODE;
     d5e:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <gu8_Interrupt_Mode>
				au8_error=ERROR_INIT_SLAVE_OK;
     d62:	86 e0       	ldi	r24, 0x06	; 6
     d64:	85 cf       	rjmp	.-246    	; 0xc70 <SPI_Init+0x44>

00000d66 <SPI_RecieveByte>:
	}
	return au8_error;
}

Error_Type_t SPI_RecieveByte (uint8_t * au8_PtrData)
{
     d66:	e8 2f       	mov	r30, r24
     d68:	f9 2f       	mov	r31, r25
	uint8_t au8_error=0;
 	if(gu8_Interrupt_Mode==SPI_INTERRUPT_MODE)
     d6a:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <gu8_Interrupt_Mode>
     d6e:	81 11       	cpse	r24, r1
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <SPI_RecieveByte+0x14>

/*      if(gu8_Interrupt_Flag==1)
		{ 
			SET_BIT(SREG,7);
		    SET_BIT(SPCR,SPCR_SPIE);  */
			*au8_PtrData=SPDR;
     d72:	8f b1       	in	r24, 0x0f	; 15
     d74:	80 83       	st	Z, r24
		while(BIT_IS_CLR(SPSR,SPSR_SPIF)){}
		au8_error=ERROR_RECIEVE_OK;
	}
	else
	{
		au8_error=ERROR_RECIEVE_NOK;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	08 95       	ret
	if(gu8_Interrupt_Mode==SPI_POLLING_MODE)
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	31 f4       	brne	.+12     	; 0xd8a <SPI_RecieveByte+0x24>
		*au8_PtrData=SPDR;
     d7e:	8f b1       	in	r24, 0x0f	; 15
     d80:	80 83       	st	Z, r24
		while(BIT_IS_CLR(SPSR,SPSR_SPIF)){}
     d82:	77 9b       	sbis	0x0e, 7	; 14
     d84:	fe cf       	rjmp	.-4      	; 0xd82 <SPI_RecieveByte+0x1c>
		au8_error=ERROR_RECIEVE_OK;
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	08 95       	ret
		au8_error=ERROR_RECIEVE_NOK;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return au8_error;
}
     d8c:	08 95       	ret

00000d8e <__vector_12>:

void __vector_12(void)
{
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	2f 93       	push	r18
     d9a:	3f 93       	push	r19
     d9c:	4f 93       	push	r20
     d9e:	5f 93       	push	r21
     da0:	6f 93       	push	r22
     da2:	7f 93       	push	r23
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
     da8:	af 93       	push	r26
     daa:	bf 93       	push	r27
     dac:	ef 93       	push	r30
     dae:	ff 93       	push	r31
  PFUNC_SPI_FUNC_ISR(); 
     db0:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <PFUNC_SPI_FUNC_ISR>
     db4:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <PFUNC_SPI_FUNC_ISR+0x1>
     db8:	09 95       	icall
}
     dba:	ff 91       	pop	r31
     dbc:	ef 91       	pop	r30
     dbe:	bf 91       	pop	r27
     dc0:	af 91       	pop	r26
     dc2:	9f 91       	pop	r25
     dc4:	8f 91       	pop	r24
     dc6:	7f 91       	pop	r23
     dc8:	6f 91       	pop	r22
     dca:	5f 91       	pop	r21
     dcc:	4f 91       	pop	r20
     dce:	3f 91       	pop	r19
     dd0:	2f 91       	pop	r18
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <TransformIntToString>:
/*- GLOBAL EXTERN VARIABLES -------------------------------*/
/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/

/*- APIs IMPLEMENTATION -----------------------------------*/
char_t* TransformIntToString(long long int Number)
{
     ddc:	2f 92       	push	r2
     dde:	3f 92       	push	r3
     de0:	4f 92       	push	r4
     de2:	5f 92       	push	r5
     de4:	6f 92       	push	r6
     de6:	7f 92       	push	r7
     de8:	8f 92       	push	r8
     dea:	9f 92       	push	r9
     dec:	af 92       	push	r10
     dee:	bf 92       	push	r11
     df0:	cf 92       	push	r12
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	28 97       	sbiw	r28, 0x08	; 8
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	2d 83       	std	Y+5, r18	; 0x05
     e12:	38 87       	std	Y+8, r19	; 0x08
     e14:	4e 83       	std	Y+6, r20	; 0x06
     e16:	5f 83       	std	Y+7, r21	; 0x07
     e18:	56 2e       	mov	r5, r22
     e1a:	47 2e       	mov	r4, r23
     e1c:	38 2e       	mov	r3, r24
     e1e:	29 2e       	mov	r2, r25
	static char_t Int_String[100]={0};
    uint8_t digits=0;
     e20:	61 2c       	mov	r6, r1
    while(Number/(long long int)pow(10,digits++));
     e22:	86 2c       	mov	r8, r6
     e24:	63 94       	inc	r6
     e26:	88 2d       	mov	r24, r8
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	9a 83       	std	Y+2, r25	; 0x02
     e32:	ab 83       	std	Y+3, r26	; 0x03
     e34:	bc 83       	std	Y+4, r27	; 0x04
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 00 09 	call	0x1200	; 0x1200 <__floatunsisf>
     e3e:	26 2f       	mov	r18, r22
     e40:	37 2f       	mov	r19, r23
     e42:	48 2f       	mov	r20, r24
     e44:	59 2f       	mov	r21, r25
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	80 e2       	ldi	r24, 0x20	; 32
     e4c:	91 e4       	ldi	r25, 0x41	; 65
     e4e:	0e 94 9e 09 	call	0x133c	; 0x133c <pow>
     e52:	69 83       	std	Y+1, r22	; 0x01
     e54:	7a 83       	std	Y+2, r23	; 0x02
     e56:	8b 83       	std	Y+3, r24	; 0x03
     e58:	9c 83       	std	Y+4, r25	; 0x04
     e5a:	69 81       	ldd	r22, Y+1	; 0x01
     e5c:	7a 81       	ldd	r23, Y+2	; 0x02
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	0e 94 95 08 	call	0x112a	; 0x112a <__fixsfdi>
     e66:	a2 2e       	mov	r10, r18
     e68:	b3 2e       	mov	r11, r19
     e6a:	c4 2e       	mov	r12, r20
     e6c:	d5 2e       	mov	r13, r21
     e6e:	e6 2e       	mov	r14, r22
     e70:	f7 2e       	mov	r15, r23
     e72:	08 2f       	mov	r16, r24
     e74:	19 2f       	mov	r17, r25
     e76:	2d 81       	ldd	r18, Y+5	; 0x05
     e78:	38 85       	ldd	r19, Y+8	; 0x08
     e7a:	4e 81       	ldd	r20, Y+6	; 0x06
     e7c:	5f 81       	ldd	r21, Y+7	; 0x07
     e7e:	65 2d       	mov	r22, r5
     e80:	74 2d       	mov	r23, r4
     e82:	83 2d       	mov	r24, r3
     e84:	92 2d       	mov	r25, r2
     e86:	0e 94 92 0b 	call	0x1724	; 0x1724 <__divdi3>
     e8a:	a0 e0       	ldi	r26, 0x00	; 0
     e8c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__cmpdi2_s8>
     e90:	41 f6       	brne	.-112    	; 0xe22 <TransformIntToString+0x46>
    digits--;
    uint8_t index=0;
    while (Number) 
     e92:	2d 81       	ldd	r18, Y+5	; 0x05
     e94:	38 85       	ldd	r19, Y+8	; 0x08
     e96:	4e 81       	ldd	r20, Y+6	; 0x06
     e98:	5f 81       	ldd	r21, Y+7	; 0x07
     e9a:	65 2d       	mov	r22, r5
     e9c:	74 2d       	mov	r23, r4
     e9e:	83 2d       	mov	r24, r3
     ea0:	92 2d       	mov	r25, r2
     ea2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__cmpdi2_s8>
     ea6:	09 f4       	brne	.+2      	; 0xeaa <TransformIntToString+0xce>
     ea8:	5f c0       	rjmp	.+190    	; 0xf68 <TransformIntToString+0x18c>
    uint8_t index=0;
     eaa:	19 82       	std	Y+1, r1	; 0x01
    { 
        Int_String[(digits-1)-index] = (Number%10) + '0'; 
     eac:	a8 2d       	mov	r26, r8
     eae:	a1 50       	subi	r26, 0x01	; 1
     eb0:	bb 0b       	sbc	r27, r27
     eb2:	4d 01       	movw	r8, r26
     eb4:	c4 01       	movw	r24, r8
     eb6:	b9 81       	ldd	r27, Y+1	; 0x01
     eb8:	8b 1b       	sub	r24, r27
     eba:	91 09       	sbc	r25, r1
     ebc:	fc 01       	movw	r30, r24
     ebe:	e2 56       	subi	r30, 0x62	; 98
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	3f 01       	movw	r6, r30
     ec4:	0f 2e       	mov	r0, r31
     ec6:	fa e0       	ldi	r31, 0x0A	; 10
     ec8:	af 2e       	mov	r10, r31
     eca:	f0 2d       	mov	r31, r0
     ecc:	b1 2c       	mov	r11, r1
     ece:	c1 2c       	mov	r12, r1
     ed0:	d1 2c       	mov	r13, r1
     ed2:	e1 2c       	mov	r14, r1
     ed4:	f1 2c       	mov	r15, r1
     ed6:	00 e0       	ldi	r16, 0x00	; 0
     ed8:	10 e0       	ldi	r17, 0x00	; 0
     eda:	2d 81       	ldd	r18, Y+5	; 0x05
     edc:	38 85       	ldd	r19, Y+8	; 0x08
     ede:	4e 81       	ldd	r20, Y+6	; 0x06
     ee0:	5f 81       	ldd	r21, Y+7	; 0x07
     ee2:	65 2d       	mov	r22, r5
     ee4:	74 2d       	mov	r23, r4
     ee6:	83 2d       	mov	r24, r3
     ee8:	92 2d       	mov	r25, r2
     eea:	0e 94 90 0b 	call	0x1720	; 0x1720 <__moddi3>
     eee:	20 5d       	subi	r18, 0xD0	; 208
     ef0:	d3 01       	movw	r26, r6
     ef2:	2c 93       	st	X, r18
        Number= Number/10; 
     ef4:	2d 81       	ldd	r18, Y+5	; 0x05
     ef6:	38 85       	ldd	r19, Y+8	; 0x08
     ef8:	4e 81       	ldd	r20, Y+6	; 0x06
     efa:	5f 81       	ldd	r21, Y+7	; 0x07
     efc:	65 2d       	mov	r22, r5
     efe:	74 2d       	mov	r23, r4
     f00:	83 2d       	mov	r24, r3
     f02:	92 2d       	mov	r25, r2
     f04:	0e 94 92 0b 	call	0x1724	; 0x1724 <__divdi3>
     f08:	2d 83       	std	Y+5, r18	; 0x05
     f0a:	38 87       	std	Y+8, r19	; 0x08
     f0c:	4e 83       	std	Y+6, r20	; 0x06
     f0e:	5f 83       	std	Y+7, r21	; 0x07
     f10:	56 2e       	mov	r5, r22
     f12:	47 2e       	mov	r4, r23
     f14:	38 2e       	mov	r3, r24
     f16:	29 2e       	mov	r2, r25
        index++;
     f18:	b9 81       	ldd	r27, Y+1	; 0x01
     f1a:	bf 5f       	subi	r27, 0xFF	; 255
     f1c:	b9 83       	std	Y+1, r27	; 0x01
    while (Number) 
     f1e:	a0 e0       	ldi	r26, 0x00	; 0
     f20:	0e 94 67 0c 	call	0x18ce	; 0x18ce <__cmpdi2_s8>
     f24:	39 f6       	brne	.-114    	; 0xeb4 <TransformIntToString+0xd8>
    } 
	Int_String[index]='\0';
     f26:	29 81       	ldd	r18, Y+1	; 0x01
     f28:	e2 2f       	mov	r30, r18
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	e2 56       	subi	r30, 0x62	; 98
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	10 82       	st	Z, r1
    return Int_String;
     f32:	8e e9       	ldi	r24, 0x9E	; 158
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	28 96       	adiw	r28, 0x08	; 8
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	8f 90       	pop	r8
     f5a:	7f 90       	pop	r7
     f5c:	6f 90       	pop	r6
     f5e:	5f 90       	pop	r5
     f60:	4f 90       	pop	r4
     f62:	3f 90       	pop	r3
     f64:	2f 90       	pop	r2
     f66:	08 95       	ret
    uint8_t index=0;
     f68:	19 82       	std	Y+1, r1	; 0x01
     f6a:	dd cf       	rjmp	.-70     	; 0xf26 <TransformIntToString+0x14a>

00000f6c <__subsf3>:
     f6c:	50 58       	subi	r21, 0x80	; 128

00000f6e <__addsf3>:
     f6e:	bb 27       	eor	r27, r27
     f70:	aa 27       	eor	r26, r26
     f72:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__addsf3x>
     f76:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_round>
     f7a:	0e 94 56 09 	call	0x12ac	; 0x12ac <__fp_pscA>
     f7e:	38 f0       	brcs	.+14     	; 0xf8e <__addsf3+0x20>
     f80:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__fp_pscB>
     f84:	20 f0       	brcs	.+8      	; 0xf8e <__addsf3+0x20>
     f86:	39 f4       	brne	.+14     	; 0xf96 <__addsf3+0x28>
     f88:	9f 3f       	cpi	r25, 0xFF	; 255
     f8a:	19 f4       	brne	.+6      	; 0xf92 <__addsf3+0x24>
     f8c:	26 f4       	brtc	.+8      	; 0xf96 <__addsf3+0x28>
     f8e:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_nan>
     f92:	0e f4       	brtc	.+2      	; 0xf96 <__addsf3+0x28>
     f94:	e0 95       	com	r30
     f96:	e7 fb       	bst	r30, 7
     f98:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__fp_inf>

00000f9c <__addsf3x>:
     f9c:	e9 2f       	mov	r30, r25
     f9e:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fp_split3>
     fa2:	58 f3       	brcs	.-42     	; 0xf7a <__addsf3+0xc>
     fa4:	ba 17       	cp	r27, r26
     fa6:	62 07       	cpc	r22, r18
     fa8:	73 07       	cpc	r23, r19
     faa:	84 07       	cpc	r24, r20
     fac:	95 07       	cpc	r25, r21
     fae:	20 f0       	brcs	.+8      	; 0xfb8 <__addsf3x+0x1c>
     fb0:	79 f4       	brne	.+30     	; 0xfd0 <__addsf3x+0x34>
     fb2:	a6 f5       	brtc	.+104    	; 0x101c <__addsf3x+0x80>
     fb4:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_zero>
     fb8:	0e f4       	brtc	.+2      	; 0xfbc <__addsf3x+0x20>
     fba:	e0 95       	com	r30
     fbc:	0b 2e       	mov	r0, r27
     fbe:	ba 2f       	mov	r27, r26
     fc0:	a0 2d       	mov	r26, r0
     fc2:	0b 01       	movw	r0, r22
     fc4:	b9 01       	movw	r22, r18
     fc6:	90 01       	movw	r18, r0
     fc8:	0c 01       	movw	r0, r24
     fca:	ca 01       	movw	r24, r20
     fcc:	a0 01       	movw	r20, r0
     fce:	11 24       	eor	r1, r1
     fd0:	ff 27       	eor	r31, r31
     fd2:	59 1b       	sub	r21, r25
     fd4:	99 f0       	breq	.+38     	; 0xffc <__addsf3x+0x60>
     fd6:	59 3f       	cpi	r21, 0xF9	; 249
     fd8:	50 f4       	brcc	.+20     	; 0xfee <__addsf3x+0x52>
     fda:	50 3e       	cpi	r21, 0xE0	; 224
     fdc:	68 f1       	brcs	.+90     	; 0x1038 <__addsf3x+0x9c>
     fde:	1a 16       	cp	r1, r26
     fe0:	f0 40       	sbci	r31, 0x00	; 0
     fe2:	a2 2f       	mov	r26, r18
     fe4:	23 2f       	mov	r18, r19
     fe6:	34 2f       	mov	r19, r20
     fe8:	44 27       	eor	r20, r20
     fea:	58 5f       	subi	r21, 0xF8	; 248
     fec:	f3 cf       	rjmp	.-26     	; 0xfd4 <__addsf3x+0x38>
     fee:	46 95       	lsr	r20
     ff0:	37 95       	ror	r19
     ff2:	27 95       	ror	r18
     ff4:	a7 95       	ror	r26
     ff6:	f0 40       	sbci	r31, 0x00	; 0
     ff8:	53 95       	inc	r21
     ffa:	c9 f7       	brne	.-14     	; 0xfee <__addsf3x+0x52>
     ffc:	7e f4       	brtc	.+30     	; 0x101c <__addsf3x+0x80>
     ffe:	1f 16       	cp	r1, r31
    1000:	ba 0b       	sbc	r27, r26
    1002:	62 0b       	sbc	r22, r18
    1004:	73 0b       	sbc	r23, r19
    1006:	84 0b       	sbc	r24, r20
    1008:	ba f0       	brmi	.+46     	; 0x1038 <__addsf3x+0x9c>
    100a:	91 50       	subi	r25, 0x01	; 1
    100c:	a1 f0       	breq	.+40     	; 0x1036 <__addsf3x+0x9a>
    100e:	ff 0f       	add	r31, r31
    1010:	bb 1f       	adc	r27, r27
    1012:	66 1f       	adc	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	88 1f       	adc	r24, r24
    1018:	c2 f7       	brpl	.-16     	; 0x100a <__addsf3x+0x6e>
    101a:	0e c0       	rjmp	.+28     	; 0x1038 <__addsf3x+0x9c>
    101c:	ba 0f       	add	r27, r26
    101e:	62 1f       	adc	r22, r18
    1020:	73 1f       	adc	r23, r19
    1022:	84 1f       	adc	r24, r20
    1024:	48 f4       	brcc	.+18     	; 0x1038 <__addsf3x+0x9c>
    1026:	87 95       	ror	r24
    1028:	77 95       	ror	r23
    102a:	67 95       	ror	r22
    102c:	b7 95       	ror	r27
    102e:	f7 95       	ror	r31
    1030:	9e 3f       	cpi	r25, 0xFE	; 254
    1032:	08 f0       	brcs	.+2      	; 0x1036 <__addsf3x+0x9a>
    1034:	b0 cf       	rjmp	.-160    	; 0xf96 <__addsf3+0x28>
    1036:	93 95       	inc	r25
    1038:	88 0f       	add	r24, r24
    103a:	08 f0       	brcs	.+2      	; 0x103e <__addsf3x+0xa2>
    103c:	99 27       	eor	r25, r25
    103e:	ee 0f       	add	r30, r30
    1040:	97 95       	ror	r25
    1042:	87 95       	ror	r24
    1044:	08 95       	ret

00001046 <__divsf3>:
    1046:	0e 94 37 08 	call	0x106e	; 0x106e <__divsf3x>
    104a:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_round>
    104e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__fp_pscB>
    1052:	58 f0       	brcs	.+22     	; 0x106a <__divsf3+0x24>
    1054:	0e 94 56 09 	call	0x12ac	; 0x12ac <__fp_pscA>
    1058:	40 f0       	brcs	.+16     	; 0x106a <__divsf3+0x24>
    105a:	29 f4       	brne	.+10     	; 0x1066 <__divsf3+0x20>
    105c:	5f 3f       	cpi	r21, 0xFF	; 255
    105e:	29 f0       	breq	.+10     	; 0x106a <__divsf3+0x24>
    1060:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__fp_inf>
    1064:	51 11       	cpse	r21, r1
    1066:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__fp_szero>
    106a:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_nan>

0000106e <__divsf3x>:
    106e:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fp_split3>
    1072:	68 f3       	brcs	.-38     	; 0x104e <__divsf3+0x8>

00001074 <__divsf3_pse>:
    1074:	99 23       	and	r25, r25
    1076:	b1 f3       	breq	.-20     	; 0x1064 <__divsf3+0x1e>
    1078:	55 23       	and	r21, r21
    107a:	91 f3       	breq	.-28     	; 0x1060 <__divsf3+0x1a>
    107c:	95 1b       	sub	r25, r21
    107e:	55 0b       	sbc	r21, r21
    1080:	bb 27       	eor	r27, r27
    1082:	aa 27       	eor	r26, r26
    1084:	62 17       	cp	r22, r18
    1086:	73 07       	cpc	r23, r19
    1088:	84 07       	cpc	r24, r20
    108a:	38 f0       	brcs	.+14     	; 0x109a <__divsf3_pse+0x26>
    108c:	9f 5f       	subi	r25, 0xFF	; 255
    108e:	5f 4f       	sbci	r21, 0xFF	; 255
    1090:	22 0f       	add	r18, r18
    1092:	33 1f       	adc	r19, r19
    1094:	44 1f       	adc	r20, r20
    1096:	aa 1f       	adc	r26, r26
    1098:	a9 f3       	breq	.-22     	; 0x1084 <__divsf3_pse+0x10>
    109a:	35 d0       	rcall	.+106    	; 0x1106 <__divsf3_pse+0x92>
    109c:	0e 2e       	mov	r0, r30
    109e:	3a f0       	brmi	.+14     	; 0x10ae <__divsf3_pse+0x3a>
    10a0:	e0 e8       	ldi	r30, 0x80	; 128
    10a2:	32 d0       	rcall	.+100    	; 0x1108 <__divsf3_pse+0x94>
    10a4:	91 50       	subi	r25, 0x01	; 1
    10a6:	50 40       	sbci	r21, 0x00	; 0
    10a8:	e6 95       	lsr	r30
    10aa:	00 1c       	adc	r0, r0
    10ac:	ca f7       	brpl	.-14     	; 0x10a0 <__divsf3_pse+0x2c>
    10ae:	2b d0       	rcall	.+86     	; 0x1106 <__divsf3_pse+0x92>
    10b0:	fe 2f       	mov	r31, r30
    10b2:	29 d0       	rcall	.+82     	; 0x1106 <__divsf3_pse+0x92>
    10b4:	66 0f       	add	r22, r22
    10b6:	77 1f       	adc	r23, r23
    10b8:	88 1f       	adc	r24, r24
    10ba:	bb 1f       	adc	r27, r27
    10bc:	26 17       	cp	r18, r22
    10be:	37 07       	cpc	r19, r23
    10c0:	48 07       	cpc	r20, r24
    10c2:	ab 07       	cpc	r26, r27
    10c4:	b0 e8       	ldi	r27, 0x80	; 128
    10c6:	09 f0       	breq	.+2      	; 0x10ca <__divsf3_pse+0x56>
    10c8:	bb 0b       	sbc	r27, r27
    10ca:	80 2d       	mov	r24, r0
    10cc:	bf 01       	movw	r22, r30
    10ce:	ff 27       	eor	r31, r31
    10d0:	93 58       	subi	r25, 0x83	; 131
    10d2:	5f 4f       	sbci	r21, 0xFF	; 255
    10d4:	3a f0       	brmi	.+14     	; 0x10e4 <__divsf3_pse+0x70>
    10d6:	9e 3f       	cpi	r25, 0xFE	; 254
    10d8:	51 05       	cpc	r21, r1
    10da:	78 f0       	brcs	.+30     	; 0x10fa <__divsf3_pse+0x86>
    10dc:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__fp_inf>
    10e0:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__fp_szero>
    10e4:	5f 3f       	cpi	r21, 0xFF	; 255
    10e6:	e4 f3       	brlt	.-8      	; 0x10e0 <__divsf3_pse+0x6c>
    10e8:	98 3e       	cpi	r25, 0xE8	; 232
    10ea:	d4 f3       	brlt	.-12     	; 0x10e0 <__divsf3_pse+0x6c>
    10ec:	86 95       	lsr	r24
    10ee:	77 95       	ror	r23
    10f0:	67 95       	ror	r22
    10f2:	b7 95       	ror	r27
    10f4:	f7 95       	ror	r31
    10f6:	9f 5f       	subi	r25, 0xFF	; 255
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <__divsf3_pse+0x78>
    10fa:	88 0f       	add	r24, r24
    10fc:	91 1d       	adc	r25, r1
    10fe:	96 95       	lsr	r25
    1100:	87 95       	ror	r24
    1102:	97 f9       	bld	r25, 7
    1104:	08 95       	ret
    1106:	e1 e0       	ldi	r30, 0x01	; 1
    1108:	66 0f       	add	r22, r22
    110a:	77 1f       	adc	r23, r23
    110c:	88 1f       	adc	r24, r24
    110e:	bb 1f       	adc	r27, r27
    1110:	62 17       	cp	r22, r18
    1112:	73 07       	cpc	r23, r19
    1114:	84 07       	cpc	r24, r20
    1116:	ba 07       	cpc	r27, r26
    1118:	20 f0       	brcs	.+8      	; 0x1122 <__divsf3_pse+0xae>
    111a:	62 1b       	sub	r22, r18
    111c:	73 0b       	sbc	r23, r19
    111e:	84 0b       	sbc	r24, r20
    1120:	ba 0b       	sbc	r27, r26
    1122:	ee 1f       	adc	r30, r30
    1124:	88 f7       	brcc	.-30     	; 0x1108 <__divsf3_pse+0x94>
    1126:	e0 95       	com	r30
    1128:	08 95       	ret

0000112a <__fixsfdi>:
    112a:	be e3       	ldi	r27, 0x3E	; 62
    112c:	04 d0       	rcall	.+8      	; 0x1136 <__fixunssfdi+0x2>
    112e:	08 f4       	brcc	.+2      	; 0x1132 <__fixsfdi+0x8>
    1130:	90 e8       	ldi	r25, 0x80	; 128
    1132:	08 95       	ret

00001134 <__fixunssfdi>:
    1134:	bf e3       	ldi	r27, 0x3F	; 63
    1136:	22 27       	eor	r18, r18
    1138:	33 27       	eor	r19, r19
    113a:	a9 01       	movw	r20, r18
    113c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__fp_splitA>
    1140:	60 f1       	brcs	.+88     	; 0x119a <__fixunssfdi+0x66>
    1142:	9f 57       	subi	r25, 0x7F	; 127
    1144:	48 f1       	brcs	.+82     	; 0x1198 <__fixunssfdi+0x64>
    1146:	b9 17       	cp	r27, r25
    1148:	40 f1       	brcs	.+80     	; 0x119a <__fixunssfdi+0x66>
    114a:	bf e3       	ldi	r27, 0x3F	; 63
    114c:	b9 1b       	sub	r27, r25
    114e:	99 27       	eor	r25, r25
    1150:	b8 50       	subi	r27, 0x08	; 8
    1152:	3a f4       	brpl	.+14     	; 0x1162 <__fixunssfdi+0x2e>
    1154:	66 0f       	add	r22, r22
    1156:	77 1f       	adc	r23, r23
    1158:	88 1f       	adc	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	b3 95       	inc	r27
    115e:	d2 f3       	brmi	.-12     	; 0x1154 <__fixunssfdi+0x20>
    1160:	16 c0       	rjmp	.+44     	; 0x118e <__fixunssfdi+0x5a>
    1162:	b8 50       	subi	r27, 0x08	; 8
    1164:	4a f0       	brmi	.+18     	; 0x1178 <__fixunssfdi+0x44>
    1166:	23 2f       	mov	r18, r19
    1168:	34 2f       	mov	r19, r20
    116a:	45 2f       	mov	r20, r21
    116c:	56 2f       	mov	r21, r22
    116e:	67 2f       	mov	r22, r23
    1170:	78 2f       	mov	r23, r24
    1172:	88 27       	eor	r24, r24
    1174:	b8 50       	subi	r27, 0x08	; 8
    1176:	ba f7       	brpl	.-18     	; 0x1166 <__fixunssfdi+0x32>
    1178:	b8 5f       	subi	r27, 0xF8	; 248
    117a:	49 f0       	breq	.+18     	; 0x118e <__fixunssfdi+0x5a>
    117c:	86 95       	lsr	r24
    117e:	77 95       	ror	r23
    1180:	67 95       	ror	r22
    1182:	57 95       	ror	r21
    1184:	47 95       	ror	r20
    1186:	37 95       	ror	r19
    1188:	27 95       	ror	r18
    118a:	ba 95       	dec	r27
    118c:	b9 f7       	brne	.-18     	; 0x117c <__fixunssfdi+0x48>
    118e:	16 f4       	brtc	.+4      	; 0x1194 <__fixunssfdi+0x60>
    1190:	0e 94 46 09 	call	0x128c	; 0x128c <__fp_negdi>
    1194:	88 94       	clc
    1196:	08 95       	ret
    1198:	88 94       	clc
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	cb 01       	movw	r24, r22
    11a0:	08 95       	ret

000011a2 <__fixunssfsi>:
    11a2:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__fp_splitA>
    11a6:	88 f0       	brcs	.+34     	; 0x11ca <__fixunssfsi+0x28>
    11a8:	9f 57       	subi	r25, 0x7F	; 127
    11aa:	98 f0       	brcs	.+38     	; 0x11d2 <__fixunssfsi+0x30>
    11ac:	b9 2f       	mov	r27, r25
    11ae:	99 27       	eor	r25, r25
    11b0:	b7 51       	subi	r27, 0x17	; 23
    11b2:	b0 f0       	brcs	.+44     	; 0x11e0 <__fixunssfsi+0x3e>
    11b4:	e1 f0       	breq	.+56     	; 0x11ee <__fixunssfsi+0x4c>
    11b6:	66 0f       	add	r22, r22
    11b8:	77 1f       	adc	r23, r23
    11ba:	88 1f       	adc	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	1a f0       	brmi	.+6      	; 0x11c6 <__fixunssfsi+0x24>
    11c0:	ba 95       	dec	r27
    11c2:	c9 f7       	brne	.-14     	; 0x11b6 <__fixunssfsi+0x14>
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <__fixunssfsi+0x4c>
    11c6:	b1 30       	cpi	r27, 0x01	; 1
    11c8:	91 f0       	breq	.+36     	; 0x11ee <__fixunssfsi+0x4c>
    11ca:	0e 94 97 09 	call	0x132e	; 0x132e <__fp_zero>
    11ce:	b1 e0       	ldi	r27, 0x01	; 1
    11d0:	08 95       	ret
    11d2:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_zero>
    11d6:	67 2f       	mov	r22, r23
    11d8:	78 2f       	mov	r23, r24
    11da:	88 27       	eor	r24, r24
    11dc:	b8 5f       	subi	r27, 0xF8	; 248
    11de:	39 f0       	breq	.+14     	; 0x11ee <__fixunssfsi+0x4c>
    11e0:	b9 3f       	cpi	r27, 0xF9	; 249
    11e2:	cc f3       	brlt	.-14     	; 0x11d6 <__fixunssfsi+0x34>
    11e4:	86 95       	lsr	r24
    11e6:	77 95       	ror	r23
    11e8:	67 95       	ror	r22
    11ea:	b3 95       	inc	r27
    11ec:	d9 f7       	brne	.-10     	; 0x11e4 <__fixunssfsi+0x42>
    11ee:	3e f4       	brtc	.+14     	; 0x11fe <__fixunssfsi+0x5c>
    11f0:	90 95       	com	r25
    11f2:	80 95       	com	r24
    11f4:	70 95       	com	r23
    11f6:	61 95       	neg	r22
    11f8:	7f 4f       	sbci	r23, 0xFF	; 255
    11fa:	8f 4f       	sbci	r24, 0xFF	; 255
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	08 95       	ret

00001200 <__floatunsisf>:
    1200:	e8 94       	clt
    1202:	09 c0       	rjmp	.+18     	; 0x1216 <__floatsisf+0x12>

00001204 <__floatsisf>:
    1204:	97 fb       	bst	r25, 7
    1206:	3e f4       	brtc	.+14     	; 0x1216 <__floatsisf+0x12>
    1208:	90 95       	com	r25
    120a:	80 95       	com	r24
    120c:	70 95       	com	r23
    120e:	61 95       	neg	r22
    1210:	7f 4f       	sbci	r23, 0xFF	; 255
    1212:	8f 4f       	sbci	r24, 0xFF	; 255
    1214:	9f 4f       	sbci	r25, 0xFF	; 255
    1216:	99 23       	and	r25, r25
    1218:	a9 f0       	breq	.+42     	; 0x1244 <__floatsisf+0x40>
    121a:	f9 2f       	mov	r31, r25
    121c:	96 e9       	ldi	r25, 0x96	; 150
    121e:	bb 27       	eor	r27, r27
    1220:	93 95       	inc	r25
    1222:	f6 95       	lsr	r31
    1224:	87 95       	ror	r24
    1226:	77 95       	ror	r23
    1228:	67 95       	ror	r22
    122a:	b7 95       	ror	r27
    122c:	f1 11       	cpse	r31, r1
    122e:	f8 cf       	rjmp	.-16     	; 0x1220 <__floatsisf+0x1c>
    1230:	fa f4       	brpl	.+62     	; 0x1270 <__floatsisf+0x6c>
    1232:	bb 0f       	add	r27, r27
    1234:	11 f4       	brne	.+4      	; 0x123a <__floatsisf+0x36>
    1236:	60 ff       	sbrs	r22, 0
    1238:	1b c0       	rjmp	.+54     	; 0x1270 <__floatsisf+0x6c>
    123a:	6f 5f       	subi	r22, 0xFF	; 255
    123c:	7f 4f       	sbci	r23, 0xFF	; 255
    123e:	8f 4f       	sbci	r24, 0xFF	; 255
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	16 c0       	rjmp	.+44     	; 0x1270 <__floatsisf+0x6c>
    1244:	88 23       	and	r24, r24
    1246:	11 f0       	breq	.+4      	; 0x124c <__floatsisf+0x48>
    1248:	96 e9       	ldi	r25, 0x96	; 150
    124a:	11 c0       	rjmp	.+34     	; 0x126e <__floatsisf+0x6a>
    124c:	77 23       	and	r23, r23
    124e:	21 f0       	breq	.+8      	; 0x1258 <__floatsisf+0x54>
    1250:	9e e8       	ldi	r25, 0x8E	; 142
    1252:	87 2f       	mov	r24, r23
    1254:	76 2f       	mov	r23, r22
    1256:	05 c0       	rjmp	.+10     	; 0x1262 <__floatsisf+0x5e>
    1258:	66 23       	and	r22, r22
    125a:	71 f0       	breq	.+28     	; 0x1278 <__floatsisf+0x74>
    125c:	96 e8       	ldi	r25, 0x86	; 134
    125e:	86 2f       	mov	r24, r22
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	2a f0       	brmi	.+10     	; 0x1270 <__floatsisf+0x6c>
    1266:	9a 95       	dec	r25
    1268:	66 0f       	add	r22, r22
    126a:	77 1f       	adc	r23, r23
    126c:	88 1f       	adc	r24, r24
    126e:	da f7       	brpl	.-10     	; 0x1266 <__floatsisf+0x62>
    1270:	88 0f       	add	r24, r24
    1272:	96 95       	lsr	r25
    1274:	87 95       	ror	r24
    1276:	97 f9       	bld	r25, 7
    1278:	08 95       	ret

0000127a <__fp_inf>:
    127a:	97 f9       	bld	r25, 7
    127c:	9f 67       	ori	r25, 0x7F	; 127
    127e:	80 e8       	ldi	r24, 0x80	; 128
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	08 95       	ret

00001286 <__fp_nan>:
    1286:	9f ef       	ldi	r25, 0xFF	; 255
    1288:	80 ec       	ldi	r24, 0xC0	; 192
    128a:	08 95       	ret

0000128c <__fp_negdi>:
    128c:	90 95       	com	r25
    128e:	80 95       	com	r24
    1290:	70 95       	com	r23
    1292:	60 95       	com	r22
    1294:	50 95       	com	r21
    1296:	40 95       	com	r20
    1298:	30 95       	com	r19
    129a:	21 95       	neg	r18
    129c:	3f 4f       	sbci	r19, 0xFF	; 255
    129e:	4f 4f       	sbci	r20, 0xFF	; 255
    12a0:	5f 4f       	sbci	r21, 0xFF	; 255
    12a2:	6f 4f       	sbci	r22, 0xFF	; 255
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	8f 4f       	sbci	r24, 0xFF	; 255
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	08 95       	ret

000012ac <__fp_pscA>:
    12ac:	00 24       	eor	r0, r0
    12ae:	0a 94       	dec	r0
    12b0:	16 16       	cp	r1, r22
    12b2:	17 06       	cpc	r1, r23
    12b4:	18 06       	cpc	r1, r24
    12b6:	09 06       	cpc	r0, r25
    12b8:	08 95       	ret

000012ba <__fp_pscB>:
    12ba:	00 24       	eor	r0, r0
    12bc:	0a 94       	dec	r0
    12be:	12 16       	cp	r1, r18
    12c0:	13 06       	cpc	r1, r19
    12c2:	14 06       	cpc	r1, r20
    12c4:	05 06       	cpc	r0, r21
    12c6:	08 95       	ret

000012c8 <__fp_round>:
    12c8:	09 2e       	mov	r0, r25
    12ca:	03 94       	inc	r0
    12cc:	00 0c       	add	r0, r0
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <__fp_round+0xc>
    12d0:	88 23       	and	r24, r24
    12d2:	52 f0       	brmi	.+20     	; 0x12e8 <__fp_round+0x20>
    12d4:	bb 0f       	add	r27, r27
    12d6:	40 f4       	brcc	.+16     	; 0x12e8 <__fp_round+0x20>
    12d8:	bf 2b       	or	r27, r31
    12da:	11 f4       	brne	.+4      	; 0x12e0 <__fp_round+0x18>
    12dc:	60 ff       	sbrs	r22, 0
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <__fp_round+0x20>
    12e0:	6f 5f       	subi	r22, 0xFF	; 255
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	8f 4f       	sbci	r24, 0xFF	; 255
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	08 95       	ret

000012ea <__fp_split3>:
    12ea:	57 fd       	sbrc	r21, 7
    12ec:	90 58       	subi	r25, 0x80	; 128
    12ee:	44 0f       	add	r20, r20
    12f0:	55 1f       	adc	r21, r21
    12f2:	59 f0       	breq	.+22     	; 0x130a <__fp_splitA+0x10>
    12f4:	5f 3f       	cpi	r21, 0xFF	; 255
    12f6:	71 f0       	breq	.+28     	; 0x1314 <__fp_splitA+0x1a>
    12f8:	47 95       	ror	r20

000012fa <__fp_splitA>:
    12fa:	88 0f       	add	r24, r24
    12fc:	97 fb       	bst	r25, 7
    12fe:	99 1f       	adc	r25, r25
    1300:	61 f0       	breq	.+24     	; 0x131a <__fp_splitA+0x20>
    1302:	9f 3f       	cpi	r25, 0xFF	; 255
    1304:	79 f0       	breq	.+30     	; 0x1324 <__fp_splitA+0x2a>
    1306:	87 95       	ror	r24
    1308:	08 95       	ret
    130a:	12 16       	cp	r1, r18
    130c:	13 06       	cpc	r1, r19
    130e:	14 06       	cpc	r1, r20
    1310:	55 1f       	adc	r21, r21
    1312:	f2 cf       	rjmp	.-28     	; 0x12f8 <__fp_split3+0xe>
    1314:	46 95       	lsr	r20
    1316:	f1 df       	rcall	.-30     	; 0x12fa <__fp_splitA>
    1318:	08 c0       	rjmp	.+16     	; 0x132a <__fp_splitA+0x30>
    131a:	16 16       	cp	r1, r22
    131c:	17 06       	cpc	r1, r23
    131e:	18 06       	cpc	r1, r24
    1320:	99 1f       	adc	r25, r25
    1322:	f1 cf       	rjmp	.-30     	; 0x1306 <__fp_splitA+0xc>
    1324:	86 95       	lsr	r24
    1326:	71 05       	cpc	r23, r1
    1328:	61 05       	cpc	r22, r1
    132a:	08 94       	sec
    132c:	08 95       	ret

0000132e <__fp_zero>:
    132e:	e8 94       	clt

00001330 <__fp_szero>:
    1330:	bb 27       	eor	r27, r27
    1332:	66 27       	eor	r22, r22
    1334:	77 27       	eor	r23, r23
    1336:	cb 01       	movw	r24, r22
    1338:	97 f9       	bld	r25, 7
    133a:	08 95       	ret

0000133c <pow>:
    133c:	fa 01       	movw	r30, r20
    133e:	ee 0f       	add	r30, r30
    1340:	ff 1f       	adc	r31, r31
    1342:	30 96       	adiw	r30, 0x00	; 0
    1344:	21 05       	cpc	r18, r1
    1346:	31 05       	cpc	r19, r1
    1348:	a1 f1       	breq	.+104    	; 0x13b2 <pow+0x76>
    134a:	61 15       	cp	r22, r1
    134c:	71 05       	cpc	r23, r1
    134e:	61 f4       	brne	.+24     	; 0x1368 <pow+0x2c>
    1350:	80 38       	cpi	r24, 0x80	; 128
    1352:	bf e3       	ldi	r27, 0x3F	; 63
    1354:	9b 07       	cpc	r25, r27
    1356:	49 f1       	breq	.+82     	; 0x13aa <pow+0x6e>
    1358:	68 94       	set
    135a:	90 38       	cpi	r25, 0x80	; 128
    135c:	81 05       	cpc	r24, r1
    135e:	61 f0       	breq	.+24     	; 0x1378 <pow+0x3c>
    1360:	80 38       	cpi	r24, 0x80	; 128
    1362:	bf ef       	ldi	r27, 0xFF	; 255
    1364:	9b 07       	cpc	r25, r27
    1366:	41 f0       	breq	.+16     	; 0x1378 <pow+0x3c>
    1368:	99 23       	and	r25, r25
    136a:	4a f5       	brpl	.+82     	; 0x13be <pow+0x82>
    136c:	ff 3f       	cpi	r31, 0xFF	; 255
    136e:	e1 05       	cpc	r30, r1
    1370:	31 05       	cpc	r19, r1
    1372:	21 05       	cpc	r18, r1
    1374:	19 f1       	breq	.+70     	; 0x13bc <pow+0x80>
    1376:	e8 94       	clt
    1378:	08 94       	sec
    137a:	e7 95       	ror	r30
    137c:	d9 01       	movw	r26, r18
    137e:	aa 23       	and	r26, r26
    1380:	29 f4       	brne	.+10     	; 0x138c <pow+0x50>
    1382:	ab 2f       	mov	r26, r27
    1384:	be 2f       	mov	r27, r30
    1386:	f8 5f       	subi	r31, 0xF8	; 248
    1388:	d0 f3       	brcs	.-12     	; 0x137e <pow+0x42>
    138a:	10 c0       	rjmp	.+32     	; 0x13ac <pow+0x70>
    138c:	ff 5f       	subi	r31, 0xFF	; 255
    138e:	70 f4       	brcc	.+28     	; 0x13ac <pow+0x70>
    1390:	a6 95       	lsr	r26
    1392:	e0 f7       	brcc	.-8      	; 0x138c <pow+0x50>
    1394:	f7 39       	cpi	r31, 0x97	; 151
    1396:	50 f0       	brcs	.+20     	; 0x13ac <pow+0x70>
    1398:	19 f0       	breq	.+6      	; 0x13a0 <pow+0x64>
    139a:	ff 3a       	cpi	r31, 0xAF	; 175
    139c:	38 f4       	brcc	.+14     	; 0x13ac <pow+0x70>
    139e:	9f 77       	andi	r25, 0x7F	; 127
    13a0:	9f 93       	push	r25
    13a2:	0d d0       	rcall	.+26     	; 0x13be <pow+0x82>
    13a4:	0f 90       	pop	r0
    13a6:	07 fc       	sbrc	r0, 7
    13a8:	90 58       	subi	r25, 0x80	; 128
    13aa:	08 95       	ret
    13ac:	46 f0       	brts	.+16     	; 0x13be <pow+0x82>
    13ae:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_nan>
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	80 e8       	ldi	r24, 0x80	; 128
    13b8:	9f e3       	ldi	r25, 0x3F	; 63
    13ba:	08 95       	ret
    13bc:	4f e7       	ldi	r20, 0x7F	; 127
    13be:	9f 77       	andi	r25, 0x7F	; 127
    13c0:	5f 93       	push	r21
    13c2:	4f 93       	push	r20
    13c4:	3f 93       	push	r19
    13c6:	2f 93       	push	r18
    13c8:	0e 94 99 0a 	call	0x1532	; 0x1532 <log>
    13cc:	2f 91       	pop	r18
    13ce:	3f 91       	pop	r19
    13d0:	4f 91       	pop	r20
    13d2:	5f 91       	pop	r21
    13d4:	0e 94 15 0b 	call	0x162a	; 0x162a <__mulsf3>
    13d8:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <exp>
    13dc:	29 f4       	brne	.+10     	; 0x13e8 <pow+0xac>
    13de:	16 f0       	brts	.+4      	; 0x13e4 <pow+0xa8>
    13e0:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__fp_inf>
    13e4:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_zero>
    13e8:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_nan>

000013ec <exp>:
    13ec:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__fp_splitA>
    13f0:	a8 f3       	brcs	.-22     	; 0x13dc <pow+0xa0>
    13f2:	96 38       	cpi	r25, 0x86	; 134
    13f4:	a0 f7       	brcc	.-24     	; 0x13de <pow+0xa2>
    13f6:	07 f8       	bld	r0, 7
    13f8:	0f 92       	push	r0
    13fa:	e8 94       	clt
    13fc:	2b e3       	ldi	r18, 0x3B	; 59
    13fe:	3a ea       	ldi	r19, 0xAA	; 170
    1400:	48 eb       	ldi	r20, 0xB8	; 184
    1402:	5f e7       	ldi	r21, 0x7F	; 127
    1404:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__mulsf3_pse>
    1408:	0f 92       	push	r0
    140a:	0f 92       	push	r0
    140c:	0f 92       	push	r0
    140e:	4d b7       	in	r20, 0x3d	; 61
    1410:	5e b7       	in	r21, 0x3e	; 62
    1412:	0f 92       	push	r0
    1414:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <modf>
    1418:	e4 e5       	ldi	r30, 0x54	; 84
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_powser>
    1420:	4f 91       	pop	r20
    1422:	5f 91       	pop	r21
    1424:	ef 91       	pop	r30
    1426:	ff 91       	pop	r31
    1428:	e5 95       	asr	r30
    142a:	ee 1f       	adc	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	49 f0       	breq	.+18     	; 0x1442 <exp+0x56>
    1430:	fe 57       	subi	r31, 0x7E	; 126
    1432:	e0 68       	ori	r30, 0x80	; 128
    1434:	44 27       	eor	r20, r20
    1436:	ee 0f       	add	r30, r30
    1438:	44 1f       	adc	r20, r20
    143a:	fa 95       	dec	r31
    143c:	e1 f7       	brne	.-8      	; 0x1436 <exp+0x4a>
    143e:	41 95       	neg	r20
    1440:	55 0b       	sbc	r21, r21
    1442:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <ldexp>
    1446:	0f 90       	pop	r0
    1448:	07 fe       	sbrs	r0, 7
    144a:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <inverse>
    144e:	08 95       	ret

00001450 <__fp_powser>:
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	1f 93       	push	r17
    1456:	0f 93       	push	r16
    1458:	ff 92       	push	r15
    145a:	ef 92       	push	r14
    145c:	df 92       	push	r13
    145e:	7b 01       	movw	r14, r22
    1460:	8c 01       	movw	r16, r24
    1462:	68 94       	set
    1464:	06 c0       	rjmp	.+12     	; 0x1472 <__fp_powser+0x22>
    1466:	da 2e       	mov	r13, r26
    1468:	ef 01       	movw	r28, r30
    146a:	0e 94 28 0b 	call	0x1650	; 0x1650 <__mulsf3x>
    146e:	fe 01       	movw	r30, r28
    1470:	e8 94       	clt
    1472:	a5 91       	lpm	r26, Z+
    1474:	25 91       	lpm	r18, Z+
    1476:	35 91       	lpm	r19, Z+
    1478:	45 91       	lpm	r20, Z+
    147a:	55 91       	lpm	r21, Z+
    147c:	a6 f3       	brts	.-24     	; 0x1466 <__fp_powser+0x16>
    147e:	ef 01       	movw	r28, r30
    1480:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__addsf3x>
    1484:	fe 01       	movw	r30, r28
    1486:	97 01       	movw	r18, r14
    1488:	a8 01       	movw	r20, r16
    148a:	da 94       	dec	r13
    148c:	69 f7       	brne	.-38     	; 0x1468 <__fp_powser+0x18>
    148e:	df 90       	pop	r13
    1490:	ef 90       	pop	r14
    1492:	ff 90       	pop	r15
    1494:	0f 91       	pop	r16
    1496:	1f 91       	pop	r17
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <inverse>:
    149e:	9b 01       	movw	r18, r22
    14a0:	ac 01       	movw	r20, r24
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	80 e8       	ldi	r24, 0x80	; 128
    14a8:	9f e3       	ldi	r25, 0x3F	; 63
    14aa:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__divsf3>
    14ae:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__fp_inf>
    14b2:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__fp_mpack>

000014b6 <ldexp>:
    14b6:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__fp_splitA>
    14ba:	d8 f3       	brcs	.-10     	; 0x14b2 <inverse+0x14>
    14bc:	99 23       	and	r25, r25
    14be:	c9 f3       	breq	.-14     	; 0x14b2 <inverse+0x14>
    14c0:	94 0f       	add	r25, r20
    14c2:	51 1d       	adc	r21, r1
    14c4:	a3 f3       	brvs	.-24     	; 0x14ae <inverse+0x10>
    14c6:	91 50       	subi	r25, 0x01	; 1
    14c8:	50 40       	sbci	r21, 0x00	; 0
    14ca:	94 f0       	brlt	.+36     	; 0x14f0 <ldexp+0x3a>
    14cc:	59 f0       	breq	.+22     	; 0x14e4 <ldexp+0x2e>
    14ce:	88 23       	and	r24, r24
    14d0:	32 f0       	brmi	.+12     	; 0x14de <ldexp+0x28>
    14d2:	66 0f       	add	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	88 1f       	adc	r24, r24
    14d8:	91 50       	subi	r25, 0x01	; 1
    14da:	50 40       	sbci	r21, 0x00	; 0
    14dc:	c1 f7       	brne	.-16     	; 0x14ce <ldexp+0x18>
    14de:	9e 3f       	cpi	r25, 0xFE	; 254
    14e0:	51 05       	cpc	r21, r1
    14e2:	2c f7       	brge	.-54     	; 0x14ae <inverse+0x10>
    14e4:	88 0f       	add	r24, r24
    14e6:	91 1d       	adc	r25, r1
    14e8:	96 95       	lsr	r25
    14ea:	87 95       	ror	r24
    14ec:	97 f9       	bld	r25, 7
    14ee:	08 95       	ret
    14f0:	5f 3f       	cpi	r21, 0xFF	; 255
    14f2:	ac f0       	brlt	.+42     	; 0x151e <ldexp+0x68>
    14f4:	98 3e       	cpi	r25, 0xE8	; 232
    14f6:	9c f0       	brlt	.+38     	; 0x151e <ldexp+0x68>
    14f8:	bb 27       	eor	r27, r27
    14fa:	86 95       	lsr	r24
    14fc:	77 95       	ror	r23
    14fe:	67 95       	ror	r22
    1500:	b7 95       	ror	r27
    1502:	08 f4       	brcc	.+2      	; 0x1506 <ldexp+0x50>
    1504:	b1 60       	ori	r27, 0x01	; 1
    1506:	93 95       	inc	r25
    1508:	c1 f7       	brne	.-16     	; 0x14fa <ldexp+0x44>
    150a:	bb 0f       	add	r27, r27
    150c:	58 f7       	brcc	.-42     	; 0x14e4 <ldexp+0x2e>
    150e:	11 f4       	brne	.+4      	; 0x1514 <ldexp+0x5e>
    1510:	60 ff       	sbrs	r22, 0
    1512:	e8 cf       	rjmp	.-48     	; 0x14e4 <ldexp+0x2e>
    1514:	6f 5f       	subi	r22, 0xFF	; 255
    1516:	7f 4f       	sbci	r23, 0xFF	; 255
    1518:	8f 4f       	sbci	r24, 0xFF	; 255
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	e3 cf       	rjmp	.-58     	; 0x14e4 <ldexp+0x2e>
    151e:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__fp_szero>
    1522:	16 f0       	brts	.+4      	; 0x1528 <ldexp+0x72>
    1524:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <__fp_mpack>
    1528:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_nan>
    152c:	68 94       	set
    152e:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__fp_inf>

00001532 <log>:
    1532:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__fp_splitA>
    1536:	a8 f3       	brcs	.-22     	; 0x1522 <ldexp+0x6c>
    1538:	99 23       	and	r25, r25
    153a:	c1 f3       	breq	.-16     	; 0x152c <ldexp+0x76>
    153c:	ae f3       	brts	.-22     	; 0x1528 <ldexp+0x72>
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	1f 93       	push	r17
    1544:	0f 93       	push	r16
    1546:	ff 92       	push	r15
    1548:	c9 2f       	mov	r28, r25
    154a:	dd 27       	eor	r29, r29
    154c:	88 23       	and	r24, r24
    154e:	2a f0       	brmi	.+10     	; 0x155a <log+0x28>
    1550:	21 97       	sbiw	r28, 0x01	; 1
    1552:	66 0f       	add	r22, r22
    1554:	77 1f       	adc	r23, r23
    1556:	88 1f       	adc	r24, r24
    1558:	da f7       	brpl	.-10     	; 0x1550 <log+0x1e>
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e8       	ldi	r20, 0x80	; 128
    1560:	5f eb       	ldi	r21, 0xBF	; 191
    1562:	9f e3       	ldi	r25, 0x3F	; 63
    1564:	88 39       	cpi	r24, 0x98	; 152
    1566:	20 f0       	brcs	.+8      	; 0x1570 <log+0x3e>
    1568:	80 3e       	cpi	r24, 0xE0	; 224
    156a:	38 f0       	brcs	.+14     	; 0x157a <log+0x48>
    156c:	21 96       	adiw	r28, 0x01	; 1
    156e:	8f 77       	andi	r24, 0x7F	; 127
    1570:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
    1574:	ec e7       	ldi	r30, 0x7C	; 124
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	04 c0       	rjmp	.+8      	; 0x1582 <log+0x50>
    157a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__addsf3>
    157e:	e9 ea       	ldi	r30, 0xA9	; 169
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_powser>
    1586:	8b 01       	movw	r16, r22
    1588:	be 01       	movw	r22, r28
    158a:	ec 01       	movw	r28, r24
    158c:	fb 2e       	mov	r15, r27
    158e:	6f 57       	subi	r22, 0x7F	; 127
    1590:	71 09       	sbc	r23, r1
    1592:	75 95       	asr	r23
    1594:	77 1f       	adc	r23, r23
    1596:	88 0b       	sbc	r24, r24
    1598:	99 0b       	sbc	r25, r25
    159a:	0e 94 02 09 	call	0x1204	; 0x1204 <__floatsisf>
    159e:	28 e1       	ldi	r18, 0x18	; 24
    15a0:	32 e7       	ldi	r19, 0x72	; 114
    15a2:	41 e3       	ldi	r20, 0x31	; 49
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 28 0b 	call	0x1650	; 0x1650 <__mulsf3x>
    15aa:	af 2d       	mov	r26, r15
    15ac:	98 01       	movw	r18, r16
    15ae:	ae 01       	movw	r20, r28
    15b0:	ff 90       	pop	r15
    15b2:	0f 91       	pop	r16
    15b4:	1f 91       	pop	r17
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__addsf3x>
    15be:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_round>

000015c2 <modf>:
    15c2:	fa 01       	movw	r30, r20
    15c4:	dc 01       	movw	r26, r24
    15c6:	aa 0f       	add	r26, r26
    15c8:	bb 1f       	adc	r27, r27
    15ca:	9b 01       	movw	r18, r22
    15cc:	ac 01       	movw	r20, r24
    15ce:	bf 57       	subi	r27, 0x7F	; 127
    15d0:	28 f4       	brcc	.+10     	; 0x15dc <modf+0x1a>
    15d2:	22 27       	eor	r18, r18
    15d4:	33 27       	eor	r19, r19
    15d6:	44 27       	eor	r20, r20
    15d8:	50 78       	andi	r21, 0x80	; 128
    15da:	20 c0       	rjmp	.+64     	; 0x161c <modf+0x5a>
    15dc:	b7 51       	subi	r27, 0x17	; 23
    15de:	90 f4       	brcc	.+36     	; 0x1604 <modf+0x42>
    15e0:	ab 2f       	mov	r26, r27
    15e2:	00 24       	eor	r0, r0
    15e4:	46 95       	lsr	r20
    15e6:	37 95       	ror	r19
    15e8:	27 95       	ror	r18
    15ea:	01 1c       	adc	r0, r1
    15ec:	a3 95       	inc	r26
    15ee:	d2 f3       	brmi	.-12     	; 0x15e4 <modf+0x22>
    15f0:	00 20       	and	r0, r0
    15f2:	71 f0       	breq	.+28     	; 0x1610 <modf+0x4e>
    15f4:	22 0f       	add	r18, r18
    15f6:	33 1f       	adc	r19, r19
    15f8:	44 1f       	adc	r20, r20
    15fa:	b3 95       	inc	r27
    15fc:	da f3       	brmi	.-10     	; 0x15f4 <modf+0x32>
    15fe:	0e d0       	rcall	.+28     	; 0x161c <modf+0x5a>
    1600:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__subsf3>
    1604:	61 30       	cpi	r22, 0x01	; 1
    1606:	71 05       	cpc	r23, r1
    1608:	a0 e8       	ldi	r26, 0x80	; 128
    160a:	8a 07       	cpc	r24, r26
    160c:	b9 46       	sbci	r27, 0x69	; 105
    160e:	30 f4       	brcc	.+12     	; 0x161c <modf+0x5a>
    1610:	9b 01       	movw	r18, r22
    1612:	ac 01       	movw	r20, r24
    1614:	66 27       	eor	r22, r22
    1616:	77 27       	eor	r23, r23
    1618:	88 27       	eor	r24, r24
    161a:	90 78       	andi	r25, 0x80	; 128
    161c:	30 96       	adiw	r30, 0x00	; 0
    161e:	21 f0       	breq	.+8      	; 0x1628 <modf+0x66>
    1620:	20 83       	st	Z, r18
    1622:	31 83       	std	Z+1, r19	; 0x01
    1624:	42 83       	std	Z+2, r20	; 0x02
    1626:	53 83       	std	Z+3, r21	; 0x03
    1628:	08 95       	ret

0000162a <__mulsf3>:
    162a:	0e 94 28 0b 	call	0x1650	; 0x1650 <__mulsf3x>
    162e:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_round>
    1632:	0e 94 56 09 	call	0x12ac	; 0x12ac <__fp_pscA>
    1636:	38 f0       	brcs	.+14     	; 0x1646 <__mulsf3+0x1c>
    1638:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__fp_pscB>
    163c:	20 f0       	brcs	.+8      	; 0x1646 <__mulsf3+0x1c>
    163e:	95 23       	and	r25, r21
    1640:	11 f0       	breq	.+4      	; 0x1646 <__mulsf3+0x1c>
    1642:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__fp_inf>
    1646:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__fp_nan>
    164a:	11 24       	eor	r1, r1
    164c:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__fp_szero>

00001650 <__mulsf3x>:
    1650:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fp_split3>
    1654:	70 f3       	brcs	.-36     	; 0x1632 <__mulsf3+0x8>

00001656 <__mulsf3_pse>:
    1656:	95 9f       	mul	r25, r21
    1658:	c1 f3       	breq	.-16     	; 0x164a <__mulsf3+0x20>
    165a:	95 0f       	add	r25, r21
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	55 1f       	adc	r21, r21
    1660:	62 9f       	mul	r22, r18
    1662:	f0 01       	movw	r30, r0
    1664:	72 9f       	mul	r23, r18
    1666:	bb 27       	eor	r27, r27
    1668:	f0 0d       	add	r31, r0
    166a:	b1 1d       	adc	r27, r1
    166c:	63 9f       	mul	r22, r19
    166e:	aa 27       	eor	r26, r26
    1670:	f0 0d       	add	r31, r0
    1672:	b1 1d       	adc	r27, r1
    1674:	aa 1f       	adc	r26, r26
    1676:	64 9f       	mul	r22, r20
    1678:	66 27       	eor	r22, r22
    167a:	b0 0d       	add	r27, r0
    167c:	a1 1d       	adc	r26, r1
    167e:	66 1f       	adc	r22, r22
    1680:	82 9f       	mul	r24, r18
    1682:	22 27       	eor	r18, r18
    1684:	b0 0d       	add	r27, r0
    1686:	a1 1d       	adc	r26, r1
    1688:	62 1f       	adc	r22, r18
    168a:	73 9f       	mul	r23, r19
    168c:	b0 0d       	add	r27, r0
    168e:	a1 1d       	adc	r26, r1
    1690:	62 1f       	adc	r22, r18
    1692:	83 9f       	mul	r24, r19
    1694:	a0 0d       	add	r26, r0
    1696:	61 1d       	adc	r22, r1
    1698:	22 1f       	adc	r18, r18
    169a:	74 9f       	mul	r23, r20
    169c:	33 27       	eor	r19, r19
    169e:	a0 0d       	add	r26, r0
    16a0:	61 1d       	adc	r22, r1
    16a2:	23 1f       	adc	r18, r19
    16a4:	84 9f       	mul	r24, r20
    16a6:	60 0d       	add	r22, r0
    16a8:	21 1d       	adc	r18, r1
    16aa:	82 2f       	mov	r24, r18
    16ac:	76 2f       	mov	r23, r22
    16ae:	6a 2f       	mov	r22, r26
    16b0:	11 24       	eor	r1, r1
    16b2:	9f 57       	subi	r25, 0x7F	; 127
    16b4:	50 40       	sbci	r21, 0x00	; 0
    16b6:	9a f0       	brmi	.+38     	; 0x16de <__mulsf3_pse+0x88>
    16b8:	f1 f0       	breq	.+60     	; 0x16f6 <__mulsf3_pse+0xa0>
    16ba:	88 23       	and	r24, r24
    16bc:	4a f0       	brmi	.+18     	; 0x16d0 <__mulsf3_pse+0x7a>
    16be:	ee 0f       	add	r30, r30
    16c0:	ff 1f       	adc	r31, r31
    16c2:	bb 1f       	adc	r27, r27
    16c4:	66 1f       	adc	r22, r22
    16c6:	77 1f       	adc	r23, r23
    16c8:	88 1f       	adc	r24, r24
    16ca:	91 50       	subi	r25, 0x01	; 1
    16cc:	50 40       	sbci	r21, 0x00	; 0
    16ce:	a9 f7       	brne	.-22     	; 0x16ba <__mulsf3_pse+0x64>
    16d0:	9e 3f       	cpi	r25, 0xFE	; 254
    16d2:	51 05       	cpc	r21, r1
    16d4:	80 f0       	brcs	.+32     	; 0x16f6 <__mulsf3_pse+0xa0>
    16d6:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__fp_inf>
    16da:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__fp_szero>
    16de:	5f 3f       	cpi	r21, 0xFF	; 255
    16e0:	e4 f3       	brlt	.-8      	; 0x16da <__mulsf3_pse+0x84>
    16e2:	98 3e       	cpi	r25, 0xE8	; 232
    16e4:	d4 f3       	brlt	.-12     	; 0x16da <__mulsf3_pse+0x84>
    16e6:	86 95       	lsr	r24
    16e8:	77 95       	ror	r23
    16ea:	67 95       	ror	r22
    16ec:	b7 95       	ror	r27
    16ee:	f7 95       	ror	r31
    16f0:	e7 95       	ror	r30
    16f2:	9f 5f       	subi	r25, 0xFF	; 255
    16f4:	c1 f7       	brne	.-16     	; 0x16e6 <__mulsf3_pse+0x90>
    16f6:	fe 2b       	or	r31, r30
    16f8:	88 0f       	add	r24, r24
    16fa:	91 1d       	adc	r25, r1
    16fc:	96 95       	lsr	r25
    16fe:	87 95       	ror	r24
    1700:	97 f9       	bld	r25, 7
    1702:	08 95       	ret

00001704 <__fp_mpack>:
    1704:	9f 3f       	cpi	r25, 0xFF	; 255
    1706:	31 f0       	breq	.+12     	; 0x1714 <__fp_mpack_finite+0xc>

00001708 <__fp_mpack_finite>:
    1708:	91 50       	subi	r25, 0x01	; 1
    170a:	20 f4       	brcc	.+8      	; 0x1714 <__fp_mpack_finite+0xc>
    170c:	87 95       	ror	r24
    170e:	77 95       	ror	r23
    1710:	67 95       	ror	r22
    1712:	b7 95       	ror	r27
    1714:	88 0f       	add	r24, r24
    1716:	91 1d       	adc	r25, r1
    1718:	96 95       	lsr	r25
    171a:	87 95       	ror	r24
    171c:	97 f9       	bld	r25, 7
    171e:	08 95       	ret

00001720 <__moddi3>:
    1720:	68 94       	set
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <__divdi3_moddi3>

00001724 <__divdi3>:
    1724:	e8 94       	clt

00001726 <__divdi3_moddi3>:
    1726:	f9 2f       	mov	r31, r25
    1728:	f1 2b       	or	r31, r17
    172a:	12 f0       	brmi	.+4      	; 0x1730 <__divdi3_moddi3+0xa>
    172c:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__udivdi3_umoddi3>
    1730:	a0 e0       	ldi	r26, 0x00	; 0
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ee e9       	ldi	r30, 0x9E	; 158
    1736:	fb e0       	ldi	r31, 0x0B	; 11
    1738:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__prologue_saves__+0xc>
    173c:	09 2e       	mov	r0, r25
    173e:	05 94       	asr	r0
    1740:	22 f4       	brpl	.+8      	; 0x174a <__divdi3_moddi3+0x24>
    1742:	0e 94 20 0c 	call	0x1840	; 0x1840 <__negdi2>
    1746:	11 23       	and	r17, r17
    1748:	92 f4       	brpl	.+36     	; 0x176e <__divdi3_moddi3+0x48>
    174a:	f0 e8       	ldi	r31, 0x80	; 128
    174c:	0f 26       	eor	r0, r31
    174e:	ff ef       	ldi	r31, 0xFF	; 255
    1750:	e0 94       	com	r14
    1752:	f0 94       	com	r15
    1754:	00 95       	com	r16
    1756:	10 95       	com	r17
    1758:	b0 94       	com	r11
    175a:	c0 94       	com	r12
    175c:	d0 94       	com	r13
    175e:	a1 94       	neg	r10
    1760:	bf 0a       	sbc	r11, r31
    1762:	cf 0a       	sbc	r12, r31
    1764:	df 0a       	sbc	r13, r31
    1766:	ef 0a       	sbc	r14, r31
    1768:	ff 0a       	sbc	r15, r31
    176a:	0f 0b       	sbc	r16, r31
    176c:	1f 0b       	sbc	r17, r31
    176e:	0e 94 cf 0b 	call	0x179e	; 0x179e <__udivmod64>
    1772:	07 fc       	sbrc	r0, 7
    1774:	0e 94 20 0c 	call	0x1840	; 0x1840 <__negdi2>
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	ec e0       	ldi	r30, 0x0C	; 12
    177e:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__epilogue_restores__+0xc>

00001782 <__umoddi3>:
    1782:	68 94       	set
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <__udivdi3_umoddi3>

00001786 <__udivdi3>:
    1786:	e8 94       	clt

00001788 <__udivdi3_umoddi3>:
    1788:	8f 92       	push	r8
    178a:	9f 92       	push	r9
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	0e 94 cf 0b 	call	0x179e	; 0x179e <__udivmod64>
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	9f 90       	pop	r9
    179a:	8f 90       	pop	r8
    179c:	08 95       	ret

0000179e <__udivmod64>:
    179e:	88 24       	eor	r8, r8
    17a0:	99 24       	eor	r9, r9
    17a2:	f4 01       	movw	r30, r8
    17a4:	e4 01       	movw	r28, r8
    17a6:	b0 e4       	ldi	r27, 0x40	; 64
    17a8:	9f 93       	push	r25
    17aa:	aa 27       	eor	r26, r26
    17ac:	9a 15       	cp	r25, r10
    17ae:	8b 04       	cpc	r8, r11
    17b0:	9c 04       	cpc	r9, r12
    17b2:	ed 05       	cpc	r30, r13
    17b4:	fe 05       	cpc	r31, r14
    17b6:	cf 05       	cpc	r28, r15
    17b8:	d0 07       	cpc	r29, r16
    17ba:	a1 07       	cpc	r26, r17
    17bc:	98 f4       	brcc	.+38     	; 0x17e4 <__udivmod64+0x46>
    17be:	ad 2f       	mov	r26, r29
    17c0:	dc 2f       	mov	r29, r28
    17c2:	cf 2f       	mov	r28, r31
    17c4:	fe 2f       	mov	r31, r30
    17c6:	e9 2d       	mov	r30, r9
    17c8:	98 2c       	mov	r9, r8
    17ca:	89 2e       	mov	r8, r25
    17cc:	98 2f       	mov	r25, r24
    17ce:	87 2f       	mov	r24, r23
    17d0:	76 2f       	mov	r23, r22
    17d2:	65 2f       	mov	r22, r21
    17d4:	54 2f       	mov	r21, r20
    17d6:	43 2f       	mov	r20, r19
    17d8:	32 2f       	mov	r19, r18
    17da:	22 27       	eor	r18, r18
    17dc:	b8 50       	subi	r27, 0x08	; 8
    17de:	31 f7       	brne	.-52     	; 0x17ac <__udivmod64+0xe>
    17e0:	bf 91       	pop	r27
    17e2:	27 c0       	rjmp	.+78     	; 0x1832 <__udivmod64+0x94>
    17e4:	1b 2e       	mov	r1, r27
    17e6:	bf 91       	pop	r27
    17e8:	bb 27       	eor	r27, r27
    17ea:	22 0f       	add	r18, r18
    17ec:	33 1f       	adc	r19, r19
    17ee:	44 1f       	adc	r20, r20
    17f0:	55 1f       	adc	r21, r21
    17f2:	66 1f       	adc	r22, r22
    17f4:	77 1f       	adc	r23, r23
    17f6:	88 1f       	adc	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	88 1c       	adc	r8, r8
    17fc:	99 1c       	adc	r9, r9
    17fe:	ee 1f       	adc	r30, r30
    1800:	ff 1f       	adc	r31, r31
    1802:	cc 1f       	adc	r28, r28
    1804:	dd 1f       	adc	r29, r29
    1806:	aa 1f       	adc	r26, r26
    1808:	bb 1f       	adc	r27, r27
    180a:	8a 14       	cp	r8, r10
    180c:	9b 04       	cpc	r9, r11
    180e:	ec 05       	cpc	r30, r12
    1810:	fd 05       	cpc	r31, r13
    1812:	ce 05       	cpc	r28, r14
    1814:	df 05       	cpc	r29, r15
    1816:	a0 07       	cpc	r26, r16
    1818:	b1 07       	cpc	r27, r17
    181a:	48 f0       	brcs	.+18     	; 0x182e <__udivmod64+0x90>
    181c:	8a 18       	sub	r8, r10
    181e:	9b 08       	sbc	r9, r11
    1820:	ec 09       	sbc	r30, r12
    1822:	fd 09       	sbc	r31, r13
    1824:	ce 09       	sbc	r28, r14
    1826:	df 09       	sbc	r29, r15
    1828:	a0 0b       	sbc	r26, r16
    182a:	b1 0b       	sbc	r27, r17
    182c:	21 60       	ori	r18, 0x01	; 1
    182e:	1a 94       	dec	r1
    1830:	e1 f6       	brne	.-72     	; 0x17ea <__udivmod64+0x4c>
    1832:	2e f4       	brtc	.+10     	; 0x183e <__udivmod64+0xa0>
    1834:	94 01       	movw	r18, r8
    1836:	af 01       	movw	r20, r30
    1838:	be 01       	movw	r22, r28
    183a:	cd 01       	movw	r24, r26
    183c:	00 0c       	add	r0, r0
    183e:	08 95       	ret

00001840 <__negdi2>:
    1840:	60 95       	com	r22
    1842:	70 95       	com	r23
    1844:	80 95       	com	r24
    1846:	90 95       	com	r25
    1848:	30 95       	com	r19
    184a:	40 95       	com	r20
    184c:	50 95       	com	r21
    184e:	21 95       	neg	r18
    1850:	3f 4f       	sbci	r19, 0xFF	; 255
    1852:	4f 4f       	sbci	r20, 0xFF	; 255
    1854:	5f 4f       	sbci	r21, 0xFF	; 255
    1856:	6f 4f       	sbci	r22, 0xFF	; 255
    1858:	7f 4f       	sbci	r23, 0xFF	; 255
    185a:	8f 4f       	sbci	r24, 0xFF	; 255
    185c:	9f 4f       	sbci	r25, 0xFF	; 255
    185e:	08 95       	ret

00001860 <__prologue_saves__>:
    1860:	2f 92       	push	r2
    1862:	3f 92       	push	r3
    1864:	4f 92       	push	r4
    1866:	5f 92       	push	r5
    1868:	6f 92       	push	r6
    186a:	7f 92       	push	r7
    186c:	8f 92       	push	r8
    186e:	9f 92       	push	r9
    1870:	af 92       	push	r10
    1872:	bf 92       	push	r11
    1874:	cf 92       	push	r12
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	ca 1b       	sub	r28, r26
    188a:	db 0b       	sbc	r29, r27
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	09 94       	ijmp

00001898 <__epilogue_restores__>:
    1898:	2a 88       	ldd	r2, Y+18	; 0x12
    189a:	39 88       	ldd	r3, Y+17	; 0x11
    189c:	48 88       	ldd	r4, Y+16	; 0x10
    189e:	5f 84       	ldd	r5, Y+15	; 0x0f
    18a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    18a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    18a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    18a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    18a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    18aa:	b9 84       	ldd	r11, Y+9	; 0x09
    18ac:	c8 84       	ldd	r12, Y+8	; 0x08
    18ae:	df 80       	ldd	r13, Y+7	; 0x07
    18b0:	ee 80       	ldd	r14, Y+6	; 0x06
    18b2:	fd 80       	ldd	r15, Y+5	; 0x05
    18b4:	0c 81       	ldd	r16, Y+4	; 0x04
    18b6:	1b 81       	ldd	r17, Y+3	; 0x03
    18b8:	aa 81       	ldd	r26, Y+2	; 0x02
    18ba:	b9 81       	ldd	r27, Y+1	; 0x01
    18bc:	ce 0f       	add	r28, r30
    18be:	d1 1d       	adc	r29, r1
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	ed 01       	movw	r28, r26
    18cc:	08 95       	ret

000018ce <__cmpdi2_s8>:
    18ce:	00 24       	eor	r0, r0
    18d0:	a7 fd       	sbrc	r26, 7
    18d2:	00 94       	com	r0
    18d4:	2a 17       	cp	r18, r26
    18d6:	30 05       	cpc	r19, r0
    18d8:	40 05       	cpc	r20, r0
    18da:	50 05       	cpc	r21, r0
    18dc:	60 05       	cpc	r22, r0
    18de:	70 05       	cpc	r23, r0
    18e0:	80 05       	cpc	r24, r0
    18e2:	90 05       	cpc	r25, r0
    18e4:	08 95       	ret

000018e6 <_exit>:
    18e6:	f8 94       	cli

000018e8 <__stop_program>:
    18e8:	ff cf       	rjmp	.-2      	; 0x18e8 <__stop_program>
